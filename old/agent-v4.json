{"name":"Financial Statement Analysis Agent v4","user_id":"f1db7a7d-b0db-44e5-a7fc-b3b0b05a352f","endpoint_name":null,"id":"cf10bdb9-a687-4d60-abf1-90ac0c8d3365","tags":null,"folder_id":"e54ca256-9cc3-4af7-b241-7707eb67bb82","gradient":null,"data":{"nodes":[{"data":{"description":"Create a prompt template with dynamic variables.","display_name":"Prompt","id":"Prompt-SinL5","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"template":{"tool_mode":false,"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"你是來自台灣的財務分析師，請根據文件和記憶的內容，用繁體中文和台灣慣用語，回答問題。\n如果在文件中找不到資料，則回答：找不到XXX的資料。\n\n文件：{Document}\n\n記憶：{Memory}\n\n以下是我輸入的問題：{Question}\n\n請回覆：\n","display_name":"Template","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"prompt","_input_type":"PromptInput","load_from_db":false},"Document":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"Document","display_name":"Document","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"Memory":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"Memory","display_name":"Memory","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"Question":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"Question","display_name":"Question","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":"Create a prompt template with dynamic variables.","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Prompt","documentation":"","custom_fields":{"template":["Document","Memory","Question"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":null,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true,"required_inputs":null}],"field_order":["template"],"beta":false,"legacy":false,"error":null,"edited":false,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"type":"Prompt"},"dragging":false,"height":514,"id":"Prompt-SinL5","position":{"x":1005.6247206768485,"y":1285.3052629426036},"positionAbsolute":{"x":1005.6247206768485,"y":1285.3052629426036},"selected":false,"type":"genericNode","width":320},{"data":{"description":"Get chat inputs from the Playground.","display_name":"Chat Input","id":"ChatInput-Wpo58","node":{"template":{"_type":"Component","files":{"trace_as_metadata":true,"file_path":"","fileTypes":["txt","md","mdx","csv","json","yaml","yml","xml","html","htm","pdf","docx","py","sh","sql","js","ts","tsx","jpg","jpeg","png","bmp","image"],"list":true,"required":false,"placeholder":"","show":true,"name":"files","value":"","display_name":"Files","advanced":true,"dynamic":false,"info":"Files to be sent with the message.","title_case":false,"type":"file","_input_type":"FileInput"},"background_color":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"background_color","value":"","display_name":"Background Color","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The background color of the icon.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"chat_icon":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"chat_icon","value":"","display_name":"Icon","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The icon of the message.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_USER, MESSAGE_SENDER_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        _background_color = self.background_color\n        _text_color = self.text_color\n        _icon = self.chat_icon\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\"background_color\": _background_color, \"text_color\": _text_color, \"icon\": _icon},\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"請告訴我台積電在2024Q1和2023Q1的存貨和應收帳款","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Message to be passed as input.","title_case":false,"type":"str","_input_type":"MultilineInput"},"sender":{"tool_mode":false,"trace_as_metadata":true,"options":["Machine","User"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"sender","value":"User","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"Type of sender.","title_case":false,"type":"str","_input_type":"DropdownInput"},"sender_name":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sender_name","value":"User","display_name":"Sender Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Name of the sender.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"session_id":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"session_id","value":"","display_name":"Session ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The session ID of the chat. If empty, the current session ID parameter will be used.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"should_store_message":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"should_store_message","value":true,"display_name":"Store Messages","advanced":true,"dynamic":false,"info":"Store the message in the history.","title_case":false,"type":"bool","_input_type":"BoolInput"},"text_color":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"text_color","value":"","display_name":"Text Color","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The text color of the name","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Get chat inputs from the Playground.","icon":"MessagesSquare","base_classes":["Message"],"display_name":"Chat Input","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"message","display_name":"Message","method":"message_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","should_store_message","sender","sender_name","session_id","files","background_color","chat_icon","text_color"],"beta":false,"legacy":false,"edited":false,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"type":"ChatInput"},"dragging":false,"height":231,"id":"ChatInput-Wpo58","position":{"x":-471.03659237149645,"y":567.6847746376587},"positionAbsolute":{"x":-471.03659237149645,"y":567.6847746376587},"selected":false,"type":"genericNode","width":320},{"id":"ChatOutput-4AW2c","type":"genericNode","position":{"x":1946.0392075273862,"y":1578.5280091528064},"data":{"type":"ChatOutput","node":{"template":{"_type":"Component","background_color":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"background_color","value":"","display_name":"Background Color","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The background color of the icon.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"chat_icon":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"chat_icon","value":"","display_name":"Icon","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The icon of the message.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, _id: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if _id:\n            source_dict[\"id\"] = _id\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    def message_response(self) -> Message:\n        _source, _icon, _display_name, _source_id = self.get_properties_from_source_component()\n        _background_color = self.background_color\n        _text_color = self.text_color\n        if self.chat_icon:\n            _icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(_source_id, _display_name, _source)\n        message.properties.icon = _icon\n        message.properties.background_color = _background_color\n        message.properties.text_color = _text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"data_template":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"data_template","value":"{text}","display_name":"Data Template","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Message to be passed as output.","title_case":false,"type":"str","_input_type":"MessageInput"},"sender":{"tool_mode":false,"trace_as_metadata":true,"options":["Machine","User"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"sender","value":"Machine","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"Type of sender.","title_case":false,"type":"str","_input_type":"DropdownInput"},"sender_name":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sender_name","value":"AI","display_name":"Sender Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Name of the sender.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"session_id":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"session_id","value":"","display_name":"Session ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The session ID of the chat. If empty, the current session ID parameter will be used.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"should_store_message":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"should_store_message","value":true,"display_name":"Store Messages","advanced":true,"dynamic":false,"info":"Store the message in the history.","title_case":false,"type":"bool","_input_type":"BoolInput"},"text_color":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"text_color","value":"","display_name":"Text Color","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The text color of the name","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Display a chat message in the Playground.","icon":"MessagesSquare","base_classes":["Message"],"display_name":"Chat Output","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"message","display_name":"Message","method":"message_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","should_store_message","sender","sender_name","session_id","data_template","background_color","chat_icon","text_color"],"beta":false,"legacy":false,"edited":false,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"id":"ChatOutput-4AW2c","description":"Display a chat message in the Playground.","display_name":"Chat Output"},"selected":false,"width":320,"height":232,"positionAbsolute":{"x":1946.0392075273862,"y":1578.5280091528064},"dragging":false},{"id":"CohereModel-zUthU","type":"genericNode","position":{"x":1481.458966399914,"y":1288.1056440927014},"data":{"type":"CohereModel","node":{"template":{"_type":"Component","output_parser":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"output_parser","value":"","display_name":"Output Parser","advanced":true,"input_types":["OutputParser"],"dynamic":false,"info":"The parser to use to parse the output of the model","title_case":false,"type":"other","_input_type":"HandleInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langchain_cohere import ChatCohere\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import FloatInput, SecretStrInput\n\n\nclass CohereComponent(LCModelComponent):\n    display_name = \"Cohere\"\n    description = \"Generate text using Cohere LLMs.\"\n    documentation = \"https://python.langchain.com/docs/modules/model_io/models/llms/integrations/cohere\"\n    icon = \"Cohere\"\n    name = \"CohereModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        SecretStrInput(\n            name=\"cohere_api_key\",\n            display_name=\"Cohere API Key\",\n            info=\"The Cohere API Key to use for the Cohere model.\",\n            advanced=False,\n            value=\"COHERE_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.75),\n        HandleInput(\n            name=\"output_parser\",\n            display_name=\"Output Parser\",\n            info=\"The parser to use to parse the output of the model\",\n            advanced=True,\n            input_types=[\"OutputParser\"],\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        cohere_api_key = self.cohere_api_key\n        temperature = self.temperature\n\n        api_key = SecretStr(cohere_api_key).get_secret_value() if cohere_api_key else None\n\n        return ChatCohere(\n            temperature=temperature or 0.75,\n            cohere_api_key=api_key,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"cohere_api_key":{"load_from_db":true,"required":false,"placeholder":"","show":true,"name":"cohere_api_key","value":"Cohere_API_KEY","display_name":"Cohere API Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The Cohere API Key to use for the Cohere model.","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageInput"},"stream":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"stream","value":false,"display_name":"Stream","advanced":false,"dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","title_case":false,"type":"bool","_input_type":"BoolInput"},"system_message":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"system_message","value":"","display_name":"System Message","advanced":false,"input_types":["Message"],"dynamic":false,"info":"System message to pass to the model.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"temperature":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"temperature","value":"0","display_name":"Temperature","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"float","_input_type":"FloatInput","load_from_db":false}},"description":"Generate text using Cohere LLMs.","icon":"Cohere","base_classes":["LanguageModel","Message"],"display_name":"Cohere","documentation":"https://python.langchain.com/docs/modules/model_io/models/llms/integrations/cohere","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text_output","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"required_inputs":[]},{"types":["LanguageModel"],"selected":"LanguageModel","name":"model_output","display_name":"Language Model","method":"build_model","value":"__UNDEFINED__","cache":true,"required_inputs":[]}],"field_order":["input_value","system_message","stream","cohere_api_key","temperature","output_parser"],"beta":false,"legacy":false,"edited":false,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"id":"CohereModel-zUthU","description":"Generate text using Cohere LLMs.","display_name":"Cohere"},"selected":true,"width":320,"height":582,"positionAbsolute":{"x":1481.458966399914,"y":1288.1056440927014},"dragging":false},{"id":"Prompt-kpJdw","type":"genericNode","position":{"x":53.13790469579294,"y":-387.1441540012578},"data":{"description":"Create a prompt template with dynamic variables.","display_name":"Prompt","id":"Prompt-kpJdw","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"template":{"tool_mode":false,"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"你是來自台灣的財務分析師，請從我輸入的問題及記憶中，分析出接下來的具體步驟。\n1. 得知我想要查詢的公司，並告訴我那家公司的股票代碼是多少，只簡短的回答我數字就好，例如：2330。如果有多家公司則以 \", \" 隔開，例如：2330, 2317。\n2. 得知我想要查詢的季度，例如：2024Q2。如果有多個季度則以 \", \" 隔開，例如：2024Q1, 2023Q1。\n3. 得知我想要查詢的欄目，例如：存貨。如果有多個欄目則以 \", \" 隔開，例如：存貨, 應付帳款。\n\n記憶：{Memory}\n\n以下是我輸入的問題：{Question}\n\n請依照以下格式回覆：\n1. 股票代碼：\n2. 查詢季度：\n3. 查詢欄目：","display_name":"Template","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"prompt","_input_type":"PromptInput","load_from_db":false},"Memory":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"Memory","display_name":"Memory","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"Question":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"Question","display_name":"Question","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":"Create a prompt template with dynamic variables.","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Prompt","documentation":"","custom_fields":{"template":["Memory","Question"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":null,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true,"required_inputs":null}],"field_order":["template"],"beta":false,"legacy":false,"error":null,"edited":false,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"type":"Prompt"},"selected":false,"width":320,"height":429,"positionAbsolute":{"x":53.13790469579294,"y":-387.1441540012578},"dragging":false},{"id":"CohereModel-qOdbr","type":"genericNode","position":{"x":530.5111607825293,"y":-575.6516751943212},"data":{"type":"CohereModel","node":{"template":{"_type":"Component","output_parser":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"output_parser","value":"","display_name":"Output Parser","advanced":true,"input_types":["OutputParser"],"dynamic":false,"info":"The parser to use to parse the output of the model","title_case":false,"type":"other","_input_type":"HandleInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langchain_cohere import ChatCohere\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import FloatInput, SecretStrInput\n\n\nclass CohereComponent(LCModelComponent):\n    display_name = \"Cohere\"\n    description = \"Generate text using Cohere LLMs.\"\n    documentation = \"https://python.langchain.com/docs/modules/model_io/models/llms/integrations/cohere\"\n    icon = \"Cohere\"\n    name = \"CohereModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        SecretStrInput(\n            name=\"cohere_api_key\",\n            display_name=\"Cohere API Key\",\n            info=\"The Cohere API Key to use for the Cohere model.\",\n            advanced=False,\n            value=\"COHERE_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.75),\n        HandleInput(\n            name=\"output_parser\",\n            display_name=\"Output Parser\",\n            info=\"The parser to use to parse the output of the model\",\n            advanced=True,\n            input_types=[\"OutputParser\"],\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        cohere_api_key = self.cohere_api_key\n        temperature = self.temperature\n\n        api_key = SecretStr(cohere_api_key).get_secret_value() if cohere_api_key else None\n\n        return ChatCohere(\n            temperature=temperature or 0.75,\n            cohere_api_key=api_key,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"cohere_api_key":{"load_from_db":true,"required":false,"placeholder":"","show":true,"name":"cohere_api_key","value":"Cohere_API_KEY","display_name":"Cohere API Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The Cohere API Key to use for the Cohere model.","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageInput"},"stream":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"stream","value":false,"display_name":"Stream","advanced":false,"dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","title_case":false,"type":"bool","_input_type":"BoolInput"},"system_message":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"system_message","value":"","display_name":"System Message","advanced":false,"input_types":["Message"],"dynamic":false,"info":"System message to pass to the model.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"temperature":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"temperature","value":0,"display_name":"Temperature","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"float","_input_type":"FloatInput","load_from_db":false}},"description":"Generate text using Cohere LLMs.","icon":"Cohere","base_classes":["LanguageModel","Message"],"display_name":"Cohere","documentation":"https://python.langchain.com/docs/modules/model_io/models/llms/integrations/cohere","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text_output","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"required_inputs":[]},{"types":["LanguageModel"],"selected":"LanguageModel","name":"model_output","display_name":"Language Model","method":"build_model","value":"__UNDEFINED__","cache":true,"required_inputs":[]}],"field_order":["input_value","system_message","stream","cohere_api_key","temperature","output_parser"],"beta":false,"legacy":false,"edited":false,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"id":"CohereModel-qOdbr","description":"Generate text using Cohere LLMs.","display_name":"Cohere"},"selected":false,"width":320,"height":582,"positionAbsolute":{"x":530.5111607825293,"y":-575.6516751943212},"dragging":false},{"id":"DelimitedTextExtractor-0VHcu","type":"genericNode","position":{"x":982.2587626254226,"y":-416.8722133686589},"data":{"type":"DelimitedTextExtractor","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import re\r\nfrom langflow.base.io.text import TextComponent\r\nfrom langflow.io import MultilineInput, Output\r\nfrom langflow.schema import Data\r\n\r\nclass DelimitedTextExtractor(TextComponent):\r\n    display_name = \"Delimited Text Extractor\"\r\n    description = \"Extract specific data from the text.\"\r\n    icon = \"type\"\r\n    name = \"DelimitedTextExtractor\"\r\n\r\n    inputs = [\r\n        MultilineInput(\r\n            name=\"input_value\",\r\n            display_name=\"Text\",\r\n            info=\"Text to be processed.\",\r\n        ),\r\n    ]\r\n    outputs = [\r\n        Output(display_name=\"Extracted Data\", name=\"extracted_data\", method=\"extract_data_between_delimiters\"),\r\n    ]\r\n\r\n    def extract_data_between_delimiters(self) -> Data:\r\n        # Regular expressions to capture the required data\r\n        stock_code_pattern = r\"股票代碼：(.+)\"\r\n        quarter_pattern = r\"查詢季度：(.+)\"\r\n        account_pattern = r\"查詢欄目：(.+)\"\r\n\r\n        # Extracting the stock code\r\n        stock_code_match = re.search(stock_code_pattern, self.input_value)\r\n        stock_code = stock_code_match.group(1) if stock_code_match else \"Not found\"\r\n\r\n        # Extracting the query quarter\r\n        quarter_match = re.search(quarter_pattern, self.input_value)\r\n        quarter = quarter_match.group(1) if quarter_match else \"Not found\"\r\n\r\n        # Extracting the query column\r\n        account_match = re.search(account_pattern, self.input_value)\r\n        account = account_match.group(1) if account_match else \"Not found\"\r\n\r\n        # Constructing the output data\r\n        extracted_data = Data(data={\r\n            \"stock_code\": stock_code,\r\n            \"quarter\": quarter,\r\n            \"account\": account,\r\n        })\r\n\r\n        self.status = extracted_data\r\n        return extracted_data\r\n\r\n# import re\r\n# from langflow.base.io.text import TextComponent\r\n# from langflow.io import MultilineInput, Output\r\n# from langflow.schema import Data\r\n\r\n# class DelimitedTextExtractor(TextComponent):\r\n#     display_name = \"Delimited Text Extractor\"\r\n#     description = \"Extract specific data from the text.\"\r\n#     icon = \"type\"\r\n#     name = \"DelimitedTextExtractor\"\r\n\r\n#     inputs = [\r\n#         MultilineInput(\r\n#             name=\"input_value\",\r\n#             display_name=\"Text\",\r\n#             info=\"Text to be processed.\",\r\n#         ),\r\n#     ]\r\n#     outputs = [\r\n#         Output(display_name=\"Extracted Data\", name=\"extracted_data\", method=\"extract_data_between_delimiters\"),\r\n#     ]\r\n\r\n#     def extract_data_between_delimiters(self) -> list[Data]:\r\n#         # Regular expressions to capture the required data\r\n#         stock_code_pattern = r\"股票代碼：(.+)\"\r\n#         quarter_pattern = r\"查詢季度：(.+)\"\r\n#         column_pattern = r\"查詢欄目：(.+)\"\r\n\r\n#         # Extracting the stock codes\r\n#         stock_code_match = re.search(stock_code_pattern, self.input_value)\r\n#         stock_codes = stock_code_match.group(1).split(\", \") if stock_code_match else [\"Not found\"]\r\n\r\n#         # Extracting the query quarters\r\n#         quarter_match = re.search(quarter_pattern, self.input_value)\r\n#         quarters = quarter_match.group(1).split(\", \") if quarter_match else [\"Not found\"]\r\n\r\n#         # Extracting the query columns\r\n#         column_match = re.search(column_pattern, self.input_value)\r\n#         columns = column_match.group(1).split(\", \") if column_match else [\"Not found\"]\r\n\r\n#         # Determine the maximum length among the lists\r\n#         max_length = max(len(stock_codes), len(quarters), len(columns))\r\n\r\n#         # Pad the lists to the maximum length with \"Not found\"\r\n#         stock_codes.extend([\"Not found\"] * (max_length - len(stock_codes)))\r\n#         quarters.extend([\"Not found\"] * (max_length - len(quarters)))\r\n#         columns.extend([\"Not found\"] * (max_length - len(columns)))\r\n\r\n#         # Constructing the output data list\r\n#         extracted_data_list = []\r\n#         for i in range(max_length):\r\n#             extracted_data = Data(data={\r\n#                 \"stock_code\": stock_codes[i].strip(),\r\n#                 \"quarter\": quarters[i].strip(),\r\n#                 \"column\": columns[i].strip(),\r\n#             })\r\n#             extracted_data_list.append(extracted_data)\r\n\r\n#         self.status = extracted_data_list\r\n#         return extracted_data_list\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be processed.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Extract specific data from the text.","icon":"type","base_classes":["Data"],"display_name":"Custom Component","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"extracted_data","display_name":"Extracted Data","method":"extract_data_between_delimiters","value":"__UNDEFINED__","cache":true}],"field_order":["input_value"],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"id":"DelimitedTextExtractor-0VHcu"},"selected":false,"width":320,"height":231,"positionAbsolute":{"x":982.2587626254226,"y":-416.8722133686589},"dragging":false},{"id":"ParseData-xfzt4","type":"genericNode","position":{"x":1486.3052361979476,"y":-107.79820479208831},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"data","value":"","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sep","value":"\n","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{stock_code}","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.1.0"},"id":"ParseData-xfzt4"},"selected":false,"width":320,"height":299,"positionAbsolute":{"x":1486.3052361979476,"y":-107.79820479208831},"dragging":false},{"id":"CombineText-PwRs1","type":"genericNode","position":{"x":533.0453310361968,"y":147.33248900395893},"data":{"type":"CombineText","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass CombineTextComponent(Component):\n    display_name = \"Combine Text\"\n    description = \"Concatenate two text sources into a single text chunk using a specified delimiter.\"\n    icon = \"merge\"\n    name = \"CombineText\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"text1\",\n            display_name=\"First Text\",\n            info=\"The first text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"text2\",\n            display_name=\"Second Text\",\n            info=\"The second text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"delimiter\",\n            display_name=\"Delimiter\",\n            info=\"A string used to separate the two text inputs.\",\n            value=\" \",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Combined Text\", name=\"combined_text\", method=\"combine_texts\"),\n    ]\n\n    def combine_texts(self) -> Message:\n        delimiter = self.delimiter if self.delimiter is not None else \"\"\n        combined = delimiter.join([self.text1, self.text2])\n        self.status = combined\n        return combined\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"delimiter":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"delimiter","value":"","display_name":"Delimiter","advanced":false,"input_types":["Message"],"dynamic":false,"info":"A string used to separate the two text inputs.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"text1":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"text1","value":"https://goodinfo.tw/tw/StockFinDetail.asp?RPT_CAT=BS_M_QUAR&STOCK_ID=","display_name":"First Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The first text input to concatenate.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"text2":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"text2","value":"","display_name":"Second Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The second text input to concatenate.","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Concatenate two text sources into a single text chunk using a specified delimiter.","icon":"merge","base_classes":["Message"],"display_name":"Combine Text","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"combined_text","display_name":"Combined Text","method":"combine_texts","value":"__UNDEFINED__","cache":true}],"field_order":["text1","text2","delimiter"],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"id":"CombineText-PwRs1"},"selected":false,"width":320,"height":424,"positionAbsolute":{"x":533.0453310361968,"y":147.33248900395893},"dragging":false},{"id":"ParseData-4Cxfv","type":"genericNode","position":{"x":1487.7567600720477,"y":321.77258737408084},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"data","value":"","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sep","value":"\n","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{markdown}","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.1.0"},"id":"ParseData-4Cxfv","description":"Convert Data into plain text following a specified template.","display_name":"Parse Data"},"selected":false,"width":320,"height":299,"positionAbsolute":{"x":1487.7567600720477,"y":321.77258737408084},"dragging":false},{"id":"DelimitedTextExtractor-17tp7","type":"genericNode","position":{"x":1966.8913147983912,"y":-149.25490442470777},"data":{"type":"DelimitedTextExtractor","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import re\r\nfrom langflow.base.io.text import TextComponent\r\nfrom langflow.io import MultilineInput, Output\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass DelimitedTextExtractor(TextComponent):\r\n    display_name = \"Delimited Text Extractor\"\r\n    description = \"Extract text between specified start and end delimiters, then remove text between another set of delimiters.\"\r\n    icon = \"type\"\r\n    name = \"DelimitedTextExtractor\"\r\n\r\n    inputs = [\r\n        MultilineInput(\r\n            name=\"input_value\",\r\n            display_name=\"Text\",\r\n            info=\"Text to be processed.\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"retrieve_start_delimiter\",\r\n            display_name=\"Retrieve Start Delimiter\",\r\n            info=\"The starting text delimiter for extraction.\",\r\n            value=\"retrieve_start\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"retrieve_end_delimiter\",\r\n            display_name=\"Retrieve End Delimiter\",\r\n            info=\"The ending text delimiter for extraction.\",\r\n            value=\"retrieve_end\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"remove_start_delimiter\",\r\n            display_name=\"Remove Start Delimiter\",\r\n            info=\"The starting text delimiter for removal.\",\r\n            value=\"remove_start\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"remove_end_delimiter\",\r\n            display_name=\"Remove End Delimiter\",\r\n            info=\"The ending text delimiter for removal.\",\r\n            value=\"remove_end\",\r\n        ),\r\n    ]\r\n    outputs = [\r\n        Output(display_name=\"Extracted Data\", name=\"extracted_data\", method=\"extract_data_between_delimiters\"),\r\n    ]\r\n    \r\n\r\n    def extract_data_between_delimiters(self) -> Data:\r\n        start = re.escape(self.retrieve_start_delimiter)\r\n        end = re.escape(self.retrieve_end_delimiter)\r\n        extract_pattern = f\"{start}(.*?){end}\"\r\n        \r\n        match = re.search(extract_pattern, self.input_value, re.DOTALL)\r\n        if match:\r\n            extracted_text = match.group(1).strip()\r\n        else:\r\n            extracted_text = f\"No content found between '{self.retrieve_start_delimiter}' and '{self.retrieve_end_delimiter}'.\"\r\n        \r\n        remove_start = re.escape(self.remove_start_delimiter)\r\n        remove_end = re.escape(self.remove_end_delimiter)\r\n        remove_pattern = f\"(?<={remove_start})(.*?){remove_end}\"\r\n        \r\n        modified_extracted_text = re.sub(remove_pattern, '', extracted_text, flags=re.DOTALL)\r\n        modified_extracted_text = re.sub(r'\\n\\s*\\n+', '\\n', modified_extracted_text)\r\n        modified_extracted_text = re.sub(r\"\\| ---.*\\|\\n\", \"\", modified_extracted_text)\r\n        modified_extracted_text = re.sub(r\"\\| 金額 \\| ％ \\|.*\\n\", \"\", modified_extracted_text)\r\n        \r\n        \r\n        def modify(line):\r\n            if (line.startswith(\"| 資產 |\") or line.startswith(\"| 負債 |\") or line.startswith(\"| 股東權益 |\")):\r\n                return \"\\n\" + line\r\n            parts = line.split(\" | \")\r\n            if len(parts) > 1:\r\n                parts = [parts[i] for i in range(len(parts)) if i % 2 == 1 or i == 0]\r\n                return \" | \".join(parts) + \" |\"\r\n            return line\r\n        \r\n        \r\n        modified_extracted_text = \"\\n\".join([modify(line) for line in modified_extracted_text.split(\"\\n\")])\r\n\r\n        self.status = modified_extracted_text\r\n        \r\n        header = modified_extracted_text.split(\"\\n\\n\")[0]\r\n        assets = modified_extracted_text.split(\"\\n\\n\")[1]\r\n        liabilities = modified_extracted_text.split(\"\\n\\n\")[2]\r\n        equities = modified_extracted_text.split(\"\\n\\n\")[3]\r\n        \r\n        return Data(data={\"header\": header, \"assets\": assets, \"liabilities\": liabilities, \"equities\": equities})\r\n\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be processed.","title_case":false,"type":"str","_input_type":"MultilineInput"},"remove_end_delimiter":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"remove_end_delimiter","value":"(載入中)","display_name":"Remove End Delimiter","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The ending text delimiter for removal.","title_case":false,"type":"str","_input_type":"MultilineInput"},"remove_start_delimiter":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"remove_start_delimiter","value":"(單位:億元)","display_name":"Remove Start Delimiter","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The starting text delimiter for removal.","title_case":false,"type":"str","_input_type":"MultilineInput"},"retrieve_end_delimiter":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"retrieve_end_delimiter","value":"| 財務報告書–公開資訊觀測站 |","display_name":"Retrieve End Delimiter","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The ending text delimiter for extraction.","title_case":false,"type":"str","_input_type":"MultilineInput"},"retrieve_start_delimiter":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"retrieve_start_delimiter","value":"非公司正規財報，僅供參考。","display_name":"Retrieve Start Delimiter","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The starting text delimiter for extraction.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Extract text between specified start and end delimiters, then remove text between another set of delimiters.","icon":"type","base_classes":["Data"],"display_name":"Custom Component","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"extracted_data","display_name":"Extracted Data","method":"extract_data_between_delimiters","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","retrieve_start_delimiter","retrieve_end_delimiter","remove_start_delimiter","remove_end_delimiter"],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"id":"DelimitedTextExtractor-17tp7"},"selected":false,"width":320,"height":613,"positionAbsolute":{"x":1966.8913147983912,"y":-149.25490442470777},"dragging":false},{"id":"DelimitedTextExtractor-J05mc","type":"genericNode","position":{"x":45.103599149475485,"y":461.5966739138795},"data":{"type":"DelimitedTextExtractor","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import re\r\nfrom langflow.base.io.text import TextComponent\r\nfrom langflow.io import MultilineInput, Output\r\nfrom langflow.schema.message import Message\r\n\r\nclass DelimitedTextExtractor(TextComponent):\r\n    display_name = \"Delimited Text Extractor\"\r\n    description = \"Extract specific data from the text.\"\r\n    icon = \"type\"\r\n    name = \"DelimitedTextExtractor\"\r\n\r\n    inputs = [\r\n        MultilineInput(\r\n            name=\"input_value\",\r\n            display_name=\"Text\",\r\n            info=\"Text to be processed. For example: 2330, 2317\",\r\n        ),\r\n    ]\r\n    outputs = [\r\n        Output(display_name=\"Output 1\", name=\"stock_code_1\", method=\"extract_first_stock_code\"),\r\n        Output(display_name=\"Output 2\", name=\"stock_code_2\", method=\"extract_second_stock_code\"),\r\n        Output(display_name=\"Multiple stock code?\", name=\"has_multiple_stock_codes\", method=\"extract_has_multiple_stock_codes\"),\r\n    ]\r\n\r\n    def extract_first_stock_code(self) -> Message:\r\n        stock_codes = [value.strip() for value in self.input_value.split(',')]\r\n        first_stock_code = stock_codes[0]\r\n\r\n        self.status = first_stock_code\r\n        return first_stock_code\r\n\r\n    def extract_second_stock_code(self) -> Message:\r\n        stock_codes = [value.strip() for value in self.input_value.split(',')]\r\n        second_stock_code = stock_codes[1] if len(stock_codes) > 1 else stock_codes[0]\r\n\r\n        self.status = second_stock_code\r\n        return second_stock_code\r\n\r\n    def extract_has_multiple_stock_codes(self) -> Message:\r\n        stock_codes = [value.strip() for value in self.input_value.split(',')]\r\n        has_multiple = \"true\" if len(stock_codes) > 1 else \"false\"\r\n\r\n        self.status = has_multiple\r\n        return has_multiple\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be processed. For example: 2330, 2317","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Extract specific data from the text.","icon":"type","base_classes":["Message"],"display_name":"Custom Component","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"stock_code_1","display_name":"Output 1","method":"extract_first_stock_code","value":"__UNDEFINED__","cache":true},{"types":["Message"],"selected":"Message","name":"stock_code_2","display_name":"Output 2","method":"extract_second_stock_code","value":"__UNDEFINED__","cache":true},{"types":["Message"],"selected":"Message","name":"has_multiple_stock_codes","display_name":"Multiple stock code?","method":"extract_has_multiple_stock_codes","value":"__UNDEFINED__","cache":true}],"field_order":["input_value"],"beta":false,"edited":true,"metadata":{},"lf_version":"1.1.0"},"id":"DelimitedTextExtractor-J05mc"},"selected":false,"width":320,"height":327,"dragging":false,"positionAbsolute":{"x":45.103599149475485,"y":461.5966739138795}},{"id":"CombineText-OYObI","type":"genericNode","position":{"x":534.8270260894301,"y":610.0487210191725},"data":{"type":"CombineText","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass CombineTextComponent(Component):\n    display_name = \"Combine Text\"\n    description = \"Concatenate two text sources into a single text chunk using a specified delimiter.\"\n    icon = \"merge\"\n    name = \"CombineText\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"text1\",\n            display_name=\"First Text\",\n            info=\"The first text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"text2\",\n            display_name=\"Second Text\",\n            info=\"The second text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"delimiter\",\n            display_name=\"Delimiter\",\n            info=\"A string used to separate the two text inputs.\",\n            value=\" \",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Combined Text\", name=\"combined_text\", method=\"combine_texts\"),\n    ]\n\n    def combine_texts(self) -> Message:\n        delimiter = self.delimiter if self.delimiter is not None else \"\"\n        combined = delimiter.join([self.text1, self.text2])\n        self.status = combined\n        return combined\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"delimiter":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"delimiter","value":"","display_name":"Delimiter","advanced":false,"input_types":["Message"],"dynamic":false,"info":"A string used to separate the two text inputs.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"text1":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"text1","value":"https://goodinfo.tw/tw/StockFinDetail.asp?RPT_CAT=BS_M_QUAR&STOCK_ID=","display_name":"First Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The first text input to concatenate.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"text2":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"text2","value":"","display_name":"Second Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The second text input to concatenate.","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Concatenate two text sources into a single text chunk using a specified delimiter.","icon":"merge","base_classes":["Message"],"display_name":"Combine Text","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"combined_text","display_name":"Combined Text","method":"combine_texts","value":"__UNDEFINED__","cache":true}],"field_order":["text1","text2","delimiter"],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"id":"CombineText-OYObI"},"selected":false,"width":320,"height":424,"positionAbsolute":{"x":534.8270260894301,"y":610.0487210191725},"dragging":false},{"id":"FirecrawlScrapeApi-DWyLk","type":"genericNode","position":{"x":1004.4723386420314,"y":682.2859193287777},"data":{"type":"FirecrawlScrapeApi","node":{"template":{"_type":"Component","extractorOptions":{"tool_mode":false,"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"extractorOptions","value":"","display_name":"Extractor Options","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The extractor options to send with the request.","title_case":false,"type":"other","_input_type":"DataInput"},"scrapeOptions":{"tool_mode":false,"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"scrapeOptions","value":"","display_name":"Scrape Options","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The page options to send with the request.","title_case":false,"type":"other","_input_type":"DataInput"},"api_key":{"load_from_db":true,"required":true,"placeholder":"","show":true,"name":"api_key","value":"Firecrawl_API_KEY","display_name":"API Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The API key to use Firecrawl API.","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.io import (\n    DataInput,\n    MessageTextInput,\n    IntInput,\n    Output,\n    SecretStrInput,\n    StrInput,\n)\nfrom langflow.schema import Data\n\n\nclass FirecrawlScrapeApi(Component):\n    display_name: str = \"FirecrawlScrapeApi\"\n    description: str = \"Firecrawl Scrape API.\"\n    name = \"FirecrawlScrapeApi\"\n\n    output_types: list[str] = [\"Document\"]\n    documentation: str = \"https://docs.firecrawl.dev/api-reference/endpoint/scrape\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"API Key\",\n            required=True,\n            password=True,\n            info=\"The API key to use Firecrawl API.\",\n        ),\n        MessageTextInput(\n            name=\"url\",\n            display_name=\"URL\",\n            required=True,\n            info=\"The URL to scrape.\",\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"Timeout in milliseconds for the request.\",\n        ),\n        DataInput(\n            name=\"scrapeOptions\",\n            display_name=\"Scrape Options\",\n            info=\"The page options to send with the request.\",\n        ),\n        DataInput(  # https://docs.firecrawl.dev/features/extract\n            name=\"extractorOptions\",\n            display_name=\"Extractor Options\",\n            info=\"The extractor options to send with the request.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"crawl\"),\n    ]\n\n    def crawl(self) -> list[Data]:\n        try:\n            from firecrawl.firecrawl import FirecrawlApp\n        except ImportError as e:\n            msg = \"Could not import firecrawl integration package. Please install it with `pip install firecrawl-py`.\"\n            raise ImportError(msg) from e\n\n        params = self.scrapeOptions.__dict__[\"data\"] if self.scrapeOptions else {}\n        extractor_options_dict = self.extractorOptions.__dict__[\"data\"] if self.extractorOptions else {}\n        if extractor_options_dict:\n            params[\"extract\"] = extractor_options_dict\n\n        app = FirecrawlApp(api_key=self.api_key)\n        results = app.scrape_url(self.url, params=params)\n        return Data(data=results)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"timeout":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"timeout","value":10000,"display_name":"Timeout","advanced":false,"dynamic":false,"info":"Timeout in milliseconds for the request.","title_case":false,"type":"int","_input_type":"IntInput","load_from_db":false},"url":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"name":"url","value":"","display_name":"URL","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The URL to scrape.","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Firecrawl Scrape API.","base_classes":["Data"],"display_name":"FirecrawlScrapeApi","documentation":"https://docs.firecrawl.dev/api-reference/endpoint/scrape","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"data","display_name":"Data","method":"crawl","value":"__UNDEFINED__","cache":true}],"field_order":["api_key","url","timeout","scrapeOptions","extractorOptions"],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"id":"FirecrawlScrapeApi-DWyLk","description":"Firecrawl Scrape API.","display_name":"FirecrawlScrapeApi"},"selected":false,"width":320,"height":500,"positionAbsolute":{"x":1004.4723386420314,"y":682.2859193287777},"dragging":false},{"id":"Memory-NJufA","type":"genericNode","position":{"x":-453.0658664362509,"y":26.215316304205487},"data":{"type":"Memory","node":{"template":{"_type":"Component","memory":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"memory","value":"","display_name":"External Memory","advanced":false,"input_types":["BaseChatMessageHistory"],"dynamic":false,"info":"Retrieve messages from an external memory. If empty, it will use the Langflow tables.","title_case":false,"type":"other","_input_type":"HandleInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langchain.memory import ConversationBufferMemory\n\nfrom langflow.custom import Component\nfrom langflow.field_typing import BaseChatMemory\nfrom langflow.helpers.data import data_to_text\nfrom langflow.inputs import HandleInput\nfrom langflow.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import LCBuiltinChatMemory, get_messages\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER\n\n\nclass MemoryComponent(Component):\n    display_name = \"Message History\"\n    description = \"Retrieves stored chat messages from Langflow tables or an external memory.\"\n    icon = \"message-square-more\"\n    name = \"Memory\"\n\n    inputs = [\n        HandleInput(\n            name=\"memory\",\n            display_name=\"External Memory\",\n            input_types=[\"BaseChatMessageHistory\"],\n            info=\"Retrieve messages from an external memory. If empty, it will use the Langflow tables.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Filter by sender type.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Filter by sender name.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Text\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        if self.memory:\n            # override session_id\n            self.memory.session_id = session_id\n\n            stored = self.memory.messages\n            # langchain memories are supposed to return messages in ascending order\n            if order == \"DESC\":\n                stored = stored[::-1]\n            if n_messages:\n                stored = stored[:n_messages]\n            stored = [Message.from_lc_message(m) for m in stored]\n            if sender:\n                expected_type = MESSAGE_SENDER_AI if sender == MESSAGE_SENDER_AI else MESSAGE_SENDER_USER\n                stored = [m for m in stored if m.type == expected_type]\n        else:\n            stored = get_messages(\n                sender=sender,\n                sender_name=sender_name,\n                session_id=session_id,\n                limit=n_messages,\n                order=order,\n            )\n        self.status = stored\n        return stored\n\n    def retrieve_messages_as_text(self) -> Message:\n        stored_text = data_to_text(self.template, self.retrieve_messages())\n        self.status = stored_text\n        return Message(text=stored_text)\n\n    def build_lc_memory(self) -> BaseChatMemory:\n        chat_memory = self.memory or LCBuiltinChatMemory(flow_id=self.flow_id, session_id=self.session_id)\n        return ConversationBufferMemory(chat_memory=chat_memory)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"n_messages":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"n_messages","value":100,"display_name":"Number of Messages","advanced":true,"dynamic":false,"info":"Number of messages to retrieve.","title_case":false,"type":"int","_input_type":"IntInput"},"order":{"tool_mode":false,"trace_as_metadata":true,"options":["Ascending","Descending"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"order","value":"Ascending","display_name":"Order","advanced":true,"dynamic":false,"info":"Order of the messages.","title_case":false,"type":"str","_input_type":"DropdownInput"},"sender":{"tool_mode":false,"trace_as_metadata":true,"options":["Machine","User","Machine and User"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"sender","value":"Machine and User","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"Filter by sender type.","title_case":false,"type":"str","_input_type":"DropdownInput"},"sender_name":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sender_name","value":"","display_name":"Sender Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Filter by sender name.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"session_id":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"session_id","value":"","display_name":"Session ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The session ID of the chat. If empty, the current session ID parameter will be used.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"template":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{sender_name}: {text}","display_name":"Template","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Retrieves stored chat messages from Langflow tables or an external memory.","icon":"message-square-more","base_classes":["Data","Message"],"display_name":"Chat Memory","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"messages","display_name":"Data","method":"retrieve_messages","value":"__UNDEFINED__","cache":true},{"types":["Message"],"selected":"Message","name":"messages_text","display_name":"Text","method":"retrieve_messages_as_text","value":"__UNDEFINED__","cache":true}],"field_order":["memory","sender","sender_name","n_messages","session_id","order","template"],"beta":false,"legacy":false,"edited":false,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"id":"Memory-NJufA","description":"Retrieves stored chat messages from Langflow tables or an external memory.","display_name":"Chat Memory"},"selected":false,"width":320,"height":262,"positionAbsolute":{"x":-453.0658664362509,"y":26.215316304205487},"dragging":false},{"id":"ParseData-vwRZJ","type":"genericNode","position":{"x":1479.7714879967034,"y":808.8224758367533},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"data","value":"","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sep","value":"\n","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{markdown}","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.1.0"},"id":"ParseData-vwRZJ","description":"Convert Data into plain text following a specified template.","display_name":"Parse Data"},"selected":false,"width":320,"height":299,"positionAbsolute":{"x":1479.7714879967034,"y":808.8224758367533},"dragging":false},{"id":"ParseData-gZXqH","type":"genericNode","position":{"x":1486.7083264181174,"y":-847.4528023651234},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"data","value":"","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sep","value":"\n","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{quarter}","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.1.0"},"id":"ParseData-gZXqH"},"selected":false,"width":320,"height":299,"positionAbsolute":{"x":1486.7083264181174,"y":-847.4528023651234},"dragging":false},{"id":"ParseData-3jisH","type":"genericNode","position":{"x":1486.1919089588482,"y":-482.6200847241066},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"data","value":"","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sep","value":"\n","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{account}","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.1.0"},"id":"ParseData-3jisH"},"selected":false,"width":320,"height":299,"positionAbsolute":{"x":1486.1919089588482,"y":-482.6200847241066},"dragging":false},{"id":"ParseData-mSqIU","type":"genericNode","position":{"x":2476.1317241560323,"y":-503.0291333599313},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"data","value":"","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sep","value":"\n","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{assets}","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.1.0"},"id":"ParseData-mSqIU"},"selected":false,"width":320,"height":299,"positionAbsolute":{"x":2476.1317241560323,"y":-503.0291333599313},"dragging":false},{"id":"note-aCdRF","type":"noteNode","position":{"x":1269.204717185933,"y":2277.464630580229},"data":{"node":{"description":"1. 刪除 chroma db\n2. 將 firecrawlscapeapi 串起來\n3. 只保留金額資料、並根據步驟2和3處理資料","display_name":"","documentation":"","template":{"backgroundColor":"amber"}},"type":"note","id":"note-aCdRF"},"width":324,"height":324,"selected":false,"dragging":false,"positionAbsolute":{"x":1269.204717185933,"y":2277.464630580229},"resizing":false,"style":{"width":324,"height":324}},{"id":"DelimitedTextExtractor-EzIiN","type":"genericNode","position":{"x":2956.512733690177,"y":-808.4439815361978},"data":{"type":"CustomComponent","node":{"template":{"_type":"Component","account":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"account","value":"","display_name":"Account","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Account to filter by.","title_case":false,"type":"str","_input_type":"MultilineInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import re\r\nimport pandas as pd\r\nfrom langflow.base.io.text import TextComponent\r\nfrom langflow.io import MultilineInput, Output\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass CustomComponent(TextComponent):\r\n    display_name = \"CustomComponent\"\r\n    icon = \"type\"\r\n    name = \"CustomComponent\"\r\n\r\n    inputs = [\r\n        MultilineInput(\r\n            name=\"input_text\",\r\n            display_name=\"Text\",\r\n            info=\"Text to be processed.\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"quarter\",\r\n            display_name=\"Quarter\",\r\n            info=\"Quarter to filter by.\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"account\",\r\n            display_name=\"Account\",\r\n            info=\"Account to filter by.\",\r\n        ),\r\n    ]\r\n    outputs = [\r\n        Output(display_name=\"Data\", name=\"data\", method=\"extract_data_between_delimiters\"),\r\n    ]\r\n    \r\n\r\n    def extract_data_between_delimiters(self) -> Data:\r\n        table_pattern = r\"\\|.*\\|\"\r\n        tables = re.findall(table_pattern, self.input_text)\r\n        \r\n        header_row = tables[0]\r\n        headers = [col.strip() for col in header_row.split('|')[1:-1]]\r\n        \r\n        rows = []\r\n        for row in tables[1:]:\r\n            rows.append([data.strip() for data in row.split('|')[1:-1]])\r\n        \r\n        df = pd.DataFrame(rows, columns=headers)\r\n        \r\n        quarters = [q.strip() for q in self.quarter.split(\", \") if q.strip()]\r\n        accounts = [col.strip() for col in self.account.split(\", \") if col.strip()]\r\n        \r\n        columns = ['資產'] + [q for q in quarters if q in df.columns]\r\n        \r\n        df = df[columns]\r\n        df = df[df['資產'].isin(accounts + ['資產總額'])]\r\n        \r\n        self.status = df\r\n        \r\n        return Data(data={\"asset\": df.to_csv(index=False, sep=' ')})\r\n        ","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_text":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_text","value":"","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be processed.","title_case":false,"type":"str","_input_type":"MultilineInput"},"quarter":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"quarter","value":"","display_name":"Quarter","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Quarter to filter by.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Used to pass text to the next component.","icon":"type","base_classes":["Data"],"display_name":"Custom Component","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"data","display_name":"Data","method":"extract_data_between_delimiters","value":"__UNDEFINED__","cache":true}],"field_order":["input_text","quarter","account"],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"id":"DelimitedTextExtractor-EzIiN"},"selected":false,"width":320,"height":402,"positionAbsolute":{"x":2956.512733690177,"y":-808.4439815361978},"dragging":false},{"id":"ParseData-BaGEF","type":"genericNode","position":{"x":3394.633304926185,"y":-698.3919297119478},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"data","value":"","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sep","value":"\n","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{asset}","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.1.0"},"id":"ParseData-BaGEF"},"selected":false,"width":320,"height":299,"positionAbsolute":{"x":3394.633304926185,"y":-698.3919297119478},"dragging":false},{"id":"FirecrawlScrapeApi-souUW","type":"genericNode","position":{"x":1011.2665686015325,"y":91.98745966638023},"data":{"type":"FirecrawlScrapeApi","node":{"template":{"_type":"Component","extractorOptions":{"tool_mode":false,"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"extractorOptions","value":"","display_name":"Extractor Options","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The extractor options to send with the request.","title_case":false,"type":"other","_input_type":"DataInput"},"scrapeOptions":{"tool_mode":false,"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"scrapeOptions","value":"","display_name":"Scrape Options","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The page options to send with the request.","title_case":false,"type":"other","_input_type":"DataInput"},"api_key":{"load_from_db":true,"required":true,"placeholder":"","show":true,"name":"api_key","value":"Firecrawl_API_KEY","display_name":"API Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The API key to use Firecrawl API.","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.io import (\n    DataInput,\n    MessageTextInput,\n    IntInput,\n    Output,\n    SecretStrInput,\n    StrInput,\n)\nfrom langflow.schema import Data\n\n\nclass FirecrawlScrapeApi(Component):\n    display_name: str = \"FirecrawlScrapeApi\"\n    description: str = \"Firecrawl Scrape API.\"\n    name = \"FirecrawlScrapeApi\"\n\n    output_types: list[str] = [\"Document\"]\n    documentation: str = \"https://docs.firecrawl.dev/api-reference/endpoint/scrape\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"API Key\",\n            required=True,\n            password=True,\n            info=\"The API key to use Firecrawl API.\",\n        ),\n        MessageTextInput(\n            name=\"url\",\n            display_name=\"URL\",\n            required=True,\n            info=\"The URL to scrape.\",\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"Timeout in milliseconds for the request.\",\n        ),\n        DataInput(\n            name=\"scrapeOptions\",\n            display_name=\"Scrape Options\",\n            info=\"The page options to send with the request.\",\n        ),\n        DataInput(  # https://docs.firecrawl.dev/features/extract\n            name=\"extractorOptions\",\n            display_name=\"Extractor Options\",\n            info=\"The extractor options to send with the request.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"crawl\"),\n    ]\n\n    def crawl(self) -> list[Data]:\n        try:\n            from firecrawl.firecrawl import FirecrawlApp\n        except ImportError as e:\n            msg = \"Could not import firecrawl integration package. Please install it with `pip install firecrawl-py`.\"\n            raise ImportError(msg) from e\n\n        params = self.scrapeOptions.__dict__[\"data\"] if self.scrapeOptions else {}\n        extractor_options_dict = self.extractorOptions.__dict__[\"data\"] if self.extractorOptions else {}\n        if extractor_options_dict:\n            params[\"extract\"] = extractor_options_dict\n\n        app = FirecrawlApp(api_key=self.api_key)\n        results = app.scrape_url(self.url, params=params)\n        return Data(data=results)\n\n\n# from langflow.custom import Component\n# from langflow.io import (\n#     DataInput,\n#     MessageTextInput,\n#     IntInput,\n#     Output,\n#     SecretStrInput,\n#     StrInput,\n# )\n# from langflow.schema import Data\n\n\n# class FirecrawlScrapeApi(Component):\n#     display_name: str = \"FirecrawlScrapeApi\"\n#     description: str = \"Firecrawl Scrape API.\"\n#     name = \"FirecrawlScrapeApi\"\n\n#     output_types: list[str] = [\"Document\"]\n#     documentation: str = \"https://docs.firecrawl.dev/api-reference/endpoint/scrape\"\n\n#     inputs = [\n#         SecretStrInput(\n#             name=\"api_key\",\n#             display_name=\"API Key\",\n#             required=True,\n#             password=True,\n#             info=\"The API key to use Firecrawl API.\",\n#         ),\n#         MessageTextInput(\n#             name=\"urls\",\n#             display_name=\"URLs\",\n#             required=True,\n#             info=\"Comma-separated URLs to scrape.\",\n#         ),\n#         IntInput(\n#             name=\"timeout\",\n#             display_name=\"Timeout\",\n#             info=\"Timeout in milliseconds for the request.\",\n#         ),\n#         DataInput(\n#             name=\"scrapeOptions\",\n#             display_name=\"Scrape Options\",\n#             info=\"The page options to send with the request.\",\n#         ),\n#         DataInput(  # https://docs.firecrawl.dev/features/extract\n#             name=\"extractorOptions\",\n#             display_name=\"Extractor Options\",\n#             info=\"The extractor options to send with the request.\",\n#         ),\n#     ]\n\n#     outputs = [\n#         Output(display_name=\"Data\", name=\"data\", method=\"crawl\"),\n#     ]\n\n#     def crawl(self) -> list[Data]:\n#         try:\n#             from firecrawl.firecrawl import FirecrawlApp\n#         except ImportError as e:\n#             msg = \"Could not import firecrawl integration package. Please install it with `pip install firecrawl-py`.\"\n#             raise ImportError(msg) from e\n\n#         params = self.scrapeOptions.__dict__[\"data\"] if self.scrapeOptions else {}\n#         extractor_options_dict = self.extractorOptions.__dict__[\"data\"] if self.extractorOptions else {}\n#         if extractor_options_dict:\n#             params[\"extract\"] = extractor_options_dict\n\n#         # Parse the comma-separated URLs\n#         url_list = [url.strip() for url in self.urls.split(\",\") if url.strip()]\n#         app = FirecrawlApp(api_key=self.api_key)\n\n#         results = []\n#         for url in url_list:\n#             result = app.scrape_url(url, params=params)\n#             results.append(Data(data=result))\n\n#         return results\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"timeout":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"timeout","value":10000,"display_name":"Timeout","advanced":false,"dynamic":false,"info":"Timeout in milliseconds for the request.","title_case":false,"type":"int","_input_type":"IntInput","load_from_db":false},"url":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"name":"url","value":"","display_name":"URL","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The URL to scrape.","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Firecrawl Scrape API.","base_classes":["Data"],"display_name":"FirecrawlScrapeApi","documentation":"https://docs.firecrawl.dev/api-reference/endpoint/scrape","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"data","display_name":"Data","method":"crawl","value":"__UNDEFINED__","cache":true}],"field_order":["api_key","url","timeout","scrapeOptions","extractorOptions"],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"id":"FirecrawlScrapeApi-souUW","description":"Firecrawl Scrape API.","display_name":"FirecrawlScrapeApi"},"selected":false,"width":320,"height":500,"positionAbsolute":{"x":1011.2665686015325,"y":91.98745966638023},"dragging":false},{"id":"DelimitedTextExtractor-GTLSd","type":"genericNode","position":{"x":1945.24459610957,"y":662.8783839980533},"data":{"type":"DelimitedTextExtractor","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import re\r\nfrom langflow.base.io.text import TextComponent\r\nfrom langflow.io import MultilineInput, Output\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass DelimitedTextExtractor(TextComponent):\r\n    display_name = \"Delimited Text Extractor\"\r\n    description = \"Extract text between specified start and end delimiters, then remove text between another set of delimiters.\"\r\n    icon = \"type\"\r\n    name = \"DelimitedTextExtractor\"\r\n\r\n    inputs = [\r\n        MultilineInput(\r\n            name=\"input_value\",\r\n            display_name=\"Text\",\r\n            info=\"Text to be processed.\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"retrieve_start_delimiter\",\r\n            display_name=\"Retrieve Start Delimiter\",\r\n            info=\"The starting text delimiter for extraction.\",\r\n            value=\"retrieve_start\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"retrieve_end_delimiter\",\r\n            display_name=\"Retrieve End Delimiter\",\r\n            info=\"The ending text delimiter for extraction.\",\r\n            value=\"retrieve_end\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"remove_start_delimiter\",\r\n            display_name=\"Remove Start Delimiter\",\r\n            info=\"The starting text delimiter for removal.\",\r\n            value=\"remove_start\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"remove_end_delimiter\",\r\n            display_name=\"Remove End Delimiter\",\r\n            info=\"The ending text delimiter for removal.\",\r\n            value=\"remove_end\",\r\n        ),\r\n    ]\r\n    outputs = [\r\n        Output(display_name=\"Extracted Data\", name=\"extracted_data\", method=\"extract_data_between_delimiters\"),\r\n    ]\r\n    \r\n\r\n    def extract_data_between_delimiters(self) -> Data:\r\n        start = re.escape(self.retrieve_start_delimiter)\r\n        end = re.escape(self.retrieve_end_delimiter)\r\n        extract_pattern = f\"{start}(.*?){end}\"\r\n        \r\n        match = re.search(extract_pattern, self.input_value, re.DOTALL)\r\n        if match:\r\n            extracted_text = match.group(1).strip()\r\n        else:\r\n            extracted_text = f\"No content found between '{self.retrieve_start_delimiter}' and '{self.retrieve_end_delimiter}'.\"\r\n        \r\n        remove_start = re.escape(self.remove_start_delimiter)\r\n        remove_end = re.escape(self.remove_end_delimiter)\r\n        remove_pattern = f\"(?<={remove_start})(.*?){remove_end}\"\r\n        \r\n        modified_extracted_text = re.sub(remove_pattern, '', extracted_text, flags=re.DOTALL)\r\n        modified_extracted_text = re.sub(r'\\n\\s*\\n+', '\\n', modified_extracted_text)\r\n        modified_extracted_text = re.sub(r\"\\| ---.*\\|\\n\", \"\", modified_extracted_text)\r\n        modified_extracted_text = re.sub(r\"\\| 金額 \\| ％ \\|.*\\n\", \"\", modified_extracted_text)\r\n        \r\n        \r\n        def modify(line):\r\n            if (line.startswith(\"| 資產 |\") or line.startswith(\"| 負債 |\") or line.startswith(\"| 股東權益 |\")):\r\n                return \"\\n\" + line\r\n            parts = line.split(\" | \")\r\n            if len(parts) > 1:\r\n                parts = [parts[i] for i in range(len(parts)) if i % 2 == 1 or i == 0]\r\n                return \" | \".join(parts) + \" |\"\r\n            return line\r\n        \r\n        \r\n        modified_extracted_text = \"\\n\".join([modify(line) for line in modified_extracted_text.split(\"\\n\")])\r\n\r\n        self.status = modified_extracted_text\r\n        \r\n        header = modified_extracted_text.split(\"\\n\\n\")[0]\r\n        assets = modified_extracted_text.split(\"\\n\\n\")[1]\r\n        liabilities = modified_extracted_text.split(\"\\n\\n\")[2]\r\n        equities = modified_extracted_text.split(\"\\n\\n\")[3]\r\n        \r\n        return Data(data={\"header\": header, \"assets\": assets, \"liabilities\": liabilities, \"equities\": equities})\r\n\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be processed.","title_case":false,"type":"str","_input_type":"MultilineInput"},"remove_end_delimiter":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"remove_end_delimiter","value":"(載入中)","display_name":"Remove End Delimiter","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The ending text delimiter for removal.","title_case":false,"type":"str","_input_type":"MultilineInput"},"remove_start_delimiter":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"remove_start_delimiter","value":"(單位:億元)","display_name":"Remove Start Delimiter","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The starting text delimiter for removal.","title_case":false,"type":"str","_input_type":"MultilineInput"},"retrieve_end_delimiter":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"retrieve_end_delimiter","value":"| 財務報告書–公開資訊觀測站 |","display_name":"Retrieve End Delimiter","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The ending text delimiter for extraction.","title_case":false,"type":"str","_input_type":"MultilineInput"},"retrieve_start_delimiter":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"retrieve_start_delimiter","value":"非公司正規財報，僅供參考。","display_name":"Retrieve Start Delimiter","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The starting text delimiter for extraction.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Extract text between specified start and end delimiters, then remove text between another set of delimiters.","icon":"type","base_classes":["Data"],"display_name":"Custom Component","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"extracted_data","display_name":"Extracted Data","method":"extract_data_between_delimiters","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","retrieve_start_delimiter","retrieve_end_delimiter","remove_start_delimiter","remove_end_delimiter"],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"id":"DelimitedTextExtractor-GTLSd"},"selected":false,"width":320,"height":613,"positionAbsolute":{"x":1945.24459610957,"y":662.8783839980533},"dragging":false},{"id":"ParseData-KOm2l","type":"genericNode","position":{"x":2467.3637089752474,"y":-126.56023652498715},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"data","value":"","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sep","value":"\n","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{liabilities}","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.1.0"},"id":"ParseData-KOm2l"},"selected":false,"width":320,"height":299,"positionAbsolute":{"x":2467.3637089752474,"y":-126.56023652498715},"dragging":false},{"id":"ParseData-oEabT","type":"genericNode","position":{"x":2474.3950536065554,"y":236.0240073804694},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"data","value":"","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sep","value":"\n","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{equities}","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.1.0"},"id":"ParseData-oEabT"},"selected":false,"width":320,"height":299,"positionAbsolute":{"x":2474.3950536065554,"y":236.0240073804694},"dragging":false},{"id":"CustomComponent-3T4Z5","type":"genericNode","position":{"x":2954.51612766922,"y":-303.02696073454536},"data":{"type":"CustomComponent","node":{"template":{"_type":"Component","account":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"account","value":"","display_name":"Account","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Account to filter by.","title_case":false,"type":"str","_input_type":"MultilineInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import re\r\nimport pandas as pd\r\nfrom langflow.base.io.text import TextComponent\r\nfrom langflow.io import MultilineInput, Output\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass CustomComponent(TextComponent):\r\n    display_name = \"CustomComponent\"\r\n    icon = \"type\"\r\n    name = \"CustomComponent\"\r\n\r\n    inputs = [\r\n        MultilineInput(\r\n            name=\"input_text\",\r\n            display_name=\"Text\",\r\n            info=\"Text to be processed.\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"quarter\",\r\n            display_name=\"Quarter\",\r\n            info=\"Quarter to filter by.\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"account\",\r\n            display_name=\"Account\",\r\n            info=\"Account to filter by.\",\r\n        ),\r\n    ]\r\n    outputs = [\r\n        Output(display_name=\"Data\", name=\"data\", method=\"extract_data_between_delimiters\"),\r\n    ]\r\n    \r\n\r\n    def extract_data_between_delimiters(self) -> Data:\r\n        table_pattern = r\"\\|.*\\|\"\r\n        tables = re.findall(table_pattern, self.input_text)\r\n        \r\n        header_row = tables[0]\r\n        headers = [col.strip() for col in header_row.split('|')[1:-1]]\r\n        \r\n        rows = []\r\n        for row in tables[1:]:\r\n            rows.append([data.strip() for data in row.split('|')[1:-1]])\r\n        \r\n        df = pd.DataFrame(rows, columns=headers)\r\n        \r\n        quarters = [q.strip() for q in self.quarter.split(\", \") if q.strip()]\r\n        accounts = [col.strip() for col in self.account.split(\", \") if col.strip()]\r\n        \r\n        columns = ['負債'] + [q for q in quarters if q in df.columns]\r\n        \r\n        df = df[columns]\r\n        df = df[df['負債'].isin(accounts + ['負債總額'])]\r\n        \r\n        self.status = df\r\n        \r\n        return Data(data={\"liability\": df.to_csv(index=False, sep=' ')})\r\n        ","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_text":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_text","value":"","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be processed.","title_case":false,"type":"str","_input_type":"MultilineInput"},"quarter":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"quarter","value":"2022Q3","display_name":"Quarter","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Quarter to filter by.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Used to pass text to the next component.","icon":"type","base_classes":["Data"],"display_name":"Custom Component","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"data","display_name":"Data","method":"extract_data_between_delimiters","value":"__UNDEFINED__","cache":true}],"field_order":["input_text","quarter","account"],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"id":"CustomComponent-3T4Z5"},"selected":false,"width":320,"height":402,"positionAbsolute":{"x":2954.51612766922,"y":-303.02696073454536},"dragging":false},{"id":"ParseData-vLNQ3","type":"genericNode","position":{"x":3382.5966104609743,"y":-206.45795211100742},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"data","value":"","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sep","value":"\n","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{liability}","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.1.0"},"id":"ParseData-vLNQ3"},"selected":false,"width":320,"height":299,"positionAbsolute":{"x":3382.5966104609743,"y":-206.45795211100742},"dragging":false},{"id":"CustomComponent-c8TxU","type":"genericNode","position":{"x":2948.33729726411,"y":155.71264974276147},"data":{"type":"CustomComponent","node":{"template":{"_type":"Component","account":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"account","value":"","display_name":"Account","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Account to filter by.","title_case":false,"type":"str","_input_type":"MultilineInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import re\r\nimport pandas as pd\r\nfrom langflow.base.io.text import TextComponent\r\nfrom langflow.io import MultilineInput, Output\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass CustomComponent(TextComponent):\r\n    display_name = \"CustomComponent\"\r\n    icon = \"type\"\r\n    name = \"CustomComponent\"\r\n\r\n    inputs = [\r\n        MultilineInput(\r\n            name=\"input_text\",\r\n            display_name=\"Text\",\r\n            info=\"Text to be processed.\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"quarter\",\r\n            display_name=\"Quarter\",\r\n            info=\"Quarter to filter by.\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"account\",\r\n            display_name=\"Account\",\r\n            info=\"Account to filter by.\",\r\n        ),\r\n    ]\r\n    outputs = [\r\n        Output(display_name=\"Data\", name=\"data\", method=\"extract_data_between_delimiters\"),\r\n    ]\r\n    \r\n\r\n    def extract_data_between_delimiters(self) -> Data:\r\n        table_pattern = r\"\\|.*\\|\"\r\n        tables = re.findall(table_pattern, self.input_text)\r\n        \r\n        header_row = tables[0]\r\n        headers = [col.strip() for col in header_row.split('|')[1:-1]]\r\n        \r\n        rows = []\r\n        for row in tables[1:]:\r\n            rows.append([data.strip() for data in row.split('|')[1:-1]])\r\n\r\n        df = pd.DataFrame(rows, columns=headers)\r\n        \r\n        quarters = [q.strip() for q in self.quarter.split(\", \") if q.strip()]\r\n        accounts = [col.strip() for col in self.account.split(\", \") if col.strip()]\r\n        \r\n        columns = ['股東權益'] + [q for q in quarters if q in df.columns]\r\n        \r\n        df = df[columns]\r\n        df = df[df['股東權益'].isin(accounts + ['股東權益總額'])]\r\n        \r\n        self.status = df\r\n        \r\n        return Data(data={\"equity\": df.to_csv(index=False, sep=' ')})\r\n        ","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_text":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_text","value":"","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be processed.","title_case":false,"type":"str","_input_type":"MultilineInput"},"quarter":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"quarter","value":"2022Q3","display_name":"Quarter","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Quarter to filter by.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Used to pass text to the next component.","icon":"type","base_classes":["Data"],"display_name":"Custom Component","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"data","display_name":"Data","method":"extract_data_between_delimiters","value":"__UNDEFINED__","cache":true}],"field_order":["input_text","quarter","account"],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"id":"CustomComponent-c8TxU"},"selected":false,"width":320,"height":402,"positionAbsolute":{"x":2948.33729726411,"y":155.71264974276147},"dragging":false},{"id":"ParseData-Pes1B","type":"genericNode","position":{"x":3369.4958377905114,"y":228.28558538446214},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"data","value":"","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sep","value":"\n","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{equity}","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.1.0"},"id":"ParseData-Pes1B"},"selected":false,"width":320,"height":299,"positionAbsolute":{"x":3369.4958377905114,"y":228.28558538446214},"dragging":false},{"id":"CombineText-p7KDL","type":"genericNode","position":{"x":3833.53640268517,"y":-254.88150275888736},"data":{"node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass CombineTextComponent(Component):\n    display_name = \"Combine Text\"\n    description = \"Concatenate two text sources into a single text chunk using a specified delimiter.\"\n    icon = \"merge\"\n    name = \"CombineText\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"text1\",\n            display_name=\"First Text\",\n            info=\"The first text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"text2\",\n            display_name=\"Second Text\",\n            info=\"The second text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"text3\",\n            display_name=\"Third Text\",\n            info=\"The third text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"text4\",\n            display_name=\"Fourth Text\",\n            info=\"The fourth text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"delimiter1\",\n            display_name=\"First Delimiter\",\n            info=\"A string used to separate the two text inputs. Defaults to a whitespace.\",\n            value=\" \",\n        ),\n        MessageTextInput(\n            name=\"delimiter2\",\n            display_name=\"Second Delimiter\",\n            info=\"A string used to separate the two text inputs. Defaults to a whitespace.\",\n            value=\" \",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Combined Text\", name=\"combined_text\", method=\"combine_texts\"),\n    ]\n\n    def combine_texts(self) -> Message:\n        combined = self.delimiter2.join([self.text2, self.text3, self.text4])\n        combined = self.delimiter1.join([self.text1, combined])\n        self.status = combined\n        return Message(text=combined)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"delimiter1":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"delimiter1","value":" \\n","display_name":"First Delimiter","advanced":false,"input_types":["Message"],"dynamic":false,"info":"A string used to separate the two text inputs. Defaults to a whitespace.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"delimiter2":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"delimiter2","value":" ","display_name":"Second Delimiter","advanced":false,"input_types":["Message"],"dynamic":false,"info":"A string used to separate the two text inputs. Defaults to a whitespace.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"text1":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"text1","value":"","display_name":"First Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The first text input to concatenate.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"text2":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"text2","value":"","display_name":"Second Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The second text input to concatenate.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"text3":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"text3","value":"","display_name":"Third Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The third text input to concatenate.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"text4":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"text4","value":"","display_name":"Fourth Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The fourth text input to concatenate.","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Concatenate two text sources into a single text chunk using a specified delimiter.","icon":"merge","base_classes":["Message"],"display_name":"Combine Text","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"combined_text","display_name":"Combined Text","method":"combine_texts","value":"__UNDEFINED__","cache":true}],"field_order":["text1","text2","text3","text4","delimiter1","delimiter2"],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"type":"CombineText","id":"CombineText-p7KDL"},"selected":false,"width":320,"height":682,"positionAbsolute":{"x":3833.53640268517,"y":-254.88150275888736},"dragging":false},{"id":"ParseData-aoPkR","type":"genericNode","position":{"x":2479.725166624262,"y":-871.1281499845913},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"data","value":"","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sep","value":"\n","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{header}","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.1.0"},"id":"ParseData-aoPkR"},"selected":false,"width":320,"height":299,"positionAbsolute":{"x":2479.725166624262,"y":-871.1281499845913},"dragging":false},{"id":"CombineText-gQqgB","type":"genericNode","position":{"x":542.7894924681318,"y":1170.3739474617068},"data":{"node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass CombineTextComponent(Component):\n    display_name = \"Combine Text\"\n    description = \"Concatenate two text sources into a single text chunk using a specified delimiter.\"\n    icon = \"merge\"\n    name = \"CombineText\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"text1\",\n            display_name=\"First Text\",\n            info=\"The first text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"text2\",\n            display_name=\"Second Text\",\n            info=\"The second text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"has_multiple\",\n            display_name=\"Has Multiple\",\n            info=\"If there are multiple stock code or not.\",\n        ),\n        MessageTextInput(\n            name=\"delimiter\",\n            display_name=\"Delimiter\",\n            info=\"A string used to separate the two text inputs. Defaults to a whitespace.\",\n            value=\" \",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Combined Text\", name=\"combined_text\", method=\"combine_texts\"),\n    ]\n\n    def combine_texts(self) -> Message:\n        if self.has_multiple == \"true\":\n            combined = self.delimiter.join([self.text1, self.text2])\n        else:\n            combined = self.text1\n        self.status = combined\n        return Message(text=combined)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"delimiter":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"delimiter","value":" \\n","display_name":"Delimiter","advanced":false,"input_types":["Message"],"dynamic":false,"info":"A string used to separate the two text inputs. Defaults to a whitespace.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"has_multiple":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"has_multiple","value":"","display_name":"Has Multiple","advanced":false,"input_types":["Message"],"dynamic":false,"info":"If there are multiple stock code or not.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"text1":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"text1","value":"","display_name":"First Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The first text input to concatenate.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"text2":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"text2","value":"","display_name":"Second Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The second text input to concatenate.","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Concatenate two text sources into a single text chunk using a specified delimiter.","icon":"merge","base_classes":["Message"],"display_name":"Combine Text","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"combined_text","display_name":"Combined Text","method":"combine_texts","value":"__UNDEFINED__","cache":true}],"field_order":["text1","text2","has_multiple","delimiter"],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"type":"CombineText","id":"CombineText-gQqgB"},"selected":false,"width":320,"height":510,"positionAbsolute":{"x":542.7894924681318,"y":1170.3739474617068},"dragging":false},{"id":"CombineText-VTwKL","type":"genericNode","position":{"x":3846.475195571888,"y":560.3378295726287},"data":{"node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass CombineTextComponent(Component):\n    display_name = \"Combine Text\"\n    description = \"Concatenate two text sources into a single text chunk using a specified delimiter.\"\n    icon = \"merge\"\n    name = \"CombineText\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"text1\",\n            display_name=\"First Text\",\n            info=\"The first text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"text2\",\n            display_name=\"Second Text\",\n            info=\"The second text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"text3\",\n            display_name=\"Third Text\",\n            info=\"The third text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"text4\",\n            display_name=\"Fourth Text\",\n            info=\"The fourth text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"delimiter1\",\n            display_name=\"First Delimiter\",\n            info=\"A string used to separate the two text inputs. Defaults to a whitespace.\",\n            value=\" \",\n        ),\n        MessageTextInput(\n            name=\"delimiter2\",\n            display_name=\"Second Delimiter\",\n            info=\"A string used to separate the two text inputs. Defaults to a whitespace.\",\n            value=\" \",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Combined Text\", name=\"combined_text\", method=\"combine_texts\"),\n    ]\n\n    def combine_texts(self) -> Message:\n        combined = self.delimiter2.join([self.text2, self.text3, self.text4])\n        combined = self.delimiter1.join([self.text1, combined])\n        self.status = combined\n        return Message(text=combined)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"delimiter1":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"delimiter1","value":" \\n","display_name":"First Delimiter","advanced":false,"input_types":["Message"],"dynamic":false,"info":"A string used to separate the two text inputs. Defaults to a whitespace.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"delimiter2":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"delimiter2","value":" ","display_name":"Second Delimiter","advanced":false,"input_types":["Message"],"dynamic":false,"info":"A string used to separate the two text inputs. Defaults to a whitespace.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"text1":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"text1","value":"","display_name":"First Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The first text input to concatenate.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"text2":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"text2","value":"","display_name":"Second Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The second text input to concatenate.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"text3":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"text3","value":"","display_name":"Third Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The third text input to concatenate.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"text4":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"text4","value":"","display_name":"Fourth Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The fourth text input to concatenate.","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Concatenate two text sources into a single text chunk using a specified delimiter.","icon":"merge","base_classes":["Message"],"display_name":"Combine Text","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"combined_text","display_name":"Combined Text","method":"combine_texts","value":"__UNDEFINED__","cache":true}],"field_order":["text1","text2","text3","text4","delimiter1","delimiter2"],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"type":"CombineText","id":"CombineText-VTwKL"},"selected":false,"width":320,"height":682,"positionAbsolute":{"x":3846.475195571888,"y":560.3378295726287},"dragging":false},{"id":"ParseData-scuFc","type":"genericNode","position":{"x":2469.722704166886,"y":616.2980781725703},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"data","value":"","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sep","value":"\n","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{header}","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.1.0"},"id":"ParseData-scuFc"},"selected":false,"width":320,"height":299,"positionAbsolute":{"x":2469.722704166886,"y":616.2980781725703},"dragging":false},{"id":"ParseData-3e21e","type":"genericNode","position":{"x":2463.3375553842416,"y":984.1490045288972},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"data","value":"","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sep","value":"\n","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{assets}","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.1.0"},"id":"ParseData-3e21e"},"selected":false,"width":320,"height":299,"positionAbsolute":{"x":2463.3375553842416,"y":984.1490045288972},"dragging":false},{"id":"ParseData-qjl5v","type":"genericNode","position":{"x":2462.7643126601192,"y":1378.629899139126},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"data","value":"","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sep","value":"\n","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{liabilities}","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.1.0"},"id":"ParseData-qjl5v"},"selected":false,"width":320,"height":299,"positionAbsolute":{"x":2462.7643126601192,"y":1378.629899139126},"dragging":false},{"id":"ParseData-2lUvF","type":"genericNode","position":{"x":2463.8542196324956,"y":1713.1235046058966},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"data","value":"","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sep","value":"\n","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{equities}","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.1.0"},"id":"ParseData-2lUvF"},"selected":false,"width":320,"height":299,"positionAbsolute":{"x":2463.8542196324956,"y":1713.1235046058966},"dragging":false},{"id":"CustomComponent-r4eL9","type":"genericNode","position":{"x":2963.592580887371,"y":645.6770605840097},"data":{"type":"CustomComponent","node":{"template":{"_type":"Component","account":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"account","value":"","display_name":"Account","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Account to filter by.","title_case":false,"type":"str","_input_type":"MultilineInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import re\r\nimport pandas as pd\r\nfrom langflow.base.io.text import TextComponent\r\nfrom langflow.io import MultilineInput, Output\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass CustomComponent(TextComponent):\r\n    display_name = \"CustomComponent\"\r\n    icon = \"type\"\r\n    name = \"CustomComponent\"\r\n\r\n    inputs = [\r\n        MultilineInput(\r\n            name=\"input_text\",\r\n            display_name=\"Text\",\r\n            info=\"Text to be processed.\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"quarter\",\r\n            display_name=\"Quarter\",\r\n            info=\"Quarter to filter by.\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"account\",\r\n            display_name=\"Account\",\r\n            info=\"Account to filter by.\",\r\n        ),\r\n    ]\r\n    outputs = [\r\n        Output(display_name=\"Data\", name=\"data\", method=\"extract_data_between_delimiters\"),\r\n    ]\r\n    \r\n\r\n    def extract_data_between_delimiters(self) -> Data:\r\n        table_pattern = r\"\\|.*\\|\"\r\n        tables = re.findall(table_pattern, self.input_text)\r\n        \r\n        header_row = tables[0]\r\n        headers = [col.strip() for col in header_row.split('|')[1:-1]]\r\n        \r\n        rows = []\r\n        for row in tables[1:]:\r\n            rows.append([data.strip() for data in row.split('|')[1:-1]])\r\n        \r\n        df = pd.DataFrame(rows, columns=headers)\r\n        \r\n        quarters = [q.strip() for q in self.quarter.split(\", \") if q.strip()]\r\n        accounts = [col.strip() for col in self.account.split(\", \") if col.strip()]\r\n        \r\n        columns = ['資產'] + [q for q in quarters if q in df.columns]\r\n        \r\n        df = df[columns]\r\n        df = df[df['資產'].isin(accounts + ['資產總額'])]\r\n        \r\n        self.status = df\r\n        \r\n        return Data(data={\"asset\": df.to_csv(index=False, sep=' ')})\r\n        ","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_text":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_text","value":"","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be processed.","title_case":false,"type":"str","_input_type":"MultilineInput"},"quarter":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"quarter","value":"","display_name":"Quarter","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Quarter to filter by.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Used to pass text to the next component.","icon":"type","base_classes":["Data"],"display_name":"Custom Component","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"data","display_name":"Data","method":"extract_data_between_delimiters","value":"__UNDEFINED__","cache":true}],"field_order":["input_text","quarter","account"],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"id":"CustomComponent-r4eL9"},"selected":false,"width":320,"height":402,"positionAbsolute":{"x":2963.592580887371,"y":645.6770605840097},"dragging":false},{"id":"ParseData-i9jjp","type":"genericNode","position":{"x":3373.776428926838,"y":727.1595326671084},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"data","value":"","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sep","value":"\n","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{asset}","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.1.0"},"id":"ParseData-i9jjp"},"selected":false,"width":320,"height":299,"positionAbsolute":{"x":3373.776428926838,"y":727.1595326671084},"dragging":false},{"id":"CustomComponent-y8CQ3","type":"genericNode","position":{"x":2964.978324699359,"y":1114.1278363957858},"data":{"type":"CustomComponent","node":{"template":{"_type":"Component","account":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"account","value":"","display_name":"Account","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Account to filter by.","title_case":false,"type":"str","_input_type":"MultilineInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import re\r\nimport pandas as pd\r\nfrom langflow.base.io.text import TextComponent\r\nfrom langflow.io import MultilineInput, Output\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass CustomComponent(TextComponent):\r\n    display_name = \"CustomComponent\"\r\n    icon = \"type\"\r\n    name = \"CustomComponent\"\r\n\r\n    inputs = [\r\n        MultilineInput(\r\n            name=\"input_text\",\r\n            display_name=\"Text\",\r\n            info=\"Text to be processed.\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"quarter\",\r\n            display_name=\"Quarter\",\r\n            info=\"Quarter to filter by.\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"account\",\r\n            display_name=\"Account\",\r\n            info=\"Account to filter by.\",\r\n        ),\r\n    ]\r\n    outputs = [\r\n        Output(display_name=\"Data\", name=\"data\", method=\"extract_data_between_delimiters\"),\r\n    ]\r\n    \r\n\r\n    def extract_data_between_delimiters(self) -> Data:\r\n        table_pattern = r\"\\|.*\\|\"\r\n        tables = re.findall(table_pattern, self.input_text)\r\n        \r\n        header_row = tables[0]\r\n        headers = [col.strip() for col in header_row.split('|')[1:-1]]\r\n        \r\n        rows = []\r\n        for row in tables[1:]:\r\n            rows.append([data.strip() for data in row.split('|')[1:-1]])\r\n        \r\n        df = pd.DataFrame(rows, columns=headers)\r\n        \r\n        quarters = [q.strip() for q in self.quarter.split(\", \") if q.strip()]\r\n        accounts = [col.strip() for col in self.account.split(\", \") if col.strip()]\r\n        \r\n        columns = ['負債'] + [q for q in quarters if q in df.columns]\r\n        \r\n        df = df[columns]\r\n        df = df[df['負債'].isin(accounts + ['負債總額'])]\r\n        \r\n        self.status = df\r\n        \r\n        return Data(data={\"liability\": df.to_csv(index=False, sep=' ')})\r\n        ","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_text":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_text","value":"","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be processed.","title_case":false,"type":"str","_input_type":"MultilineInput"},"quarter":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"quarter","value":"2022Q3","display_name":"Quarter","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Quarter to filter by.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Used to pass text to the next component.","icon":"type","base_classes":["Data"],"display_name":"Custom Component","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"data","display_name":"Data","method":"extract_data_between_delimiters","value":"__UNDEFINED__","cache":true}],"field_order":["input_text","quarter","account"],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"id":"CustomComponent-y8CQ3"},"selected":false,"width":320,"height":402,"positionAbsolute":{"x":2964.978324699359,"y":1114.1278363957858},"dragging":false},{"id":"CustomComponent-xKaEJ","type":"genericNode","position":{"x":2976.752779467507,"y":1592.6076333806714},"data":{"type":"CustomComponent","node":{"template":{"_type":"Component","account":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"account","value":"","display_name":"Account","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Account to filter by.","title_case":false,"type":"str","_input_type":"MultilineInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import re\r\nimport pandas as pd\r\nfrom langflow.base.io.text import TextComponent\r\nfrom langflow.io import MultilineInput, Output\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass CustomComponent(TextComponent):\r\n    display_name = \"CustomComponent\"\r\n    icon = \"type\"\r\n    name = \"CustomComponent\"\r\n\r\n    inputs = [\r\n        MultilineInput(\r\n            name=\"input_text\",\r\n            display_name=\"Text\",\r\n            info=\"Text to be processed.\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"quarter\",\r\n            display_name=\"Quarter\",\r\n            info=\"Quarter to filter by.\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"account\",\r\n            display_name=\"Account\",\r\n            info=\"Account to filter by.\",\r\n        ),\r\n    ]\r\n    outputs = [\r\n        Output(display_name=\"Data\", name=\"data\", method=\"extract_data_between_delimiters\"),\r\n    ]\r\n    \r\n\r\n    def extract_data_between_delimiters(self) -> Data:\r\n        table_pattern = r\"\\|.*\\|\"\r\n        tables = re.findall(table_pattern, self.input_text)\r\n        \r\n        header_row = tables[0]\r\n        headers = [col.strip() for col in header_row.split('|')[1:-1]]\r\n        \r\n        rows = []\r\n        for row in tables[1:]:\r\n            rows.append([data.strip() for data in row.split('|')[1:-1]])\r\n\r\n        df = pd.DataFrame(rows, columns=headers)\r\n        \r\n        quarters = [q.strip() for q in self.quarter.split(\", \") if q.strip()]\r\n        accounts = [col.strip() for col in self.account.split(\", \") if col.strip()]\r\n        \r\n        columns = ['股東權益'] + [q for q in quarters if q in df.columns]\r\n        \r\n        df = df[columns]\r\n        df = df[df['股東權益'].isin(accounts + ['股東權益總額'])]\r\n        \r\n        self.status = df\r\n        \r\n        return Data(data={\"equity\": df.to_csv(index=False, sep=' ')})\r\n        ","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_text":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_text","value":"","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be processed.","title_case":false,"type":"str","_input_type":"MultilineInput"},"quarter":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"quarter","value":"2022Q3","display_name":"Quarter","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Quarter to filter by.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Used to pass text to the next component.","icon":"type","base_classes":["Data"],"display_name":"Custom Component","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"data","display_name":"Data","method":"extract_data_between_delimiters","value":"__UNDEFINED__","cache":true}],"field_order":["input_text","quarter","account"],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"id":"CustomComponent-xKaEJ"},"selected":false,"width":320,"height":402,"positionAbsolute":{"x":2976.752779467507,"y":1592.6076333806714},"dragging":false},{"id":"ParseData-6fUzS","type":"genericNode","position":{"x":3360.92099564651,"y":1125.6543595103933},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"data","value":"","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sep","value":"\n","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{liability}","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.1.0"},"id":"ParseData-6fUzS"},"selected":false,"width":320,"height":299,"positionAbsolute":{"x":3360.92099564651,"y":1125.6543595103933},"dragging":false},{"id":"ParseData-O2WrL","type":"genericNode","position":{"x":3375.7980278959867,"y":1552.046059128082},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"data","value":"","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sep","value":"\n","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{equity}","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.1.0"},"id":"ParseData-O2WrL"},"selected":false,"width":320,"height":299,"positionAbsolute":{"x":3375.7980278959867,"y":1552.046059128082},"dragging":false}],"edges":[{"source":"Prompt-SinL5","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-SinL5œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"CohereModel-zUthU","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œCohereModel-zUthUœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"CohereModel-zUthU","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"Prompt","id":"Prompt-SinL5","name":"prompt","output_types":["Message"]}},"id":"reactflow__edge-Prompt-SinL5{œdataTypeœ:œPromptœ,œidœ:œPrompt-SinL5œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-CohereModel-zUthU{œfieldNameœ:œinput_valueœ,œidœ:œCohereModel-zUthUœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":"","animated":false},{"source":"CohereModel-zUthU","sourceHandle":"{œdataTypeœ:œCohereModelœ,œidœ:œCohereModel-zUthUœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}","target":"ChatOutput-4AW2c","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-4AW2cœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"ChatOutput-4AW2c","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"CohereModel","id":"CohereModel-zUthU","name":"text_output","output_types":["Message"]}},"id":"reactflow__edge-CohereModel-zUthU{œdataTypeœ:œCohereModelœ,œidœ:œCohereModel-zUthUœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-4AW2c{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-4AW2cœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":"","animated":false},{"source":"ChatInput-Wpo58","sourceHandle":"{œdataTypeœ:œChatInputœ,œidœ:œChatInput-Wpo58œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-kpJdw","targetHandle":"{œfieldNameœ:œQuestionœ,œidœ:œPrompt-kpJdwœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"Question","id":"Prompt-kpJdw","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"ChatInput","id":"ChatInput-Wpo58","name":"message","output_types":["Message"]}},"id":"reactflow__edge-ChatInput-Wpo58{œdataTypeœ:œChatInputœ,œidœ:œChatInput-Wpo58œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-kpJdw{œfieldNameœ:œQuestionœ,œidœ:œPrompt-kpJdwœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"Prompt-kpJdw","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-kpJdwœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"CohereModel-qOdbr","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œCohereModel-qOdbrœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"CohereModel-qOdbr","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"Prompt","id":"Prompt-kpJdw","name":"prompt","output_types":["Message"]}},"id":"reactflow__edge-Prompt-kpJdw{œdataTypeœ:œPromptœ,œidœ:œPrompt-kpJdwœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-CohereModel-qOdbr{œfieldNameœ:œinput_valueœ,œidœ:œCohereModel-qOdbrœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"ChatInput-Wpo58","sourceHandle":"{œdataTypeœ:œChatInputœ,œidœ:œChatInput-Wpo58œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-SinL5","targetHandle":"{œfieldNameœ:œQuestionœ,œidœ:œPrompt-SinL5œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"Question","id":"Prompt-SinL5","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"ChatInput","id":"ChatInput-Wpo58","name":"message","output_types":["Message"]}},"id":"reactflow__edge-ChatInput-Wpo58{œdataTypeœ:œChatInputœ,œidœ:œChatInput-Wpo58œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-SinL5{œfieldNameœ:œQuestionœ,œidœ:œPrompt-SinL5œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"CohereModel-qOdbr","sourceHandle":"{œdataTypeœ:œCohereModelœ,œidœ:œCohereModel-qOdbrœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}","target":"DelimitedTextExtractor-0VHcu","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œDelimitedTextExtractor-0VHcuœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"DelimitedTextExtractor-0VHcu","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"CohereModel","id":"CohereModel-qOdbr","name":"text_output","output_types":["Message"]}},"id":"reactflow__edge-CohereModel-qOdbr{œdataTypeœ:œCohereModelœ,œidœ:œCohereModel-qOdbrœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-DelimitedTextExtractor-0VHcu{œfieldNameœ:œinput_valueœ,œidœ:œDelimitedTextExtractor-0VHcuœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"DelimitedTextExtractor-0VHcu","sourceHandle":"{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-0VHcuœ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-xfzt4","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-xfzt4œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-xfzt4","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"DelimitedTextExtractor","id":"DelimitedTextExtractor-0VHcu","name":"extracted_data","output_types":["Data"]}},"id":"reactflow__edge-DelimitedTextExtractor-0VHcu{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-0VHcuœ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-xfzt4{œfieldNameœ:œdataœ,œidœ:œParseData-xfzt4œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"ParseData-xfzt4","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-xfzt4œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"DelimitedTextExtractor-J05mc","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œDelimitedTextExtractor-J05mcœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"DelimitedTextExtractor-J05mc","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-xfzt4","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-xfzt4{œdataTypeœ:œParseDataœ,œidœ:œParseData-xfzt4œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-DelimitedTextExtractor-J05mc{œfieldNameœ:œinput_valueœ,œidœ:œDelimitedTextExtractor-J05mcœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"DelimitedTextExtractor-J05mc","sourceHandle":"{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-J05mcœ,œnameœ:œstock_code_1œ,œoutput_typesœ:[œMessageœ]}","target":"CombineText-PwRs1","targetHandle":"{œfieldNameœ:œtext2œ,œidœ:œCombineText-PwRs1œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"text2","id":"CombineText-PwRs1","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"DelimitedTextExtractor","id":"DelimitedTextExtractor-J05mc","name":"stock_code_1","output_types":["Message"]}},"id":"reactflow__edge-DelimitedTextExtractor-J05mc{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-J05mcœ,œnameœ:œstock_code_1œ,œoutput_typesœ:[œMessageœ]}-CombineText-PwRs1{œfieldNameœ:œtext2œ,œidœ:œCombineText-PwRs1œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"DelimitedTextExtractor-J05mc","sourceHandle":"{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-J05mcœ,œnameœ:œstock_code_2œ,œoutput_typesœ:[œMessageœ]}","target":"CombineText-OYObI","targetHandle":"{œfieldNameœ:œtext2œ,œidœ:œCombineText-OYObIœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"text2","id":"CombineText-OYObI","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"DelimitedTextExtractor","id":"DelimitedTextExtractor-J05mc","name":"stock_code_2","output_types":["Message"]}},"id":"reactflow__edge-DelimitedTextExtractor-J05mc{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-J05mcœ,œnameœ:œstock_code_2œ,œoutput_typesœ:[œMessageœ]}-CombineText-OYObI{œfieldNameœ:œtext2œ,œidœ:œCombineText-OYObIœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"Memory-NJufA","sourceHandle":"{œdataTypeœ:œMemoryœ,œidœ:œMemory-NJufAœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-kpJdw","targetHandle":"{œfieldNameœ:œMemoryœ,œidœ:œPrompt-kpJdwœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"Memory","id":"Prompt-kpJdw","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"Memory","id":"Memory-NJufA","name":"messages_text","output_types":["Message"]}},"id":"reactflow__edge-Memory-NJufA{œdataTypeœ:œMemoryœ,œidœ:œMemory-NJufAœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-kpJdw{œfieldNameœ:œMemoryœ,œidœ:œPrompt-kpJdwœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"Memory-NJufA","sourceHandle":"{œdataTypeœ:œMemoryœ,œidœ:œMemory-NJufAœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-SinL5","targetHandle":"{œfieldNameœ:œMemoryœ,œidœ:œPrompt-SinL5œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"Memory","id":"Prompt-SinL5","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"Memory","id":"Memory-NJufA","name":"messages_text","output_types":["Message"]}},"id":"reactflow__edge-Memory-NJufA{œdataTypeœ:œMemoryœ,œidœ:œMemory-NJufAœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-SinL5{œfieldNameœ:œMemoryœ,œidœ:œPrompt-SinL5œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"FirecrawlScrapeApi-DWyLk","sourceHandle":"{œdataTypeœ:œFirecrawlScrapeApiœ,œidœ:œFirecrawlScrapeApi-DWyLkœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-vwRZJ","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-vwRZJœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-vwRZJ","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"FirecrawlScrapeApi","id":"FirecrawlScrapeApi-DWyLk","name":"data","output_types":["Data"]}},"id":"reactflow__edge-FirecrawlScrapeApi-DWyLk{œdataTypeœ:œFirecrawlScrapeApiœ,œidœ:œFirecrawlScrapeApi-DWyLkœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-vwRZJ{œfieldNameœ:œdataœ,œidœ:œParseData-vwRZJœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"ParseData-4Cxfv","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-4Cxfvœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"DelimitedTextExtractor-17tp7","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œDelimitedTextExtractor-17tp7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"DelimitedTextExtractor-17tp7","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-4Cxfv","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-4Cxfv{œdataTypeœ:œParseDataœ,œidœ:œParseData-4Cxfvœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-DelimitedTextExtractor-17tp7{œfieldNameœ:œinput_valueœ,œidœ:œDelimitedTextExtractor-17tp7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"CombineText-OYObI","sourceHandle":"{œdataTypeœ:œCombineTextœ,œidœ:œCombineText-OYObIœ,œnameœ:œcombined_textœ,œoutput_typesœ:[œMessageœ]}","target":"FirecrawlScrapeApi-DWyLk","targetHandle":"{œfieldNameœ:œurlœ,œidœ:œFirecrawlScrapeApi-DWyLkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"url","id":"FirecrawlScrapeApi-DWyLk","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"CombineText","id":"CombineText-OYObI","name":"combined_text","output_types":["Message"]}},"id":"reactflow__edge-CombineText-OYObI{œdataTypeœ:œCombineTextœ,œidœ:œCombineText-OYObIœ,œnameœ:œcombined_textœ,œoutput_typesœ:[œMessageœ]}-FirecrawlScrapeApi-DWyLk{œfieldNameœ:œurlœ,œidœ:œFirecrawlScrapeApi-DWyLkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":"","selected":false},{"source":"DelimitedTextExtractor-0VHcu","sourceHandle":"{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-0VHcuœ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-gZXqH","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-gZXqHœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-gZXqH","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"DelimitedTextExtractor","id":"DelimitedTextExtractor-0VHcu","name":"extracted_data","output_types":["Data"]}},"id":"reactflow__edge-DelimitedTextExtractor-0VHcu{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-0VHcuœ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-gZXqH{œfieldNameœ:œdataœ,œidœ:œParseData-gZXqHœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"DelimitedTextExtractor-0VHcu","sourceHandle":"{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-0VHcuœ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-3jisH","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-3jisHœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-3jisH","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"DelimitedTextExtractor","id":"DelimitedTextExtractor-0VHcu","name":"extracted_data","output_types":["Data"]}},"id":"reactflow__edge-DelimitedTextExtractor-0VHcu{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-0VHcuœ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-3jisH{œfieldNameœ:œdataœ,œidœ:œParseData-3jisHœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"DelimitedTextExtractor-17tp7","sourceHandle":"{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-17tp7œ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-mSqIU","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-mSqIUœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-mSqIU","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"DelimitedTextExtractor","id":"DelimitedTextExtractor-17tp7","name":"extracted_data","output_types":["Data"]}},"id":"reactflow__edge-DelimitedTextExtractor-17tp7{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-17tp7œ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-mSqIU{œfieldNameœ:œdataœ,œidœ:œParseData-mSqIUœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"ParseData-mSqIU","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-mSqIUœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"DelimitedTextExtractor-EzIiN","targetHandle":"{œfieldNameœ:œinput_textœ,œidœ:œDelimitedTextExtractor-EzIiNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_text","id":"DelimitedTextExtractor-EzIiN","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-mSqIU","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-mSqIU{œdataTypeœ:œParseDataœ,œidœ:œParseData-mSqIUœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-DelimitedTextExtractor-EzIiN{œfieldNameœ:œinput_textœ,œidœ:œDelimitedTextExtractor-EzIiNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"DelimitedTextExtractor-EzIiN","sourceHandle":"{œdataTypeœ:œCustomComponentœ,œidœ:œDelimitedTextExtractor-EzIiNœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-BaGEF","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-BaGEFœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-BaGEF","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"CustomComponent","id":"DelimitedTextExtractor-EzIiN","name":"data","output_types":["Data"]}},"id":"reactflow__edge-DelimitedTextExtractor-EzIiN{œdataTypeœ:œCustomComponentœ,œidœ:œDelimitedTextExtractor-EzIiNœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-BaGEF{œfieldNameœ:œdataœ,œidœ:œParseData-BaGEFœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"CombineText-PwRs1","sourceHandle":"{œdataTypeœ:œCombineTextœ,œidœ:œCombineText-PwRs1œ,œnameœ:œcombined_textœ,œoutput_typesœ:[œMessageœ]}","target":"FirecrawlScrapeApi-souUW","targetHandle":"{œfieldNameœ:œurlœ,œidœ:œFirecrawlScrapeApi-souUWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"url","id":"FirecrawlScrapeApi-souUW","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"CombineText","id":"CombineText-PwRs1","name":"combined_text","output_types":["Message"]}},"id":"reactflow__edge-CombineText-PwRs1{œdataTypeœ:œCombineTextœ,œidœ:œCombineText-PwRs1œ,œnameœ:œcombined_textœ,œoutput_typesœ:[œMessageœ]}-FirecrawlScrapeApi-souUW{œfieldNameœ:œurlœ,œidœ:œFirecrawlScrapeApi-souUWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"FirecrawlScrapeApi-souUW","sourceHandle":"{œdataTypeœ:œFirecrawlScrapeApiœ,œidœ:œFirecrawlScrapeApi-souUWœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-4Cxfv","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-4Cxfvœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-4Cxfv","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"FirecrawlScrapeApi","id":"FirecrawlScrapeApi-souUW","name":"data","output_types":["Data"]}},"id":"reactflow__edge-FirecrawlScrapeApi-souUW{œdataTypeœ:œFirecrawlScrapeApiœ,œidœ:œFirecrawlScrapeApi-souUWœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-4Cxfv{œfieldNameœ:œdataœ,œidœ:œParseData-4Cxfvœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"ParseData-vwRZJ","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-vwRZJœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"DelimitedTextExtractor-GTLSd","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œDelimitedTextExtractor-GTLSdœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"DelimitedTextExtractor-GTLSd","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-vwRZJ","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-vwRZJ{œdataTypeœ:œParseDataœ,œidœ:œParseData-vwRZJœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-DelimitedTextExtractor-GTLSd{œfieldNameœ:œinput_valueœ,œidœ:œDelimitedTextExtractor-GTLSdœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"DelimitedTextExtractor-17tp7","sourceHandle":"{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-17tp7œ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-KOm2l","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-KOm2lœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-KOm2l","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"DelimitedTextExtractor","id":"DelimitedTextExtractor-17tp7","name":"extracted_data","output_types":["Data"]}},"id":"reactflow__edge-DelimitedTextExtractor-17tp7{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-17tp7œ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-KOm2l{œfieldNameœ:œdataœ,œidœ:œParseData-KOm2lœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"DelimitedTextExtractor-17tp7","sourceHandle":"{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-17tp7œ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-oEabT","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-oEabTœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-oEabT","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"DelimitedTextExtractor","id":"DelimitedTextExtractor-17tp7","name":"extracted_data","output_types":["Data"]}},"id":"reactflow__edge-DelimitedTextExtractor-17tp7{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-17tp7œ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-oEabT{œfieldNameœ:œdataœ,œidœ:œParseData-oEabTœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"ParseData-gZXqH","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-gZXqHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"DelimitedTextExtractor-EzIiN","targetHandle":"{œfieldNameœ:œquarterœ,œidœ:œDelimitedTextExtractor-EzIiNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"quarter","id":"DelimitedTextExtractor-EzIiN","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-gZXqH","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-gZXqH{œdataTypeœ:œParseDataœ,œidœ:œParseData-gZXqHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-DelimitedTextExtractor-EzIiN{œfieldNameœ:œquarterœ,œidœ:œDelimitedTextExtractor-EzIiNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"ParseData-KOm2l","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-KOm2lœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CustomComponent-3T4Z5","targetHandle":"{œfieldNameœ:œinput_textœ,œidœ:œCustomComponent-3T4Z5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_text","id":"CustomComponent-3T4Z5","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-KOm2l","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-KOm2l{œdataTypeœ:œParseDataœ,œidœ:œParseData-KOm2lœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-3T4Z5{œfieldNameœ:œinput_textœ,œidœ:œCustomComponent-3T4Z5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"CustomComponent-3T4Z5","sourceHandle":"{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-3T4Z5œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-vLNQ3","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-vLNQ3œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-vLNQ3","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"CustomComponent","id":"CustomComponent-3T4Z5","name":"data","output_types":["Data"]}},"id":"reactflow__edge-CustomComponent-3T4Z5{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-3T4Z5œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-vLNQ3{œfieldNameœ:œdataœ,œidœ:œParseData-vLNQ3œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"ParseData-3jisH","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-3jisHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CustomComponent-3T4Z5","targetHandle":"{œfieldNameœ:œaccountœ,œidœ:œCustomComponent-3T4Z5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"account","id":"CustomComponent-3T4Z5","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-3jisH","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-3jisH{œdataTypeœ:œParseDataœ,œidœ:œParseData-3jisHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-3T4Z5{œfieldNameœ:œaccountœ,œidœ:œCustomComponent-3T4Z5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"ParseData-gZXqH","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-gZXqHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CustomComponent-3T4Z5","targetHandle":"{œfieldNameœ:œquarterœ,œidœ:œCustomComponent-3T4Z5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"quarter","id":"CustomComponent-3T4Z5","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-gZXqH","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-gZXqH{œdataTypeœ:œParseDataœ,œidœ:œParseData-gZXqHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-3T4Z5{œfieldNameœ:œquarterœ,œidœ:œCustomComponent-3T4Z5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"ParseData-oEabT","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-oEabTœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CustomComponent-c8TxU","targetHandle":"{œfieldNameœ:œinput_textœ,œidœ:œCustomComponent-c8TxUœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_text","id":"CustomComponent-c8TxU","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-oEabT","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-oEabT{œdataTypeœ:œParseDataœ,œidœ:œParseData-oEabTœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-c8TxU{œfieldNameœ:œinput_textœ,œidœ:œCustomComponent-c8TxUœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"ParseData-3jisH","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-3jisHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CustomComponent-c8TxU","targetHandle":"{œfieldNameœ:œaccountœ,œidœ:œCustomComponent-c8TxUœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"account","id":"CustomComponent-c8TxU","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-3jisH","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-3jisH{œdataTypeœ:œParseDataœ,œidœ:œParseData-3jisHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-c8TxU{œfieldNameœ:œaccountœ,œidœ:œCustomComponent-c8TxUœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"ParseData-gZXqH","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-gZXqHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CustomComponent-c8TxU","targetHandle":"{œfieldNameœ:œquarterœ,œidœ:œCustomComponent-c8TxUœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"quarter","id":"CustomComponent-c8TxU","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-gZXqH","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-gZXqH{œdataTypeœ:œParseDataœ,œidœ:œParseData-gZXqHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-c8TxU{œfieldNameœ:œquarterœ,œidœ:œCustomComponent-c8TxUœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"CustomComponent-c8TxU","sourceHandle":"{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-c8TxUœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-Pes1B","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-Pes1Bœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-Pes1B","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"CustomComponent","id":"CustomComponent-c8TxU","name":"data","output_types":["Data"]}},"id":"reactflow__edge-CustomComponent-c8TxU{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-c8TxUœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-Pes1B{œfieldNameœ:œdataœ,œidœ:œParseData-Pes1Bœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"DelimitedTextExtractor-17tp7","sourceHandle":"{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-17tp7œ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-aoPkR","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-aoPkRœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-aoPkR","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"DelimitedTextExtractor","id":"DelimitedTextExtractor-17tp7","name":"extracted_data","output_types":["Data"]}},"id":"reactflow__edge-DelimitedTextExtractor-17tp7{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-17tp7œ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-aoPkR{œfieldNameœ:œdataœ,œidœ:œParseData-aoPkRœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"ParseData-aoPkR","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-aoPkRœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CombineText-p7KDL","targetHandle":"{œfieldNameœ:œtext1œ,œidœ:œCombineText-p7KDLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"text1","id":"CombineText-p7KDL","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-aoPkR","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-aoPkR{œdataTypeœ:œParseDataœ,œidœ:œParseData-aoPkRœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CombineText-p7KDL{œfieldNameœ:œtext1œ,œidœ:œCombineText-p7KDLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"ParseData-BaGEF","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-BaGEFœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CombineText-p7KDL","targetHandle":"{œfieldNameœ:œtext2œ,œidœ:œCombineText-p7KDLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"text2","id":"CombineText-p7KDL","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-BaGEF","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-BaGEF{œdataTypeœ:œParseDataœ,œidœ:œParseData-BaGEFœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CombineText-p7KDL{œfieldNameœ:œtext2œ,œidœ:œCombineText-p7KDLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"ParseData-vLNQ3","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-vLNQ3œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CombineText-p7KDL","targetHandle":"{œfieldNameœ:œtext3œ,œidœ:œCombineText-p7KDLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"text3","id":"CombineText-p7KDL","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-vLNQ3","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-vLNQ3{œdataTypeœ:œParseDataœ,œidœ:œParseData-vLNQ3œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CombineText-p7KDL{œfieldNameœ:œtext3œ,œidœ:œCombineText-p7KDLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"ParseData-Pes1B","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-Pes1Bœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CombineText-p7KDL","targetHandle":"{œfieldNameœ:œtext4œ,œidœ:œCombineText-p7KDLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"text4","id":"CombineText-p7KDL","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-Pes1B","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-Pes1B{œdataTypeœ:œParseDataœ,œidœ:œParseData-Pes1Bœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CombineText-p7KDL{œfieldNameœ:œtext4œ,œidœ:œCombineText-p7KDLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"ParseData-3jisH","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-3jisHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"DelimitedTextExtractor-EzIiN","targetHandle":"{œfieldNameœ:œaccountœ,œidœ:œDelimitedTextExtractor-EzIiNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"account","id":"DelimitedTextExtractor-EzIiN","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-3jisH","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-3jisH{œdataTypeœ:œParseDataœ,œidœ:œParseData-3jisHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-DelimitedTextExtractor-EzIiN{œfieldNameœ:œaccountœ,œidœ:œDelimitedTextExtractor-EzIiNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"CombineText-gQqgB","sourceHandle":"{œdataTypeœ:œCombineTextœ,œidœ:œCombineText-gQqgBœ,œnameœ:œcombined_textœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-SinL5","targetHandle":"{œfieldNameœ:œDocumentœ,œidœ:œPrompt-SinL5œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"Document","id":"Prompt-SinL5","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"CombineText","id":"CombineText-gQqgB","name":"combined_text","output_types":["Message"]}},"id":"reactflow__edge-CombineText-gQqgB{œdataTypeœ:œCombineTextœ,œidœ:œCombineText-gQqgBœ,œnameœ:œcombined_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-SinL5{œfieldNameœ:œDocumentœ,œidœ:œPrompt-SinL5œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"CombineText-p7KDL","sourceHandle":"{œdataTypeœ:œCombineTextœ,œidœ:œCombineText-p7KDLœ,œnameœ:œcombined_textœ,œoutput_typesœ:[œMessageœ]}","target":"CombineText-gQqgB","targetHandle":"{œfieldNameœ:œtext1œ,œidœ:œCombineText-gQqgBœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"text1","id":"CombineText-gQqgB","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"CombineText","id":"CombineText-p7KDL","name":"combined_text","output_types":["Message"]}},"id":"reactflow__edge-CombineText-p7KDL{œdataTypeœ:œCombineTextœ,œidœ:œCombineText-p7KDLœ,œnameœ:œcombined_textœ,œoutput_typesœ:[œMessageœ]}-CombineText-gQqgB{œfieldNameœ:œtext1œ,œidœ:œCombineText-gQqgBœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"CombineText-VTwKL","sourceHandle":"{œdataTypeœ:œCombineTextœ,œidœ:œCombineText-VTwKLœ,œnameœ:œcombined_textœ,œoutput_typesœ:[œMessageœ]}","target":"CombineText-gQqgB","targetHandle":"{œfieldNameœ:œtext2œ,œidœ:œCombineText-gQqgBœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"text2","id":"CombineText-gQqgB","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"CombineText","id":"CombineText-VTwKL","name":"combined_text","output_types":["Message"]}},"id":"reactflow__edge-CombineText-VTwKL{œdataTypeœ:œCombineTextœ,œidœ:œCombineText-VTwKLœ,œnameœ:œcombined_textœ,œoutput_typesœ:[œMessageœ]}-CombineText-gQqgB{œfieldNameœ:œtext2œ,œidœ:œCombineText-gQqgBœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"DelimitedTextExtractor-GTLSd","sourceHandle":"{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-GTLSdœ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-scuFc","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-scuFcœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-scuFc","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"DelimitedTextExtractor","id":"DelimitedTextExtractor-GTLSd","name":"extracted_data","output_types":["Data"]}},"id":"reactflow__edge-DelimitedTextExtractor-GTLSd{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-GTLSdœ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-scuFc{œfieldNameœ:œdataœ,œidœ:œParseData-scuFcœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"DelimitedTextExtractor-GTLSd","sourceHandle":"{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-GTLSdœ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-3e21e","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-3e21eœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-3e21e","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"DelimitedTextExtractor","id":"DelimitedTextExtractor-GTLSd","name":"extracted_data","output_types":["Data"]}},"id":"reactflow__edge-DelimitedTextExtractor-GTLSd{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-GTLSdœ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-3e21e{œfieldNameœ:œdataœ,œidœ:œParseData-3e21eœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"DelimitedTextExtractor-GTLSd","sourceHandle":"{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-GTLSdœ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-qjl5v","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-qjl5vœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-qjl5v","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"DelimitedTextExtractor","id":"DelimitedTextExtractor-GTLSd","name":"extracted_data","output_types":["Data"]}},"id":"reactflow__edge-DelimitedTextExtractor-GTLSd{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-GTLSdœ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-qjl5v{œfieldNameœ:œdataœ,œidœ:œParseData-qjl5vœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"DelimitedTextExtractor-GTLSd","sourceHandle":"{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-GTLSdœ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-2lUvF","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-2lUvFœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-2lUvF","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"DelimitedTextExtractor","id":"DelimitedTextExtractor-GTLSd","name":"extracted_data","output_types":["Data"]}},"id":"reactflow__edge-DelimitedTextExtractor-GTLSd{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-GTLSdœ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-2lUvF{œfieldNameœ:œdataœ,œidœ:œParseData-2lUvFœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"ParseData-scuFc","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-scuFcœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CombineText-VTwKL","targetHandle":"{œfieldNameœ:œtext1œ,œidœ:œCombineText-VTwKLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"text1","id":"CombineText-VTwKL","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-scuFc","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-scuFc{œdataTypeœ:œParseDataœ,œidœ:œParseData-scuFcœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CombineText-VTwKL{œfieldNameœ:œtext1œ,œidœ:œCombineText-VTwKLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"ParseData-3e21e","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-3e21eœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CustomComponent-r4eL9","targetHandle":"{œfieldNameœ:œinput_textœ,œidœ:œCustomComponent-r4eL9œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_text","id":"CustomComponent-r4eL9","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-3e21e","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-3e21e{œdataTypeœ:œParseDataœ,œidœ:œParseData-3e21eœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-r4eL9{œfieldNameœ:œinput_textœ,œidœ:œCustomComponent-r4eL9œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"CustomComponent-r4eL9","sourceHandle":"{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-r4eL9œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-i9jjp","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-i9jjpœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-i9jjp","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"CustomComponent","id":"CustomComponent-r4eL9","name":"data","output_types":["Data"]}},"id":"reactflow__edge-CustomComponent-r4eL9{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-r4eL9œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-i9jjp{œfieldNameœ:œdataœ,œidœ:œParseData-i9jjpœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"ParseData-i9jjp","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-i9jjpœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CombineText-VTwKL","targetHandle":"{œfieldNameœ:œtext2œ,œidœ:œCombineText-VTwKLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"text2","id":"CombineText-VTwKL","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-i9jjp","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-i9jjp{œdataTypeœ:œParseDataœ,œidœ:œParseData-i9jjpœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CombineText-VTwKL{œfieldNameœ:œtext2œ,œidœ:œCombineText-VTwKLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"ParseData-qjl5v","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-qjl5vœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CustomComponent-y8CQ3","targetHandle":"{œfieldNameœ:œinput_textœ,œidœ:œCustomComponent-y8CQ3œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_text","id":"CustomComponent-y8CQ3","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-qjl5v","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-qjl5v{œdataTypeœ:œParseDataœ,œidœ:œParseData-qjl5vœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-y8CQ3{œfieldNameœ:œinput_textœ,œidœ:œCustomComponent-y8CQ3œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"ParseData-2lUvF","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-2lUvFœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CustomComponent-xKaEJ","targetHandle":"{œfieldNameœ:œinput_textœ,œidœ:œCustomComponent-xKaEJœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_text","id":"CustomComponent-xKaEJ","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-2lUvF","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-2lUvF{œdataTypeœ:œParseDataœ,œidœ:œParseData-2lUvFœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-xKaEJ{œfieldNameœ:œinput_textœ,œidœ:œCustomComponent-xKaEJœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"CustomComponent-y8CQ3","sourceHandle":"{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-y8CQ3œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-6fUzS","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-6fUzSœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-6fUzS","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"CustomComponent","id":"CustomComponent-y8CQ3","name":"data","output_types":["Data"]}},"id":"reactflow__edge-CustomComponent-y8CQ3{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-y8CQ3œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-6fUzS{œfieldNameœ:œdataœ,œidœ:œParseData-6fUzSœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"ParseData-6fUzS","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-6fUzSœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CombineText-VTwKL","targetHandle":"{œfieldNameœ:œtext3œ,œidœ:œCombineText-VTwKLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"text3","id":"CombineText-VTwKL","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-6fUzS","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-6fUzS{œdataTypeœ:œParseDataœ,œidœ:œParseData-6fUzSœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CombineText-VTwKL{œfieldNameœ:œtext3œ,œidœ:œCombineText-VTwKLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"CustomComponent-xKaEJ","sourceHandle":"{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-xKaEJœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-O2WrL","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-O2WrLœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-O2WrL","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"CustomComponent","id":"CustomComponent-xKaEJ","name":"data","output_types":["Data"]}},"id":"reactflow__edge-CustomComponent-xKaEJ{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-xKaEJœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-O2WrL{œfieldNameœ:œdataœ,œidœ:œParseData-O2WrLœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"ParseData-O2WrL","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-O2WrLœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CombineText-VTwKL","targetHandle":"{œfieldNameœ:œtext4œ,œidœ:œCombineText-VTwKLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"text4","id":"CombineText-VTwKL","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-O2WrL","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-O2WrL{œdataTypeœ:œParseDataœ,œidœ:œParseData-O2WrLœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CombineText-VTwKL{œfieldNameœ:œtext4œ,œidœ:œCombineText-VTwKLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"ParseData-gZXqH","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-gZXqHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CustomComponent-r4eL9","targetHandle":"{œfieldNameœ:œquarterœ,œidœ:œCustomComponent-r4eL9œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"quarter","id":"CustomComponent-r4eL9","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-gZXqH","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-gZXqH{œdataTypeœ:œParseDataœ,œidœ:œParseData-gZXqHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-r4eL9{œfieldNameœ:œquarterœ,œidœ:œCustomComponent-r4eL9œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"ParseData-3jisH","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-3jisHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CustomComponent-r4eL9","targetHandle":"{œfieldNameœ:œaccountœ,œidœ:œCustomComponent-r4eL9œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"account","id":"CustomComponent-r4eL9","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-3jisH","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-3jisH{œdataTypeœ:œParseDataœ,œidœ:œParseData-3jisHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-r4eL9{œfieldNameœ:œaccountœ,œidœ:œCustomComponent-r4eL9œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"ParseData-3jisH","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-3jisHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CustomComponent-xKaEJ","targetHandle":"{œfieldNameœ:œaccountœ,œidœ:œCustomComponent-xKaEJœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"account","id":"CustomComponent-xKaEJ","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-3jisH","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-3jisH{œdataTypeœ:œParseDataœ,œidœ:œParseData-3jisHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-xKaEJ{œfieldNameœ:œaccountœ,œidœ:œCustomComponent-xKaEJœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"ParseData-3jisH","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-3jisHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CustomComponent-y8CQ3","targetHandle":"{œfieldNameœ:œaccountœ,œidœ:œCustomComponent-y8CQ3œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"account","id":"CustomComponent-y8CQ3","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-3jisH","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-3jisH{œdataTypeœ:œParseDataœ,œidœ:œParseData-3jisHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-y8CQ3{œfieldNameœ:œaccountœ,œidœ:œCustomComponent-y8CQ3œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"ParseData-gZXqH","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-gZXqHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CustomComponent-y8CQ3","targetHandle":"{œfieldNameœ:œquarterœ,œidœ:œCustomComponent-y8CQ3œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"quarter","id":"CustomComponent-y8CQ3","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-gZXqH","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-gZXqH{œdataTypeœ:œParseDataœ,œidœ:œParseData-gZXqHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-y8CQ3{œfieldNameœ:œquarterœ,œidœ:œCustomComponent-y8CQ3œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"ParseData-gZXqH","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-gZXqHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CustomComponent-xKaEJ","targetHandle":"{œfieldNameœ:œquarterœ,œidœ:œCustomComponent-xKaEJœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"quarter","id":"CustomComponent-xKaEJ","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-gZXqH","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-gZXqH{œdataTypeœ:œParseDataœ,œidœ:œParseData-gZXqHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-xKaEJ{œfieldNameœ:œquarterœ,œidœ:œCustomComponent-xKaEJœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"DelimitedTextExtractor-J05mc","sourceHandle":"{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-J05mcœ,œnameœ:œhas_multiple_stock_codesœ,œoutput_typesœ:[œMessageœ]}","target":"CombineText-gQqgB","targetHandle":"{œfieldNameœ:œhas_multipleœ,œidœ:œCombineText-gQqgBœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"has_multiple","id":"CombineText-gQqgB","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"DelimitedTextExtractor","id":"DelimitedTextExtractor-J05mc","name":"has_multiple_stock_codes","output_types":["Message"]}},"id":"reactflow__edge-DelimitedTextExtractor-J05mc{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-J05mcœ,œnameœ:œhas_multiple_stock_codesœ,œoutput_typesœ:[œMessageœ]}-CombineText-gQqgB{œfieldNameœ:œhas_multipleœ,œidœ:œCombineText-gQqgBœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""}],"viewport":{"x":26.186743736206353,"y":85.43926010420415,"zoom":0.22280044913215377}},"is_component":false,"updated_at":"2024-11-20T18:52:57+00:00","description":"","icon_bg_color":null,"webhook":false,"icon":null}