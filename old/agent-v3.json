{
  "name": "Financial Statement Analysis Agent v3",
  "webhook": false,
  "icon": null,
  "icon_bg_color": null,
  "endpoint_name": null,
  "folder_id": "e54ca256-9cc3-4af7-b241-7707eb67bb82",
  "gradient": null,
  "id": "9689f78e-91f8-41ab-a85e-dc379aac2bc2",
  "is_component": false,
  "data": {
    "nodes": [
      {
        "data": {
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt",
          "id": "Prompt-s6Zlj",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "你是來自台灣的財務分析師，請根據文件和記憶的內容，用繁體中文和台灣慣用語，回答問題。\n\n文件：{Document}\n\n記憶：{Memory}\n\n以下是我輸入的問題：{Question}\n\n請回覆：\n",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput",
                "load_from_db": false
              },
              "Document": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "Document",
                "display_name": "Document",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "Memory": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "Memory",
                "display_name": "Memory",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "Question": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "Question",
                "display_name": "Question",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "Document",
                "Memory",
                "Question"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "template"
            ],
            "beta": false,
            "error": null,
            "edited": false,
            "lf_version": "1.0.19.post1"
          },
          "type": "Prompt"
        },
        "dragging": false,
        "height": 559,
        "id": "Prompt-s6Zlj",
        "position": {
          "x": 1984.5000795836145,
          "y": 1448.5385744616644
        },
        "positionAbsolute": {
          "x": 1984.5000795836145,
          "y": 1448.5385744616644
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "description": "Get chat inputs from the Playground.",
          "display_name": "Chat Input",
          "id": "ChatInput-rrsJV",
          "node": {
            "template": {
              "_type": "Component",
              "files": {
                "trace_as_metadata": true,
                "file_path": "",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "files",
                "value": "",
                "display_name": "Files",
                "advanced": true,
                "dynamic": false,
                "info": "Files to be sent with the message.",
                "title_case": false,
                "type": "file",
                "_input_type": "FileInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_USER, MESSAGE_SENDER_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "請簡單分析台積電在過去一年資產總額的變化",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "User",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "User",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "should_store_message",
                "value": true,
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Get chat inputs from the Playground.",
            "icon": "ChatInput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Input",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files"
            ],
            "beta": false,
            "edited": false,
            "metadata": {},
            "lf_version": "1.0.19.post1"
          },
          "type": "ChatInput"
        },
        "dragging": false,
        "height": 287,
        "id": "ChatInput-rrsJV",
        "position": {
          "x": -553.8626736481248,
          "y": 949.336033986355
        },
        "positionAbsolute": {
          "x": -553.8626736481248,
          "y": 949.336033986355
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "id": "ChatOutput-mOPSW",
        "type": "genericNode",
        "position": {
          "x": 2924.5390746830353,
          "y": 1683.8443825974678
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data_template",
                "value": "{text}",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "AI",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "should_store_message",
                "value": true,
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.19.post1"
          },
          "id": "ChatOutput-mOPSW",
          "description": "Display a chat message in the Playground.",
          "display_name": "Chat Output"
        },
        "selected": false,
        "width": 384,
        "height": 287,
        "positionAbsolute": {
          "x": 2924.5390746830353,
          "y": 1683.8443825974678
        },
        "dragging": false
      },
      {
        "id": "CohereModel-R8V9S",
        "type": "genericNode",
        "position": {
          "x": 2447.8426896754877,
          "y": 1489.0114206681158
        },
        "data": {
          "type": "CohereModel",
          "node": {
            "template": {
              "_type": "Component",
              "output_parser": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "output_parser",
                "value": "",
                "display_name": "Output Parser",
                "advanced": true,
                "input_types": [
                  "OutputParser"
                ],
                "dynamic": false,
                "info": "The parser to use to parse the output of the model",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_cohere import ChatCohere\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import FloatInput, SecretStrInput\n\n\nclass CohereComponent(LCModelComponent):\n    display_name = \"Cohere\"\n    description = \"Generate text using Cohere LLMs.\"\n    documentation = \"https://python.langchain.com/docs/modules/model_io/models/llms/integrations/cohere\"\n    icon = \"Cohere\"\n    name = \"CohereModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        SecretStrInput(\n            name=\"cohere_api_key\",\n            display_name=\"Cohere API Key\",\n            info=\"The Cohere API Key to use for the Cohere model.\",\n            advanced=False,\n            value=\"COHERE_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.75),\n        HandleInput(\n            name=\"output_parser\",\n            display_name=\"Output Parser\",\n            info=\"The parser to use to parse the output of the model\",\n            advanced=True,\n            input_types=[\"OutputParser\"],\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        cohere_api_key = self.cohere_api_key\n        temperature = self.temperature\n\n        api_key = SecretStr(cohere_api_key) if cohere_api_key else None\n\n        return ChatCohere(\n            temperature=temperature or 0.75,\n            cohere_api_key=api_key,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "cohere_api_key": {
                "load_from_db": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "cohere_api_key",
                "value": null,
                "display_name": "Cohere API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The Cohere API Key to use for the Cohere model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "",
                "display_name": "System Message",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": "0",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput",
                "load_from_db": false
              }
            },
            "description": "Generate text using Cohere LLMs.",
            "icon": "Cohere",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "Cohere",
            "documentation": "https://python.langchain.com/docs/modules/model_io/models/llms/integrations/cohere",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "input_value",
                  "stream",
                  "system_message"
                ]
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "cohere_api_key",
                  "temperature"
                ]
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "cohere_api_key",
              "temperature",
              "output_parser"
            ],
            "beta": false,
            "edited": false,
            "metadata": {},
            "lf_version": "1.0.19.post1"
          },
          "id": "CohereModel-R8V9S",
          "description": "Generate text using Cohere LLMs.",
          "display_name": "Cohere"
        },
        "selected": false,
        "width": 384,
        "height": 498,
        "positionAbsolute": {
          "x": 2447.8426896754877,
          "y": 1489.0114206681158
        },
        "dragging": false
      },
      {
        "id": "CohereEmbeddings-lGQfz",
        "type": "genericNode",
        "position": {
          "x": 5.557104927038836,
          "y": 1676.1209058880627
        },
        "data": {
          "type": "CohereEmbeddings",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_community.embeddings.cohere import CohereEmbeddings\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import Embeddings\nfrom langflow.io import DropdownInput, FloatInput, IntInput, MessageTextInput, Output, SecretStrInput\n\n\nclass CohereEmbeddingsComponent(LCModelComponent):\n    display_name = \"Cohere Embeddings\"\n    description = \"Generate embeddings using Cohere models.\"\n    icon = \"Cohere\"\n    name = \"CohereEmbeddings\"\n\n    inputs = [\n        SecretStrInput(name=\"cohere_api_key\", display_name=\"Cohere API Key\"),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=True,\n            options=[\n                \"embed-english-v2.0\",\n                \"embed-multilingual-v2.0\",\n                \"embed-english-light-v2.0\",\n                \"embed-multilingual-light-v2.0\",\n            ],\n            value=\"embed-english-v2.0\",\n        ),\n        MessageTextInput(name=\"truncate\", display_name=\"Truncate\", advanced=True),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        MessageTextInput(name=\"user_agent\", display_name=\"User Agent\", advanced=True, value=\"langchain\"),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return CohereEmbeddings(\n            cohere_api_key=self.cohere_api_key,\n            model=self.model,\n            truncate=self.truncate,\n            max_retries=self.max_retries,\n            user_agent=self.user_agent,\n            request_timeout=self.request_timeout or None,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "cohere_api_key": {
                "load_from_db": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "cohere_api_key",
                "value": null,
                "display_name": "Cohere API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "max_retries": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 3,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model": {
                "trace_as_metadata": true,
                "options": [
                  "embed-english-v2.0",
                  "embed-multilingual-v2.0",
                  "embed-english-light-v2.0",
                  "embed-multilingual-light-v2.0"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model",
                "value": "embed-english-v2.0",
                "display_name": "Model",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "request_timeout": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "request_timeout",
                "value": "",
                "display_name": "Request Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "truncate": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "truncate",
                "value": "",
                "display_name": "Truncate",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "user_agent": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "user_agent",
                "value": "langchain",
                "display_name": "User Agent",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Generate embeddings using Cohere models.",
            "icon": "Cohere",
            "base_classes": [
              "Embeddings"
            ],
            "display_name": "Cohere Embeddings",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Embeddings"
                ],
                "selected": "Embeddings",
                "name": "embeddings",
                "display_name": "Embeddings",
                "method": "build_embeddings",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "cohere_api_key",
              "model",
              "truncate",
              "max_retries",
              "user_agent",
              "request_timeout"
            ],
            "beta": false,
            "edited": false,
            "metadata": {},
            "lf_version": "1.0.19.post1"
          },
          "id": "CohereEmbeddings-lGQfz",
          "description": "Generate embeddings using Cohere models.",
          "display_name": "Cohere Embeddings"
        },
        "selected": false,
        "width": 384,
        "height": 287,
        "positionAbsolute": {
          "x": 5.557104927038836,
          "y": 1676.1209058880627
        },
        "dragging": false
      },
      {
        "id": "ParseData-4QWPC",
        "type": "genericNode",
        "position": {
          "x": 1494.0146154166578,
          "y": 1545.9913595587639
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_metadata": true,
                "list": false,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{text}",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false,
            "metadata": {},
            "lf_version": "1.0.19.post1"
          },
          "id": "ParseData-4QWPC",
          "description": "Convert Data into plain text following a specified template.",
          "display_name": "Parse Data"
        },
        "selected": false,
        "width": 384,
        "height": 351,
        "positionAbsolute": {
          "x": 1494.0146154166578,
          "y": 1545.9913595587639
        },
        "dragging": false
      },
      {
        "id": "Chroma-0KSZF",
        "type": "genericNode",
        "position": {
          "x": 993.7505434606103,
          "y": 1367.3502454948618
        },
        "data": {
          "type": "Chroma",
          "node": {
            "template": {
              "_type": "Component",
              "embedding": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "embedding",
                "value": "",
                "display_name": "Embedding",
                "advanced": false,
                "input_types": [
                  "Embeddings"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "ingest_data": {
                "trace_as_metadata": true,
                "list": true,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ingest_data",
                "value": "",
                "display_name": "Ingest Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "allow_duplicates": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "allow_duplicates",
                "value": false,
                "display_name": "Allow Duplicates",
                "advanced": true,
                "dynamic": false,
                "info": "If false, will not add documents that are already in the Vector Store.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "chroma_server_cors_allow_origins": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chroma_server_cors_allow_origins",
                "value": "",
                "display_name": "Server CORS Allow Origins",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "chroma_server_grpc_port": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chroma_server_grpc_port",
                "value": "",
                "display_name": "Server gRPC Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "chroma_server_host": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chroma_server_host",
                "value": "",
                "display_name": "Server Host",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "chroma_server_http_port": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chroma_server_http_port",
                "value": "",
                "display_name": "Server HTTP Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "chroma_server_ssl_enabled": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chroma_server_ssl_enabled",
                "value": false,
                "display_name": "Server SSL Enabled",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from copy import deepcopy\n\nfrom chromadb.config import Settings\nfrom langchain_chroma import Chroma\nfrom loguru import logger\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom langflow.base.vectorstores.utils import chroma_collection_to_data\nfrom langflow.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, MultilineInput, StrInput\nfrom langflow.schema import Data\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"langflow\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError as e:\n            msg = \"Could not import Chroma integration package. Please install it with `pip install langchain-chroma`.\"\n            raise ImportError(msg) from e\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        persist_directory = self.resolve_path(self.persist_directory) if self.persist_directory is not None else None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(limit=self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                msg = \"Vector Store Inputs must be Data objects.\"\n                raise TypeError(msg)\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "collection_name": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "collection_name",
                "value": "chat",
                "display_name": "Collection Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "limit": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "limit",
                "value": "",
                "display_name": "Limit",
                "advanced": true,
                "dynamic": false,
                "info": "Limit the number of records to compare when Allow Duplicates is False.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "number_of_results": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_results",
                "value": 10,
                "display_name": "Number of Results",
                "advanced": true,
                "dynamic": false,
                "info": "Number of results to return.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "persist_directory": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "persist_directory",
                "value": "chroma_db",
                "display_name": "Persist Directory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "search_query": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "search_query",
                "value": "",
                "display_name": "Search Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "search_type": {
                "trace_as_metadata": true,
                "options": [
                  "Similarity",
                  "MMR"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "search_type",
                "value": "Similarity",
                "display_name": "Search Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              }
            },
            "description": "Chroma Vector Store with search capabilities",
            "icon": "Chroma",
            "base_classes": [
              "Data",
              "Retriever",
              "VectorStore"
            ],
            "display_name": "Chroma DB",
            "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Retriever"
                ],
                "selected": "Retriever",
                "name": "base_retriever",
                "display_name": "Retriever",
                "method": "build_base_retriever",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": []
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "search_results",
                "display_name": "Search Results",
                "method": "search_documents",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "number_of_results",
                  "search_query",
                  "search_type"
                ]
              },
              {
                "types": [
                  "VectorStore"
                ],
                "selected": "VectorStore",
                "name": "vector_store",
                "display_name": "Vector Store",
                "method": "cast_vector_store",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": []
              }
            ],
            "field_order": [
              "collection_name",
              "persist_directory",
              "search_query",
              "ingest_data",
              "embedding",
              "chroma_server_cors_allow_origins",
              "chroma_server_host",
              "chroma_server_http_port",
              "chroma_server_grpc_port",
              "chroma_server_ssl_enabled",
              "allow_duplicates",
              "search_type",
              "number_of_results",
              "limit"
            ],
            "beta": false,
            "edited": false,
            "metadata": {},
            "lf_version": "1.0.19.post1"
          },
          "id": "Chroma-0KSZF",
          "description": "Chroma Vector Store with search capabilities",
          "display_name": "Chroma DB"
        },
        "selected": false,
        "width": 384,
        "height": 634,
        "positionAbsolute": {
          "x": 993.7505434606103,
          "y": 1367.3502454948618
        },
        "dragging": false
      },
      {
        "id": "Prompt-Jv8XZ",
        "type": "genericNode",
        "position": {
          "x": 1.8247324057540482,
          "y": -166.13406424609377
        },
        "data": {
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt",
          "id": "Prompt-Jv8XZ",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "你是來自台灣的財務分析師，請從我輸入的問題及記憶中，分析出接下來的具體步驟。\n1. 得知我想要查詢的公司，並告訴我那家公司的股票代碼是多少，只簡短的回答我數字就好，例如：2330。如果有多家公司則以 \", \" 隔開，例如：2330, 2317。\n2. 得知我想要查詢的季度，例如：2024Q2。如果有多個季度則以 \", \" 隔開，例如：2024Q1, 2023Q1。\n3. 得知我想要查詢的欄目，例如：存貨。如果有多個欄目則以 \", \" 隔開，例如：存貨, 應付帳款。\n\n記憶：{Memory}\n\n以下是我輸入的問題：{Question}\n\n請依照以下格式回覆：\n1. 股票代碼：\n2. 查詢季度：\n3. 查詢欄目：",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput",
                "load_from_db": false
              },
              "Question": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "Question",
                "display_name": "Question",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "Memory": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "Memory",
                "display_name": "Memory",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "Memory",
                "Question"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null
              }
            ],
            "field_order": [
              "template"
            ],
            "beta": false,
            "error": null,
            "edited": false,
            "metadata": {},
            "lf_version": "1.0.19.post1"
          },
          "type": "Prompt"
        },
        "selected": false,
        "width": 384,
        "height": 474,
        "positionAbsolute": {
          "x": 1.8247324057540482,
          "y": -166.13406424609377
        },
        "dragging": false
      },
      {
        "id": "CohereModel-Am2PJ",
        "type": "genericNode",
        "position": {
          "x": 485.34248262724464,
          "y": -232.1068125231028
        },
        "data": {
          "type": "CohereModel",
          "node": {
            "template": {
              "_type": "Component",
              "output_parser": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "output_parser",
                "value": "",
                "display_name": "Output Parser",
                "advanced": true,
                "input_types": [
                  "OutputParser"
                ],
                "dynamic": false,
                "info": "The parser to use to parse the output of the model",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_cohere import ChatCohere\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import FloatInput, SecretStrInput\n\n\nclass CohereComponent(LCModelComponent):\n    display_name = \"Cohere\"\n    description = \"Generate text using Cohere LLMs.\"\n    documentation = \"https://python.langchain.com/docs/modules/model_io/models/llms/integrations/cohere\"\n    icon = \"Cohere\"\n    name = \"CohereModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        SecretStrInput(\n            name=\"cohere_api_key\",\n            display_name=\"Cohere API Key\",\n            info=\"The Cohere API Key to use for the Cohere model.\",\n            advanced=False,\n            value=\"COHERE_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.75),\n        HandleInput(\n            name=\"output_parser\",\n            display_name=\"Output Parser\",\n            info=\"The parser to use to parse the output of the model\",\n            advanced=True,\n            input_types=[\"OutputParser\"],\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        cohere_api_key = self.cohere_api_key\n        temperature = self.temperature\n\n        api_key = SecretStr(cohere_api_key) if cohere_api_key else None\n\n        return ChatCohere(\n            temperature=temperature or 0.75,\n            cohere_api_key=api_key,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "cohere_api_key": {
                "load_from_db": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "cohere_api_key",
                "value": null,
                "display_name": "Cohere API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The Cohere API Key to use for the Cohere model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "",
                "display_name": "System Message",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": "0",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput",
                "load_from_db": false
              }
            },
            "description": "Generate text using Cohere LLMs.",
            "icon": "Cohere",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "Cohere",
            "documentation": "https://python.langchain.com/docs/modules/model_io/models/llms/integrations/cohere",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "input_value",
                  "stream",
                  "system_message"
                ]
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "cohere_api_key",
                  "temperature"
                ]
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "cohere_api_key",
              "temperature",
              "output_parser"
            ],
            "beta": false,
            "edited": false,
            "metadata": {},
            "lf_version": "1.0.19.post1"
          },
          "id": "CohereModel-Am2PJ",
          "description": "Generate text using Cohere LLMs.",
          "display_name": "Cohere"
        },
        "selected": false,
        "width": 384,
        "height": 498,
        "positionAbsolute": {
          "x": 485.34248262724464,
          "y": -232.1068125231028
        },
        "dragging": false
      },
      {
        "id": "DelimitedTextExtractor-mYFq8",
        "type": "genericNode",
        "position": {
          "x": 964.110254806285,
          "y": -212.70150040336227
        },
        "data": {
          "type": "DelimitedTextExtractor",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import re\r\nfrom langflow.base.io.text import TextComponent\r\nfrom langflow.io import MultilineInput, Output\r\nfrom langflow.schema import Data\r\n\r\nclass DelimitedTextExtractor(TextComponent):\r\n    display_name = \"Delimited Text Extractor\"\r\n    description = \"Extract specific data from the text.\"\r\n    icon = \"type\"\r\n    name = \"DelimitedTextExtractor\"\r\n\r\n    inputs = [\r\n        MultilineInput(\r\n            name=\"input_value\",\r\n            display_name=\"Text\",\r\n            info=\"Text to be processed.\",\r\n        ),\r\n    ]\r\n    outputs = [\r\n        Output(display_name=\"Extracted Data\", name=\"extracted_data\", method=\"extract_data_between_delimiters\"),\r\n    ]\r\n\r\n    def extract_data_between_delimiters(self) -> Data:\r\n        # Regular expressions to capture the required data\r\n        stock_code_pattern = r\"股票代碼：(.+)\"\r\n        quarter_pattern = r\"查詢季度：(.+)\"\r\n        column_pattern = r\"查詢欄目：(.+)\"\r\n\r\n        # Extracting the stock code\r\n        stock_code_match = re.search(stock_code_pattern, self.input_value)\r\n        stock_code = stock_code_match.group(1) if stock_code_match else \"Not found\"\r\n\r\n        # Extracting the query quarter\r\n        quarter_match = re.search(quarter_pattern, self.input_value)\r\n        quarter = quarter_match.group(1) if quarter_match else \"Not found\"\r\n\r\n        # Extracting the query column\r\n        column_match = re.search(column_pattern, self.input_value)\r\n        column = column_match.group(1) if column_match else \"Not found\"\r\n\r\n        # Constructing the output data\r\n        extracted_data = Data(data={\r\n            \"stock_code\": stock_code,\r\n            \"quarter\": quarter,\r\n            \"column\": column,\r\n        })\r\n\r\n        self.status = extracted_data\r\n        return extracted_data\r\n\r\n# import re\r\n# from langflow.base.io.text import TextComponent\r\n# from langflow.io import MultilineInput, Output\r\n# from langflow.schema import Data\r\n\r\n# class DelimitedTextExtractor(TextComponent):\r\n#     display_name = \"Delimited Text Extractor\"\r\n#     description = \"Extract specific data from the text.\"\r\n#     icon = \"type\"\r\n#     name = \"DelimitedTextExtractor\"\r\n\r\n#     inputs = [\r\n#         MultilineInput(\r\n#             name=\"input_value\",\r\n#             display_name=\"Text\",\r\n#             info=\"Text to be processed.\",\r\n#         ),\r\n#     ]\r\n#     outputs = [\r\n#         Output(display_name=\"Extracted Data\", name=\"extracted_data\", method=\"extract_data_between_delimiters\"),\r\n#     ]\r\n\r\n#     def extract_data_between_delimiters(self) -> list[Data]:\r\n#         # Regular expressions to capture the required data\r\n#         stock_code_pattern = r\"股票代碼：(.+)\"\r\n#         quarter_pattern = r\"查詢季度：(.+)\"\r\n#         column_pattern = r\"查詢欄目：(.+)\"\r\n\r\n#         # Extracting the stock codes\r\n#         stock_code_match = re.search(stock_code_pattern, self.input_value)\r\n#         stock_codes = stock_code_match.group(1).split(\", \") if stock_code_match else [\"Not found\"]\r\n\r\n#         # Extracting the query quarters\r\n#         quarter_match = re.search(quarter_pattern, self.input_value)\r\n#         quarters = quarter_match.group(1).split(\", \") if quarter_match else [\"Not found\"]\r\n\r\n#         # Extracting the query columns\r\n#         column_match = re.search(column_pattern, self.input_value)\r\n#         columns = column_match.group(1).split(\", \") if column_match else [\"Not found\"]\r\n\r\n#         # Determine the maximum length among the lists\r\n#         max_length = max(len(stock_codes), len(quarters), len(columns))\r\n\r\n#         # Pad the lists to the maximum length with \"Not found\"\r\n#         stock_codes.extend([\"Not found\"] * (max_length - len(stock_codes)))\r\n#         quarters.extend([\"Not found\"] * (max_length - len(quarters)))\r\n#         columns.extend([\"Not found\"] * (max_length - len(columns)))\r\n\r\n#         # Constructing the output data list\r\n#         extracted_data_list = []\r\n#         for i in range(max_length):\r\n#             extracted_data = Data(data={\r\n#                 \"stock_code\": stock_codes[i].strip(),\r\n#                 \"quarter\": quarters[i].strip(),\r\n#                 \"column\": columns[i].strip(),\r\n#             })\r\n#             extracted_data_list.append(extracted_data)\r\n\r\n#         self.status = extracted_data_list\r\n#         return extracted_data_list\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be processed.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Extract specific data from the text.",
            "icon": "type",
            "base_classes": [
              "Data"
            ],
            "display_name": "Custom Component",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "extracted_data",
                "display_name": "Extracted Data",
                "method": "extract_data_between_delimiters",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "edited": true,
            "metadata": {},
            "lf_version": "1.0.19.post1"
          },
          "id": "DelimitedTextExtractor-mYFq8"
        },
        "selected": false,
        "width": 384,
        "height": 287,
        "positionAbsolute": {
          "x": 964.110254806285,
          "y": -212.70150040336227
        },
        "dragging": false
      },
      {
        "id": "ParseData-rz2TU",
        "type": "genericNode",
        "position": {
          "x": 1487.8959824197955,
          "y": -286.51368305513586
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_metadata": true,
                "list": false,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{stock_code}",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false,
            "metadata": {},
            "lf_version": "1.0.19.post1"
          },
          "id": "ParseData-rz2TU"
        },
        "selected": false,
        "width": 384,
        "height": 351,
        "positionAbsolute": {
          "x": 1487.8959824197955,
          "y": -286.51368305513586
        },
        "dragging": false
      },
      {
        "id": "CombineText-Q77hJ",
        "type": "genericNode",
        "position": {
          "x": 519.4339501718437,
          "y": 310.6690593761962
        },
        "data": {
          "type": "CombineText",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass CombineTextComponent(Component):\n    display_name = \"Combine Text\"\n    description = \"Concatenate two text sources into a single text chunk using a specified delimiter.\"\n    icon = \"merge\"\n    name = \"CombineText\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"text1\",\n            display_name=\"First Text\",\n            info=\"The first text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"text2\",\n            display_name=\"Second Text\",\n            info=\"The second text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"delimiter\",\n            display_name=\"Delimiter\",\n            info=\"A string used to separate the two text inputs.\",\n            value=\" \",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Combined Text\", name=\"combined_text\", method=\"combine_texts\"),\n    ]\n\n    def combine_texts(self) -> str:\n        delimiter = self.delimiter if self.delimiter is not None else \"\"\n        combined = delimiter.join([self.text1, self.text2])\n        self.status = combined\n        return combined\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "delimiter": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "delimiter",
                "value": "",
                "display_name": "Delimiter",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "A string used to separate the two text inputs.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "text1": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text1",
                "value": "https://goodinfo.tw/tw/StockFinDetail.asp?RPT_CAT=BS_M_QUAR&STOCK_ID=",
                "display_name": "First Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The first text input to concatenate.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "text2": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text2",
                "value": "",
                "display_name": "Second Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The second text input to concatenate.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Concatenate two text sources into a single text chunk using a specified delimiter.",
            "icon": "merge",
            "base_classes": [
              "Text"
            ],
            "display_name": "Combine Text",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Text"
                ],
                "selected": "Text",
                "name": "combined_text",
                "display_name": "Combined Text",
                "method": "combine_texts",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "text1",
              "text2",
              "delimiter"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.19.post1"
          },
          "id": "CombineText-Q77hJ"
        },
        "selected": false,
        "width": 384,
        "height": 474,
        "positionAbsolute": {
          "x": 519.4339501718437,
          "y": 310.6690593761962
        },
        "dragging": false
      },
      {
        "id": "FirecrawlScrapeApi-bHQxg",
        "type": "genericNode",
        "position": {
          "x": 1004.2461044773781,
          "y": 196.03534132497543
        },
        "data": {
          "type": "FirecrawlScrapeApi",
          "node": {
            "template": {
              "_type": "CustomComponent",
              "extractorOptions": {
                "type": "Data | None",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "name": "extractorOptions",
                "display_name": "Extractor Options",
                "advanced": false,
                "dynamic": false,
                "info": "The extractor options to send with the request.",
                "load_from_db": false,
                "title_case": false
              },
              "pageOptions": {
                "type": "Data | None",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "name": "pageOptions",
                "display_name": "Page Options",
                "advanced": false,
                "dynamic": false,
                "info": "The page options to send with the request.",
                "load_from_db": false,
                "title_case": false
              },
              "api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "api_key",
                "display_name": "API Key",
                "advanced": false,
                "dynamic": false,
                "info": "The API key to use Firecrawl API.",
                "load_from_db": true,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": null
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import CustomComponent\nfrom langflow.schema import Data\n\n\nclass FirecrawlScrapeApi(CustomComponent):\n    display_name: str = \"FirecrawlScrapeApi\"\n    description: str = \"Firecrawl Scrape API.\"\n    name = \"FirecrawlScrapeApi\"\n\n    output_types: list[str] = [\"Document\"]\n    documentation: str = \"https://docs.firecrawl.dev/api-reference/endpoint/scrape\"\n    field_config = {\n        \"api_key\": {\n            \"display_name\": \"API Key\",\n            \"field_type\": \"str\",\n            \"required\": True,\n            \"password\": True,\n            \"info\": \"The API key to use Firecrawl API.\",\n        },\n        \"url\": {\n            \"display_name\": \"URL\",\n            \"field_type\": \"str\",\n            \"required\": True,\n            \"info\": \"The URL to scrape.\",\n        },\n        \"timeout\": {\n            \"display_name\": \"Timeout\",\n            \"info\": \"Timeout in milliseconds for the request.\",\n            \"field_type\": \"int\",\n            \"default_value\": 10000,\n        },\n        \"pageOptions\": {\n            \"display_name\": \"Page Options\",\n            \"info\": \"The page options to send with the request.\",\n        },\n        \"extractorOptions\": {\n            \"display_name\": \"Extractor Options\",\n            \"info\": \"The extractor options to send with the request.\",\n        },\n    }\n\n    def build(\n        self,\n        api_key: str,\n        url: str,\n        timeout: int = 10000,\n        pageOptions: Data | None = None,\n        extractorOptions: Data | None = None,\n    ) -> Data:\n        try:\n            from firecrawl.firecrawl import FirecrawlApp\n        except ImportError as e:\n            msg = \"Could not import firecrawl integration package. Please install it with `pip install firecrawl-py`.\"\n            raise ImportError(msg) from e\n        extractor_options_dict = extractorOptions.__dict__[\"data\"][\"text\"] if extractorOptions else {}\n\n        page_options_dict = pageOptions.__dict__[\"data\"][\"text\"] if pageOptions else {}\n\n        app = FirecrawlApp(api_key=api_key)\n        results = app.scrape_url(\n            url,\n            {\n                \"timeout\": str(timeout),\n                \"extractorOptions\": extractor_options_dict,\n                \"pageOptions\": page_options_dict,\n            },\n        )\n\n        return Data(data=results)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "timeout": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 10000,
                "fileTypes": [],
                "file_path": "",
                "name": "timeout",
                "display_name": "Timeout",
                "advanced": false,
                "dynamic": false,
                "info": "Timeout in milliseconds for the request.",
                "load_from_db": false,
                "title_case": false
              },
              "url": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "name": "url",
                "display_name": "URL",
                "advanced": false,
                "dynamic": false,
                "info": "The URL to scrape.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              }
            },
            "description": "Firecrawl Scrape API.",
            "base_classes": [
              "Data"
            ],
            "display_name": "FirecrawlScrapeApi",
            "documentation": "https://docs.firecrawl.dev/api-reference/endpoint/scrape",
            "custom_fields": {
              "api_key": null,
              "url": null,
              "timeout": null,
              "pageOptions": null,
              "extractorOptions": null
            },
            "output_types": [
              "Data"
            ],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "hidden": null,
                "display_name": "Data",
                "method": null,
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null
              }
            ],
            "field_order": [
              "api_key",
              "url",
              "timeout",
              "pageOptions",
              "extractorOptions"
            ],
            "beta": false,
            "edited": false,
            "metadata": {}
          },
          "id": "FirecrawlScrapeApi-bHQxg",
          "description": "Firecrawl Scrape API.",
          "display_name": "FirecrawlScrapeApi"
        },
        "selected": false,
        "width": 384,
        "height": 550,
        "positionAbsolute": {
          "x": 1004.2461044773781,
          "y": 196.03534132497543
        },
        "dragging": false
      },
      {
        "id": "ParseData-h5NeX",
        "type": "genericNode",
        "position": {
          "x": 1498.1861601282399,
          "y": 424.97921557077257
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_metadata": true,
                "list": false,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{content}",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false,
            "metadata": {},
            "lf_version": "1.0.19.post1"
          },
          "id": "ParseData-h5NeX",
          "description": "Convert Data into plain text following a specified template.",
          "display_name": "Parse Data"
        },
        "selected": false,
        "width": 384,
        "height": 351,
        "positionAbsolute": {
          "x": 1498.1861601282399,
          "y": 424.97921557077257
        },
        "dragging": false
      },
      {
        "id": "TextInput-cnlVH",
        "type": "genericNode",
        "position": {
          "x": 1491.213850597488,
          "y": 107.12693659654997
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "|     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| ≡   | Goodinfo! | 台灣股市資訊網 | [股票代號/名稱](StockList.asp) | **登入網站** | [![使用google帳號進行登入](https://goodinfo.tw/tw/image/social_google_box.png%20%22%E4%BD%BF%E7%94%A8google%E5%B8%B3%E8%99%9F%E7%99%BB%E5%85%A5,%3Cbr%3E%E4%BB%A5%E5%95%9F%E7%94%A8%E4%B8%8B%E5%88%97%E5%80%8B%E4%BA%BA%E5%8C%96%E5%8A%9F%E8%83%BD%EF%BC%9A%3Cbr%3E1.%E6%88%91%E7%9A%84%E8%87%AA%E9%81%B8%E8%82%A1%3Cbr%3E2.%E6%88%91%E7%9A%84%E8%87%AA%E8%A8%82%E6%AC%84%E4%BD%8D%3Cbr%3E3.K%E7%B7%9A%E5%9C%96%E5%8F%83%E6%95%B8%E8%A8%AD%E5%AE%9A%22)](login.asp?STEP=LOGIN&NO_EXPIRE=T&LOGIN_SITE=Google) | [![使用facebook帳號進行登入](https://goodinfo.tw/tw/image/facebookicon.png%20%22%E4%BD%BF%E7%94%A8facebook%E5%B8%B3%E8%99%9F%E7%99%BB%E5%85%A5,%3Cbr%3E%E4%BB%A5%E5%95%9F%E7%94%A8%E4%B8%8B%E5%88%97%E5%80%8B%E4%BA%BA%E5%8C%96%E5%8A%9F%E8%83%BD%EF%BC%9A%3Cbr%3E1.%E6%88%91%E7%9A%84%E8%87%AA%E9%81%B8%E8%82%A1%3Cbr%3E2.%E6%88%91%E7%9A%84%E8%87%AA%E8%A8%82%E6%AC%84%E4%BD%8D%3Cbr%3E3.K%E7%B7%9A%E5%9C%96%E5%8F%83%E6%95%B8%E8%A8%AD%E5%AE%9A%22)](login.asp?STEP=LOGIN&NO_EXPIRE=T&LOGIN_SITE=Facebook) | ![固定Title](https://goodinfo.tw/tw/image/pushpin0.png) |\n\n|     |\n| --- |\n| 基本概況 |\n| [個股市況](StockDetail.asp?STOCK_ID=2330) |\n| [基本資料](BasicInfo.asp?STOCK_ID=2330) |\n| [新聞公告](StockAnnounceList.asp?START_DT=2024%2F9%2F29&END_DT=2024%2F10%2F29&STOCK_ID=2330) |\n| [經營績效](StockBzPerformance.asp?STOCK_ID=2330) |\n| [資產狀況](StockAssetsStatus.asp?STOCK_ID=2330) |\n| [現金流量](StockCashFlow.asp?STOCK_ID=2330) |\n| [每月營收](ShowSaleMonChart.asp?STOCK_ID=2330) |\n| [產品營收](ShowSaleMonProdChart.asp?STOCK_ID=2330) |\n| 股東權益 |\n| [股東會日程](StockHolderSchedule.asp?STOCK_ID=2330) |\n| [股利政策](StockDividendPolicy.asp?STOCK_ID=2330) |\n| [除權息日程](StockDividendSchedule.asp?STOCK_ID=2330) |\n| [停資停券日](MarginPauseSchedule.asp?STOCK_ID=2330) |\n| [員工薪資](Salary.asp?STOCK_ID=2330) |\n| 財務報表 |\n| [資產負債表](StockFinDetail.asp?RPT_CAT=BS_M_QUAR&STOCK_ID=2330) |\n| [損益表](StockFinDetail.asp?RPT_CAT=IS_M_QUAR_ACC&STOCK_ID=2330) |\n| [現金流量表](StockFinDetail.asp?RPT_CAT=CF_M_QUAR_ACC&STOCK_ID=2330) |\n| [財務比率表](StockFinDetail.asp?RPT_CAT=XX_M_QUAR_ACC&STOCK_ID=2330) |\n| [財務評分表](StockFinGrade.asp?STOCK_ID=2330) |\n| [財報比較](StockFinCompare.asp?STOCK0=2330) |\n\n|     |\n| --- |\n| 籌碼分析 |\n| [法人買賣](ShowBuySaleChart.asp?STOCK_ID=2330) |\n| [融資融券](ShowMarginChart.asp?STOCK_ID=2330) |\n| [現股當沖](DayTrading.asp?STOCK_ID=2330) |\n| [持股分級](EquityDistributionClassHis.asp?STOCK_ID=2330) |\n| [股東結構](EquityDistributionCatHis.asp?STOCK_ID=2330) |\n| [董監持股](StockDirectorSharehold.asp?STOCK_ID=2330) |\n| [申報轉讓](EquityTransfer.asp?STOCK_ID=2330) |\n| 技術分析 |\n| [個股K線圖](ShowK_Chart.asp?STOCK_ID=2330) |\n| [K線比較圖](ShowK_ChartCompare.asp?STOCK_ID=2330&STOCK_ID1=) |\n| [本益比河流圖](ShowK_ChartFlow.asp?RPT_CAT=PER&STOCK_ID=2330) |\n| [本淨比河流圖](ShowK_ChartFlow.asp?RPT_CAT=PBR&STOCK_ID=2330) |\n| [乖離率河流圖](ShowK_ChartFlow.asp?RPT_CAT=DR%5F3M&STOCK_ID=2330) |\n| [季漲跌統計](StockHisAnaQuar.asp?STOCK_ID=2330) |\n| [月漲跌統計](StockHisAnaMonth.asp?STOCK_ID=2330) |\n| 其他  |\n| [上一檔股票](StockFinDetail.asp?RPT_CAT=BS_M_QUAR&STOCK_ID=2329) |\n| [下一檔股票](StockFinDetail.asp?RPT_CAT=BS_M_QUAR&STOCK_ID=2331) |\n| [上市大盤](StockIdxDetail.asp?STOCK_ID=%E5%8A%A0%E6%AC%8A%E6%8C%87%E6%95%B8) |\n| [上櫃大盤](StockIdxDetail.asp?STOCK_ID=%E6%AB%83%E8%B2%B7%E6%8C%87%E6%95%B8) |\n| [回到首頁](index.asp) |\n\n| [2330 台積電](StockDetail.asp?STOCK_ID=2330)<br><br>------------------------------------------<br><br>期貨標的選擇權標的權證標的資料日期: 10/29 |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| 成交價 | 昨收  | 漲跌價 | 漲跌幅 | 振幅  | 開盤  | 最高  | 最低  |\n| 1040 | 1050 | \\-10 | \\-0.95% | 1.9% | 1035 | 1040 | 1020 |\n| 成交張數 | 成交金額 | 成交筆數 | 成交均張 | 成交均價 | PBR | PER | PEG |\n| 48,098 | 496.8億 | 93,617 | 0.5張/筆 | 1033元 | 7.11 | 29.22 | \\-6.64 |\n| 昨日張數 | 昨日金額 | 昨日筆數 | 昨日均張 | 昨日均價 | 昨漲跌價 (幅) |     |     |\n| 41,665 | 442.2億 | 55,098 | 0.8張/筆 | 1061元 | \\-15 (-1.41%) |     |     |\n| 連漲連跌: 連2跌  ( -25元 / -2.35%)  <br>財報評分: [最新89分](StockFinGrade.asp?STOCK_ID=2330&RPT_CAT=M_YEAR \"最近一個財報年度的評分\")<br> / 平均90分        [上市指數](StockIdxDetail.asp?STOCK_ID=%E5%8A%A0%E6%AC%8A%E6%8C%87%E6%95%B8)<br>: 22926.59 (-271.48 / -1.17%) |     |     |     |     |     |     |     |\n\n[最新訊息](StockAnnounceList.asp?STOCK_ID=2330&START_DT=2024%2F9%2F29&END_DT=2024%2F10%2F29)\n\n-----------------------------------------------------------------------------------------\n\n|     |     |\n| --- | --- |\n| •   | [台積電代子公司 TSMC Global Ltd. 公告取得固定收益證券](StockAnnounceDetail.asp?STOCK_ID=2330&CLAIM_TIME=2024%2F10%2F29+18%3A21%3A53)<br>  (公告訊息 27分鐘前) |\n| •   | [【量大強漲股整理】台股震盪回檔，新主流誕生?CPO股有機會在上?](https://news.cnyes.com/news/id/5756273?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 1小時前) |\n| •   | [眾院大選慘敗…最難過的可能不是石破茂 而是晶片業](https://news.cnyes.com/news/id/5755961?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 2小時前) |\n| •   | [川普焦慮再起 台股獨垂淚，選前蹲 選後跳 鎖定產業趨勢：技嘉、保瑞、鴻海、台積電、創意、智原、聯發科、00937B](https://news.cnyes.com/news/id/5755853?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 4小時前) |\n| •   | [〈台股盤後〉川普效應擔憂擴大 權值股走低收跌271點摜破月線](https://news.cnyes.com/news/id/5755774?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 4小時前) |\n| •   | [快訊／台股收盤大跌271.48點　台積電跌10元至1040](https://finance.ettoday.net/news/2844361)<br>  (ETtoday新聞雲 5小時前) |\n| •   | [缺水電致晶片業外移？郭智輝：支持台電建廠就是支持護國神山](https://news.cnyes.com/news/id/5755612?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 5小時前) |\n| •   | [〈Arm科技論壇〉先進封裝是未來關鍵 台灣在供應鏈角色更重要](https://news.cnyes.com/news/id/5755627?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 10/29 12:05) |\n| •   | [川普風險害權值三王帶頭摔！台股殺近500點拉回　法人勸觀望](https://finance.ettoday.net/news/2844243)<br>  (ETtoday新聞雲 10/29 12:04) |\n| •   | [半導體需要綠電！　郭智輝：支持台積電「就支持台電建廠」](https://finance.ettoday.net/news/2844176)<br>  (ETtoday新聞雲 10/29 11:14) |\n| •   | [台積電首當其衝！專家示警：川普風險升高　供應鏈成本全漲](https://finance.ettoday.net/news/2844183)<br>  (ETtoday新聞雲 10/29 10:41) |\n| •   | [〈台股開盤〉台積電ADR重挫拖累 跌逾300點失守2萬3及月線](https://news.cnyes.com/news/id/5755375?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 10/29 09:39) |\n| •   | [快訊／台積電跌15元至1035　台股開盤大跌150點](https://finance.ettoday.net/news/2844085)<br>  (ETtoday新聞雲 10/29 09:02) |\n| •   | [【鑫攻略早報】川普交易搶搶滾!!比特幣突破7萬美元!!台積電ADR大跌逾4%!!!](https://news.cnyes.com/news/id/5755168?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 10/29 07:28) |\n| •   | [川普抨擊《晶片法案》：台灣該付保護費 而不是補貼建廠](https://news.cnyes.com/news/id/5755045?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 10/28 21:12) |\n| •   | [TIP攜S&P合編臺灣淨零轉型ESG 50指數 3檔金融股擠進前十大](https://news.cnyes.com/news/id/5754922?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 10/28 18:36) |\n| •   | [臺灣AI供應鏈聯盟指數上線 十大成分股搶先看](https://news.cnyes.com/news/id/5754846?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 10/28 18:28) |\n| •   | [民國113年度第三季合併財務報告之董事會決議日期](StockAnnounceDetail.asp?STOCK_ID=2330&CLAIM_TIME=2024%2F10%2F28+18%3A18%3A25)<br>  (公告訊息 10/28 18:18) |\n| •   | [【量大強漲股整理】車用股逆勢突圍，有機會成為下波主流，CPO轉機股如何掌握?](https://news.cnyes.com/news/id/5754879?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 10/28 18:09) |\n| •   | [台灣淨零轉型ESG 50指數　今起發布收盤指數](https://finance.ettoday.net/news/2843875)<br>  (ETtoday新聞雲 10/28 17:37) |\n| •   | [世禾搶進2奈米市場 清洗技術成先進製程關鍵推手](https://news.cnyes.com/news/id/5754762?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 10/28 17:20) |\n| •   | [台灣AI供應鏈聯盟指數　今起發布盤中即時指數](https://finance.ettoday.net/news/2843834)<br>  (ETtoday新聞雲 10/28 17:16) |\n| •   | [美國科技超級財報週 重點看什麼? 選舉前內資退場觀望 鎖定產業趨勢：技嘉、台達電、鴻海、台積電、創意、智原、聯發科、00937B](https://news.cnyes.com/news/id/5754608?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 10/28 16:10) |\n| •   | [〈台股盤後〉台積電尾盤帶頭一口氣摜壓百點 收跌150點失守10日線](https://news.cnyes.com/news/id/5754407?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 10/28 14:09) |\n| •   | [台股收盤跌150.38點　台積電跌15元至1050](https://finance.ettoday.net/news/2843664)<br>  (ETtoday新聞雲 10/28 13:35) |\n| •   | [〈台股開盤〉無懼川普再提晶片保護 台積電領軍漲逾百點站回5日線](https://news.cnyes.com/news/id/5754009?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 10/28 09:40) |\n| •   | [台積電成逆全球化受益者！謝金河點三星4大落後　敗象蓋不住](https://finance.ettoday.net/news/2843390)<br>  (ETtoday新聞雲 10/28 09:10) |\n| •   | [快訊／台積電漲10元至1075　台股開盤大漲107點](https://finance.ettoday.net/news/2843401)<br>  (ETtoday新聞雲 10/28 09:02) |\n| •   | [操盤手看台股：繼台積電概念股後，一族群可望上攻](https://news.cnyes.com/news/id/5753142?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 10/28 08:00) |\n| •   | [【鑫攻略早報】美債出現大抛售?建議ETF轉入中概相關ETF!!](https://news.cnyes.com/news/id/5753776?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 10/28 07:32) |\n| •   | [張忠謀拋「最嚴峻挑戰」　學者：台積電的煩惱和別人不一樣](https://finance.ettoday.net/news/2843284)<br>  (ETtoday新聞雲 10/28 00:02) |\n| •   | [賣5張台積電　305萬「All in力積電」 ！他曝3年後下場：賠一間房](https://finance.ettoday.net/news/2842953)<br>  (ETtoday新聞雲 10/27 17:43) |\n| •   | [台積電10高層身價飆破10億　張忠謀資產破千億成最大贏家](https://finance.ettoday.net/news/2843178)<br>  (ETtoday新聞雲 10/27 15:36) |\n| •   | [高股息ETF息率不香了？法人：不必太悲觀 估明年呈Nike式回升](https://news.cnyes.com/news/id/5751085?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 10/27 11:20) |\n| •   | [蘋果AI革命將來襲！台灣供應鏈受惠股機會不容錯過：台積電、大立光、鴻海、玉晶光、華通](https://news.cnyes.com/news/id/5753202?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 10/27 09:10) |\n| •   | [築間進軍日本拚2年開6家　明年積極布局台灣韓式餐飲市場](https://finance.ettoday.net/news/2842871)<br>  (ETtoday新聞雲 10/27 06:00) |\n| •   | [華為白手套抓到了？台積電切斷供貨　「可疑客戶」遭爆料曝光](https://finance.ettoday.net/news/2842870)<br>  (ETtoday新聞雲 10/27 00:56) |\n| •   | [〈台積電運動會〉魏哲家宣布特別獎金加碼 基層員工每人可領2萬元](https://news.cnyes.com/news/id/5753619?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 10/26 16:37) |\n| •   | [〈台積電運動會〉魏哲家：持續擴大技術領先地位 在全球半導體角色更關鍵](https://news.cnyes.com/news/id/5753612?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 10/26 16:32) |\n| •   | [〈台積電運動會〉張忠謀：2024又是破紀錄的一年 台積電已是「真正兵家必爭之地」](https://news.cnyes.com/news/id/5753599?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 10/26 11:48) |\n| •   | [台積電37年運動會　魏哲家笑稱「我等了26年才站在這」](https://finance.ettoday.net/news/2842495)<br>  (ETtoday新聞雲 10/26 10:25) |\n| •   | [張忠謀：最嚴峻挑戰在眼前　台積電真正成為兵家必爭之地](https://finance.ettoday.net/news/2842485)<br>  (ETtoday新聞雲 10/26 10:11) |\n| •   | [台積電運動會魏哲家送「小禮物」　員工每人發2萬](https://finance.ettoday.net/news/2842464)<br>  (ETtoday新聞雲 10/26 10:01) |\n| •   | [93歲張忠謀走進台積電運動會　老員工陳俊聖、蔡力行回娘家](https://finance.ettoday.net/news/2842449)<br>  (ETtoday新聞雲 10/26 09:34) |\n| •   | [93歲張忠謀走進台積電運動會　員工狂喊「爺爺我愛你」](https://finance.ettoday.net/news/2842449)<br>  (ETtoday新聞雲 10/26 09:34) |\n| •   | [英特爾將在俄亥俄州蓋兩間晶片廠 斥資逾280億美元](https://news.cnyes.com/news/id/5753461?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 10/25 23:00) |\n| •   | [美股開市前：道指、納指期貨皆升逾100點 台積電升1% 西數飆升11%](https://hk.investing.com/news/stock-market-news/article-672313)<br>  (Investing.com 10/25 21:34) |\n| •   | [【量大強漲股整理】特斯拉財報大好，車電股有機會成為Q4主流?CPO股如何解讀?](https://news.cnyes.com/news/id/5753324?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 10/25 18:33) |\n| •   | [量縮整理 下週精彩，選前震盪 選後行情不悲觀 : 技嘉、台達電、鴻海、大立光、創意、智原、聯發科、00937B](https://news.cnyes.com/news/id/5753145?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)<br>  (Anue鉅亨 10/25 17:15) |\n| •   | [台積電代子公司Growth Fund Limited公告處分 Astera Labs, Inc.之普通股](StockAnnounceDetail.asp?STOCK_ID=2330&CLAIM_TIME=2024%2F10%2F25+17%3A03%3A17)<br>  (公告訊息 10/25 17:03) |\n\n\\* 因IFRSs實施，2013年Q1後的資料，皆以合併財報顯示。\n\n\\*「近四季財報」為本站自行計算，非公司正規財報，僅供參考。\n\n2330 台積電 單季資產負債表 (合併)\n---------------------\n\n(單位:億元)\n\n合併報表 – 單季合併報表 – 年度個別報表 – 單季個別報表 – 年度2024Q22024Q12023Q42023Q32023Q22023Q12022Q42022Q32022Q22022Q12021Q42021Q32021Q22021Q12020Q42020Q32020Q22020Q12019Q42019Q32019Q22019Q12018Q42018Q32018Q22018Q12017Q42017Q32017Q22017Q12016Q42016Q32016Q22016Q12015Q42015Q32015Q22015Q12014Q42014Q32014Q22014Q12013Q42013Q32013Q22013Q12012Q42012Q32012Q22012Q12011Q42011Q32011Q22011Q12010Q42010Q32010Q22010Q12009Q42009Q32009Q22009Q12008Q42008Q32008Q22008Q12007Q42007Q32007Q22007Q12006Q42006Q22005Q42005Q22004Q42004Q22003Q42002Q42001Q42000Q41999Q41998Q41997Q41996Q41995Q4**匯出：** (載入中)\n\n| 資產  | 2024Q2 |     | 2024Q1 |     | 2023Q4 |     | 2023Q3 |     | 2023Q2 |     | 2023Q1 |     | 2022Q4 |     |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| 金額  | ％   | 金額  | ％   | 金額  | ％   | 金額  | ％   | 金額  | ％   | 金額  | ％   | 金額  | ％   |\n| 現金及約當現金 | 17,991 | 30.1 | 16,982 | 29.3 | 14,654 | 26.5 | 13,118 | 23.9 | 12,767 | 24.8 | 13,852 | 27.5 | 13,428 | 27  |\n| 透過損益按公允價值衡量之金融資產–流動 | 1.14 | 0   | 2.53 | 0   | 9.25 | 0.02 | 3.79 | 0.01 | 9.76 | 0.02 | 9.82 | 0.02 | 10.7 | 0.02 |\n| 透過其他綜合損益按公允價值衡量之金融資產–流動 | 1,852 | 3.1 | 1,759 | 3.04 | 1,545 | 2.79 | 1,548 | 2.82 | 1,408 | 2.73 | 1,295 | 2.57 | 1,230 | 2.48 |\n| 按攤銷後成本衡量之金融資產–流動 | 641.6 | 1.07 | 483.3 | 0.83 | 667.6 | 1.21 | 842.6 | 1.54 | 714.5 | 1.39 | 734.3 | 1.46 | 946 | 1.91 |\n| 避險之金融資產–流動 | 0.014 | 0   | 0   | 0   | 0   | 0   | 0.37 | 0   | 0.3 | 0   | 0.001 | 0   | 0.023 | 0   |\n| 應收帳款 | 2,091 | 3.5 | 2,015 | 3.48 | 2,013 | 3.64 | 2,225 | 4.06 | 1,902 | 3.69 | 1,477 | 2.93 | 2,298 | 4.63 |\n| 應收帳款–關係人 | 10.9 | 0.02 | 4.79 | 0.01 | 6.24 | 0.01 | 3.56 | 0.01 | 8.63 | 0.02 | 3.33 | 0.01 | 15.84 | 0.03 |\n| 其他應收款–關係人 | 24.03 | 0.04 | 0.79 | 0   | 0.72 | 0   | 0.82 | 0   | 25.21 | 0.05 | 0.77 | 0   | 0.69 | 0   |\n| 應收款項合計 | 2,126 | 3.55 | 2,021 | 3.49 | 2,020 | 3.65 | 2,229 | 4.06 | 1,935 | 3.76 | 1,481 | 2.94 | 2,314 | 4.66 |\n| 存貨  | 2,725 | 4.55 | 2,671 | 4.62 | 2,510 | 4.54 | 2,621 | 4.78 | 2,343 | 4.55 | 2,161 | 4.28 | 2,211 | 4.45 |\n| 其他流動資產 | 579.2 | 0.97 | 609.3 | 1.05 | 533.8 | 0.96 | 461.6 | 0.84 | 421.3 | 0.82 | 423.5 | 0.84 | 388.5 | 0.78 |\n| 流動資產合計 | 25,917 | 43.3 | 24,528 | 42.4 | 21,940 | 39.7 | 20,825 | 38  | 19,600 | 38.1 | 19,957 | 39.6 | 20,529 | 41.3 |\n| 透過損益按公允價值衡量之金融資產–非流動 | 147.1 | 0.25 | 139.6 | 0.24 | 134.2 | 0.24 | 1.12 | 0   | 1.09 | 0   | 0   | 0   | 0   | 0   |\n| 透過其他綜合損益按公允價值衡量之金融資產–非流動 | 72.23 | 0.12 | 74.28 | 0.13 | 72.09 | 0.13 | 79.34 | 0.14 | 75.17 | 0.15 | 69.18 | 0.14 | 61.59 | 0.12 |\n| 按攤銷後成本衡量之金融資產–非流動 | 886.8 | 1.48 | 859.1 | 1.48 | 792 | 1.43 | 793.8 | 1.45 | 601.4 | 1.17 | 345.1 | 0.68 | 351.3 | 0.71 |\n| 採用權益法之投資 | 296 | 0.49 | 311.7 | 0.54 | 296.2 | 0.54 | 289.2 | 0.53 | 268.5 | 0.52 | 284.8 | 0.56 | 276.4 | 0.56 |\n| 投資合計 | 1,402 | 2.34 | 1,385 | 2.39 | 1,294 | 2.34 | 1,163 | 2.12 | 946.1 | 1.84 | 699.1 | 1.39 | 689.3 | 1.39 |\n| 固定資產合計 | 31,059 | 51.9 | 30,518 | 52.7 | 30,645 | 55.4 | 31,327 | 57.1 | 29,472 | 57.2 | 28,334 | 56.2 | 26,938 | 54.3 |\n| 使用權資產 | 395.1 | 0.66 | 401.4 | 0.69 | 404.2 | 0.73 | 412.5 | 0.75 | 416 | 0.81 | 420.2 | 0.83 | 419.1 | 0.84 |\n| 無形資產合計 | 224.3 | 0.37 | 222.4 | 0.38 | 227.7 | 0.41 | 234.1 | 0.43 | 238.5 | 0.46 | 243 | 0.48 | 260 | 0.52 |\n| 遞延所得稅資產 | 651.6 | 1.09 | 637.3 | 1.1 | 641.8 | 1.16 | 710.3 | 1.3 | 683.8 | 1.33 | 687.8 | 1.36 | 691.9 | 1.39 |\n| 其他資產–其他 | 175.2 | 0.29 | 187 | 0.32 | 170.5 | 0.31 | 173.7 | 0.32 | 138.3 | 0.27 | 117.2 | 0.23 | 120.2 | 0.24 |\n| 其他資產合計 | 175.2 | 0.29 | 187 | 0.32 | 170.5 | 0.31 | 173.7 | 0.32 | 138.3 | 0.27 | 117.2 | 0.23 | 120.2 | 0.24 |\n| 非流動資產合計 | 33,907 | 56.7 | 33,351 | 57.6 | 33,383 | 60.3 | 34,021 | 62  | 31,895 | 61.9 | 30,501 | 60.4 | 29,119 | 58.7 |\n| 資產總額 | 59,824 | 100 | 57,879 | 100 | 55,324 | 100 | 54,846 | 100 | 51,495 | 100 | 50,458 | 100 | 49,648 | 100 |\n| 負債  | 2024Q2 |     | 2024Q1 |     | 2023Q4 |     | 2023Q3 |     | 2023Q2 |     | 2023Q1 |     | 2022Q4 |     |\n| 金額  | ％   | 金額  | ％   | 金額  | ％   | 金額  | ％   | 金額  | ％   | 金額  | ％   | 金額  | ％   |\n| 透過損益按公允價值衡量之金融負債–流動 | 5.09 | 0.01 | 9.41 | 0.02 | 1.21 | 0   | 1.33 | 0   | 1.95 | 0   | 6.21 | 0.01 | 1.16 | 0   |\n| 避險之金融負債–流動 | 0.035 | 0   | 0.11 | 0   | 273.3 | 0.49 | 268.8 | 0.49 | 72.37 | 0.14 | 0.39 | 0   | 0.008 | 0   |\n| 應付帳款 | 627.6 | 1.05 | 564.2 | 0.97 | 557.3 | 1.01 | 521.5 | 0.95 | 477.9 | 0.93 | 463 | 0.92 | 548.8 | 1.11 |\n| 應付帳款–關係人 | 11.84 | 0.02 | 11.85 | 0.02 | 15.66 | 0.03 | 16.21 | 0.03 | 11.79 | 0.02 | 10.8 | 0.02 | 16.43 | 0.03 |\n| 其他應付款 | 4,400 | 7.35 | 3,982 | 6.88 | 4,240 | 7.66 | 4,528 | 8.26 | 3,999 | 7.77 | 3,987 | 7.9 | 4,543 | 9.15 |\n| 應付款項合計 | 5,039 | 8.42 | 4,558 | 7.88 | 4,813 | 8.7 | 5,066 | 9.24 | 4,489 | 8.72 | 4,461 | 8.84 | 5,108 | 10.3 |\n| 本期所得稅負債 | 1,103 | 1.84 | 1,392 | 2.41 | 989.1 | 1.79 | 1,030 | 1.88 | 700.6 | 1.36 | 1,572 | 3.12 | 1,208 | 2.43 |\n| 其他流動負債 | 4,342 | 7.26 | 4,302 | 7.43 | 3,060 | 5.53 | 3,335 | 6.08 | 2,845 | 5.52 | 2,692 | 5.33 | 3,125 | 6.29 |\n| 流動負債合計 | 10,489 | 17.5 | 10,262 | 17.7 | 9,136 | 16.5 | 9,700 | 17.7 | 8,108 | 15.7 | 8,731 | 17.3 | 9,442 | 19  |\n| 應付公司債 | 9,653 | 16.1 | 9,555 | 16.5 | 9,139 | 16.5 | 9,325 | 17  | 9,017 | 17.5 | 8,486 | 16.8 | 8,343 | 16.8 |\n| 長期借款 | 90.3 | 0.15 | 100.2 | 0.17 | 43.83 | 0.08 | 50.13 | 0.09 | 56.11 | 0.11 | 61.48 | 0.12 | 47.6 | 0.1 |\n| 遞延所得稅負債 | 0.57 | 0   | 0.43 | 0   | 0.54 | 0   | 2.13 | 0   | 3.74 | 0.01 | 7.26 | 0.01 | 10.31 | 0.02 |\n| 租賃負債–非流動 | 282.2 | 0.47 | 284.7 | 0.49 | 286.8 | 0.52 | 294.2 | 0.54 | 297.3 | 0.58 | 299.8 | 0.59 | 297.6 | 0.6 |\n| 其他負債–其他 | 1,107 | 1.85 | 1,019 | 1.76 | 1,885 | 3.41 | 1,746 | 3.18 | 1,957 | 3.8 | 1,944 | 3.85 | 1,902 | 3.83 |\n| 其他負債合計 | 1,107 | 1.85 | 1,019 | 1.76 | 1,885 | 3.41 | 1,746 | 3.18 | 1,957 | 3.8 | 1,944 | 3.85 | 1,902 | 3.83 |\n| 非流動負債合計 | 11,133 | 18.6 | 10,960 | 18.9 | 11,355 | 20.5 | 11,417 | 20.8 | 11,332 | 22  | 10,799 | 21.4 | 10,601 | 21.4 |\n| 負債總額 | 21,622 | 36.1 | 21,222 | 36.7 | 20,491 | 37  | 21,117 | 38.5 | 19,440 | 37.8 | 19,529 | 38.7 | 20,043 | 40.4 |\n| 股東權益 | 2024Q2 |     | 2024Q1 |     | 2023Q4 |     | 2023Q3 |     | 2023Q2 |     | 2023Q1 |     | 2022Q4 |     |\n| 金額  | ％   | 金額  | ％   | 金額  | ％   | 金額  | ％   | 金額  | ％   | 金額  | ％   | 金額  | ％   |\n| 普通股股本 | 2,593 | 4.34 | 2,594 | 4.48 | 2,593 | 4.69 | 2,593 | 4.73 | 2,593 | 5.04 | 2,593 | 5.14 | 2,593 | 5.22 |\n| 待註銷股本 | \\-  | \\-  | \\-0.14 | 0   | \\-  | \\-  | \\-  | \\-  | \\-  | \\-  | \\-0.042 | 0   | \\-  | \\-  |\n| 股本合計 | 2,593 | 4.34 | 2,593 | 4.48 | 2,593 | 4.69 | 2,593 | 4.73 | 2,593 | 5.04 | 2,593 | 5.14 | 2,593 | 5.22 |\n| 資本公積–發行溢價 | 337.1 | 0.56 | 337.1 | 0.58 | 333 | 0.6 | 333 | 0.61 | 333 | 0.65 | 333 | 0.66 | 330.8 | 0.67 |\n| 資本公積–實際取得或處分子公司股權價格與帳面價值差額 | 84.12 | 0.14 | 84.12 | 0.15 | 84.06 | 0.15 | 84.06 | 0.15 | 84.06 | 0.16 | 84.06 | 0.17 | 84.06 | 0.17 |\n| 資本公積–認列對子公司所有權權益變動數 | 41.9 | 0.07 | 41.93 | 0.07 | 42  | 0.08 | 42.11 | 0.08 | 42.25 | 0.08 | 42.25 | 0.08 | 42.3 | 0.09 |\n| 資本公積–受贈資產 | 0.81 | 0   | 0.81 | 0   | 0.81 | 0   | 0.65 | 0   | 0.65 | 0   | 0.65 | 0   | 0.65 | 0   |\n| 資本公積–採用權益法認列關聯企業及合資股權淨值之變動數 | 3.08 | 0.01 | 3.05 | 0.01 | 3.02 | 0.01 | 3.11 | 0.01 | 3.13 | 0.01 | 3.12 | 0.01 | 3.12 | 0.01 |\n| 資本公積–合併溢額 | 228 | 0.38 | 228 | 0.39 | 228 | 0.41 | 228 | 0.42 | 228 | 0.44 | 228 | 0.45 | 228 | 0.46 |\n| 資本公積–限制員工權利股票 | 14.41 | 0.02 | 14.41 | 0.02 | 7.84 | 0.01 | 7.84 | 0.01 | 7.84 | 0.02 | 7.84 | 0.02 | 4.38 | 0.01 |\n| 資本公積合計 | 709.4 | 1.19 | 709.4 | 1.23 | 698.8 | 1.26 | 698.8 | 1.27 | 699 | 1.36 | 698.9 | 1.39 | 693.3 | 1.4 |\n| 法定盈餘公積 | 3,111 | 5.2 | 3,111 | 5.38 | 3,111 | 5.62 | 3,111 | 5.67 | 3,111 | 6.04 | 3,111 | 6.17 | 3,111 | 6.27 |\n| 特別盈餘公積 | 0   | 0   | 280.2 | 0.48 | 0   | 0   | 172.3 | 0.31 | 235.9 | 0.46 | 203.2 | 0.4 | 31.54 | 0.06 |\n| 未分配盈餘(或待彌補虧損) | 31,275 | 52.3 | 29,554 | 51.1 | 28,469 | 51.5 | 26,822 | 48.9 | 25,426 | 49.4 | 24,418 | 48.4 | 23,232 | 46.8 |\n| 保留盈餘合計 | 34,387 | 57.5 | 32,946 | 56.9 | 31,580 | 57.1 | 30,105 | 54.9 | 28,773 | 55.9 | 27,733 | 55  | 26,375 | 53.1 |\n| 其他權益合計 | 255.4 | 0.43 | 108.9 | 0.19 | \\-283.1 | \\-0.51 | 86.17 | 0.16 | \\-177.8 | \\-0.35 | \\-242.7 | \\-0.48 | \\-205.1 | \\-0.41 |\n| 庫藏股票 | \\-30.89 | \\-0.05 | \\-  | \\-  | 0   | 0   | 0   | 0   | 0   | 0   | \\-  | \\-  | \\-  | \\-  |\n| 歸屬於母公司業主之權益合計 | 37,914 | 63.4 | 36,357 | 62.8 | 34,589 | 62.5 | 33,483 | 61.1 | 31,888 | 61.9 | 30,782 | 61  | 29,457 | 59.3 |\n| 非控制權益 | 287.5 | 0.48 | 299.8 | 0.52 | 243.5 | 0.44 | 244.7 | 0.45 | 167.2 | 0.32 | 146.6 | 0.29 | 148.4 | 0.3 |\n| 股東權益總額 | 38,201 | 63.9 | 36,657 | 63.3 | 34,833 | 63  | 33,728 | 61.5 | 32,055 | 62.2 | 30,929 | 61.3 | 29,605 | 59.6 |\n| 待註銷股本股數(萬張) | \\-  | \\-  | 0.14 | \\-  | \\-  | \\-  | \\-  | \\-  | \\-  | \\-  | 0.04 | \\-  | \\-  | \\-  |\n| 預收股款之約當發行股數(萬張) | \\-  | \\-  | \\-  | \\-  | 0   | \\-  | 0   | \\-  | 0   | \\-  | \\-  | \\-  | \\-  | \\-  |\n| 母公司暨子公司持有之母公司庫藏股股數(萬張) | 0.32 | \\-  | \\-  | \\-  | 0   | \\-  | 0   | \\-  | 0   | \\-  | \\-  | \\-  | \\-  | \\-  |\n| 每股淨值(元) | 146.21 | \\-  | 140.19 | \\-  | 133.38 | \\-  | 129.12 | \\-  | 122.97 | \\-  | 118.7 | \\-  | 113.6 | \\-  |\n| 財務報告書–公開資訊觀測站 | [![](https://goodinfo.tw/tw/image/link.png)](http://doc.twse.com.tw/server-java/t57sb01?step=1&colorchg=1&co_id=2330&year=113&seamon=&mtype=A) |     | [![](https://goodinfo.tw/tw/image/link.png)](http://doc.twse.com.tw/server-java/t57sb01?step=1&colorchg=1&co_id=2330&year=113&seamon=&mtype=A) |     | [![](https://goodinfo.tw/tw/image/link.png)](http://doc.twse.com.tw/server-java/t57sb01?step=1&colorchg=1&co_id=2330&year=112&seamon=&mtype=A) |     | [![](https://goodinfo.tw/tw/image/link.png)](http://doc.twse.com.tw/server-java/t57sb01?step=1&colorchg=1&co_id=2330&year=112&seamon=&mtype=A) |     | [![](https://goodinfo.tw/tw/image/link.png)](http://doc.twse.com.tw/server-java/t57sb01?step=1&colorchg=1&co_id=2330&year=112&seamon=&mtype=A) |     | [![](https://goodinfo.tw/tw/image/link.png)](http://doc.twse.com.tw/server-java/t57sb01?step=1&colorchg=1&co_id=2330&year=112&seamon=&mtype=A) |     | [![](https://goodinfo.tw/tw/image/link.png)](http://doc.twse.com.tw/server-java/t57sb01?step=1&colorchg=1&co_id=2330&year=111&seamon=&mtype=A) |     |\n\n| 資產  |\n| --- |\n| 現金及約當現金 |\n| 透過損益按公允價值衡量之金融資產–流動 |\n| 透過其他綜合損益按公允價值衡量之金融資產–流動 |\n| 按攤銷後成本衡量之金融資產–流動 |\n| 避險之金融資產–流動 |\n| 應收帳款 |\n| 應收帳款–關係人 |\n| 其他應收款–關係人 |\n| 應收款項合計 |\n| 存貨  |\n| 其他流動資產 |\n| 流動資產合計 |\n| 透過損益按公允價值衡量之金融資產–非流動 |\n| 透過其他綜合損益按公允價值衡量之金融資產–非流動 |\n| 按攤銷後成本衡量之金融資產–非流動 |\n| 採用權益法之投資 |\n| 投資合計 |\n| 固定資產合計 |\n| 使用權資產 |\n| 無形資產合計 |\n| 遞延所得稅資產 |\n| 其他資產–其他 |\n| 其他資產合計 |\n| 非流動資產合計 |\n| 資產總額 |\n| 負債  |\n| 透過損益按公允價值衡量之金融負債–流動 |\n| 避險之金融負債–流動 |\n| 應付帳款 |\n| 應付帳款–關係人 |\n| 其他應付款 |\n| 應付款項合計 |\n| 本期所得稅負債 |\n| 其他流動負債 |\n| 流動負債合計 |\n| 應付公司債 |\n| 長期借款 |\n| 遞延所得稅負債 |\n| 租賃負債–非流動 |\n| 其他負債–其他 |\n| 其他負債合計 |\n| 非流動負債合計 |\n| 負債總額 |\n| 股東權益 |\n| 普通股股本 |\n| 待註銷股本 |\n| 股本合計 |\n| 資本公積–發行溢價 |\n| 資本公積–實際取得或處分子公司股權價格與帳面價值差額 |\n| 資本公積–認列對子公司所有權權益變動數 |\n| 資本公積–受贈資產 |\n| 資本公積–採用權益法認列關聯企業及合資股權淨值之變動數 |\n| 資本公積–合併溢額 |\n| 資本公積–限制員工權利股票 |\n| 資本公積合計 |\n| 法定盈餘公積 |\n| 特別盈餘公積 |\n| 未分配盈餘(或待彌補虧損) |\n| 保留盈餘合計 |\n| 其他權益合計 |\n| 庫藏股票 |\n| 歸屬於母公司業主之權益合計 |\n| 非控制權益 |\n| 股東權益總額 |\n| 待註銷股本股數(萬張) |\n| 預收股款之約當發行股數(萬張) |\n| 母公司暨子公司持有之母公司庫藏股股數(萬張) |\n| 每股淨值(元) |\n| 財務報告書–公開資訊觀測站 |\n\n* * *\n\n股豐資訊有限公司 (統一編號 24620254) 版權所有 © 2012-2024 Good Information Co., Ltd. All Rights Reserved.  ([服務條款](ServiceTerms.asp)\n)\n\n本網站運用 Cookie 技術以提供您更佳的瀏覽體驗，如果您持續使用本網站，代表您已同意使用。 ([隱私及Cookies政策](Privacy.asp)\n)\n\n本網站所有資料僅供參考，如使用者依本資料交易發生交易損失需自行負責，股豐資訊有限公司 對資料內容錯誤、更新延誤或傳輸中斷不負任何責任。\n\n[ETtoday新聞雲](https://www.ettoday.net/)\n | [Anue鉅亨](https://www.cnyes.com/)\n | [PR Newswire](https://hk.prnasia.com/)\n | [Investing.com](https://hk.investing.com/)\n 相關新聞標題與內容之著作權與智慧財產權均屬原網站及原作者所有，本網站僅提供新聞聯播，不主張任何權利。\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n|     |\n| --- |\n| ▲   |\n| ▼   |",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Get text inputs from the Playground.",
            "icon": "type",
            "base_classes": [
              "Message"
            ],
            "display_name": "Text Input",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "edited": false,
            "metadata": {},
            "lf_version": "1.0.19.post1"
          },
          "id": "TextInput-cnlVH",
          "description": "Get text inputs from the Playground.",
          "display_name": "Text Input"
        },
        "selected": false,
        "width": 384,
        "height": 287,
        "positionAbsolute": {
          "x": 1491.213850597488,
          "y": 107.12693659654997
        },
        "dragging": false
      },
      {
        "id": "DelimitedTextExtractor-HbxgU",
        "type": "genericNode",
        "position": {
          "x": 1989.2002957275731,
          "y": -113.86736162514461
        },
        "data": {
          "type": "DelimitedTextExtractor",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import re\r\nfrom langflow.base.io.text import TextComponent\r\nfrom langflow.io import MultilineInput, Output\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass DelimitedTextExtractor(TextComponent):\r\n    display_name = \"Delimited Text Extractor\"\r\n    description = \"Extract text between specified start and end delimiters, then remove text between another set of delimiters.\"\r\n    icon = \"type\"\r\n    name = \"DelimitedTextExtractor\"\r\n\r\n    inputs = [\r\n        MultilineInput(\r\n            name=\"input_value\",\r\n            display_name=\"Text\",\r\n            info=\"Text to be processed.\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"retrieve_start_delimiter\",\r\n            display_name=\"Retrieve Start Delimiter\",\r\n            info=\"The starting text delimiter for extraction.\",\r\n            value=\"retrieve_start\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"retrieve_end_delimiter\",\r\n            display_name=\"Retrieve End Delimiter\",\r\n            info=\"The ending text delimiter for extraction.\",\r\n            value=\"retrieve_end\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"remove_start_delimiter\",\r\n            display_name=\"Remove Start Delimiter\",\r\n            info=\"The starting text delimiter for removal.\",\r\n            value=\"remove_start\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"remove_end_delimiter\",\r\n            display_name=\"Remove End Delimiter\",\r\n            info=\"The ending text delimiter for removal.\",\r\n            value=\"remove_end\",\r\n        ),\r\n    ]\r\n    outputs = [\r\n        Output(display_name=\"Extracted Data\", name=\"extracted_data\", method=\"extract_data_between_delimiters\"),\r\n    ]\r\n\r\n    def extract_data_between_delimiters(self) -> Data:\r\n        start = re.escape(self.retrieve_start_delimiter)\r\n        end = re.escape(self.retrieve_end_delimiter)\r\n        extract_pattern = f\"{start}(.*?){end}\"\r\n        \r\n        match = re.search(extract_pattern, self.input_value, re.DOTALL)\r\n        if match:\r\n            extracted_text = match.group(1).strip()\r\n        else:\r\n            extracted_text = f\"No content found between '{self.retrieve_start_delimiter}' and '{self.retrieve_end_delimiter}'.\"\r\n        \r\n        remove_start = re.escape(self.remove_start_delimiter)\r\n        remove_end = re.escape(self.remove_end_delimiter)\r\n        remove_pattern = f\"(?<={remove_start})(.*?){remove_end}\"\r\n        modified_extracted_text = re.sub(remove_pattern, '', extracted_text, flags=re.DOTALL)\r\n\r\n        modified_extracted_text = re.sub(r'\\n\\s*\\n+', '\\n', modified_extracted_text)\r\n\r\n        self.status = modified_extracted_text\r\n        return Data(data={\"text\": modified_extracted_text})\r\n\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be processed.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "remove_end_delimiter": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "remove_end_delimiter",
                "value": "(載入中)",
                "display_name": "Remove End Delimiter",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The ending text delimiter for removal.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "remove_start_delimiter": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "remove_start_delimiter",
                "value": "(單位:億元)",
                "display_name": "Remove Start Delimiter",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The starting text delimiter for removal.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "retrieve_end_delimiter": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "retrieve_end_delimiter",
                "value": "| 財務報告書–公開資訊觀測站 |",
                "display_name": "Retrieve End Delimiter",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The ending text delimiter for extraction.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "retrieve_start_delimiter": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "retrieve_start_delimiter",
                "value": "非公司正規財報，僅供參考。",
                "display_name": "Retrieve Start Delimiter",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The starting text delimiter for extraction.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Extract text between specified start and end delimiters, then remove text between another set of delimiters.",
            "icon": "type",
            "base_classes": [
              "Data"
            ],
            "display_name": "Custom Component",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "extracted_data",
                "display_name": "Extracted Data",
                "method": "extract_data_between_delimiters",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "retrieve_start_delimiter",
              "retrieve_end_delimiter",
              "remove_start_delimiter",
              "remove_end_delimiter"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.19.post1"
          },
          "id": "DelimitedTextExtractor-HbxgU"
        },
        "selected": false,
        "width": 384,
        "height": 661,
        "positionAbsolute": {
          "x": 1989.2002957275731,
          "y": -113.86736162514461
        },
        "dragging": false
      },
      {
        "id": "SplitText-wugaX",
        "type": "genericNode",
        "position": {
          "x": 512.4467562413811,
          "y": 1370.6502508161032
        },
        "data": {
          "type": "SplitText",
          "node": {
            "template": {
              "_type": "Component",
              "data_inputs": {
                "trace_as_metadata": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data_inputs",
                "value": "",
                "display_name": "Data Inputs",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to split.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "chunk_overlap": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chunk_overlap",
                "value": 200,
                "display_name": "Chunk Overlap",
                "advanced": false,
                "dynamic": false,
                "info": "Number of characters to overlap between chunks.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "chunk_size": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chunk_size",
                "value": 2000,
                "display_name": "Chunk Size",
                "advanced": false,
                "dynamic": false,
                "info": "The maximum number of characters in each chunk.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "load_from_db": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List\n\nfrom langchain_text_splitters import CharacterTextSplitter\n\nfrom langflow.custom import Component\nfrom langflow.io import HandleInput, IntInput, MessageTextInput, Output\nfrom langflow.schema import Data\nfrom langflow.utils.util import unescape_string\n\n\nclass SplitTextComponent(Component):\n    display_name: str = \"Split Text\"\n    description: str = \"Split text into chunks based on specified criteria.\"\n    icon = \"scissors-line-dashed\"\n    name = \"SplitText\"\n\n    inputs = [\n        HandleInput(\n            name=\"data_inputs\",\n            display_name=\"Data Inputs\",\n            info=\"The data to split.\",\n            input_types=[\"Data\"],\n            is_list=True,\n        ),\n        IntInput(\n            name=\"chunk_overlap\",\n            display_name=\"Chunk Overlap\",\n            info=\"Number of characters to overlap between chunks.\",\n            value=200,\n        ),\n        IntInput(\n            name=\"chunk_size\",\n            display_name=\"Chunk Size\",\n            info=\"The maximum number of characters in each chunk.\",\n            value=1000,\n        ),\n        MessageTextInput(\n            name=\"separator\",\n            display_name=\"Separator\",\n            info=\"The character to split on. Defaults to newline.\",\n            value=\"\\n\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Chunks\", name=\"chunks\", method=\"split_text\"),\n    ]\n\n    def _docs_to_data(self, docs):\n        data = []\n        for doc in docs:\n            data.append(Data(text=doc.page_content, data=doc.metadata))\n        return data\n\n    def split_text(self) -> List[Data]:\n        separator = unescape_string(self.separator)\n\n        documents = []\n        for _input in self.data_inputs:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n\n        splitter = CharacterTextSplitter(\n            chunk_overlap=self.chunk_overlap,\n            chunk_size=self.chunk_size,\n            separator=separator,\n        )\n        docs = splitter.split_documents(documents)\n        data = self._docs_to_data(docs)\n        self.status = data\n        return data\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "separator": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "separator",
                "value": "",
                "display_name": "Separator",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The character to split on. Defaults to newline.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Split text into chunks based on specified criteria.",
            "icon": "scissors-line-dashed",
            "base_classes": [
              "Data"
            ],
            "display_name": "Split Text",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "chunks",
                "display_name": "Chunks",
                "method": "split_text",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data_inputs",
              "chunk_overlap",
              "chunk_size",
              "separator"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.19.post1"
          },
          "id": "SplitText-wugaX"
        },
        "selected": false,
        "width": 384,
        "height": 506,
        "positionAbsolute": {
          "x": 512.4467562413811,
          "y": 1370.6502508161032
        },
        "dragging": false
      },
      {
        "id": "DelimitedTextExtractor-DuExH",
        "type": "genericNode",
        "position": {
          "x": 11.045221447844597,
          "y": 640.258830930487
        },
        "data": {
          "type": "DelimitedTextExtractor",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import re\r\nfrom langflow.base.io.text import TextComponent\r\nfrom langflow.io import MultilineInput, Output\r\nfrom langflow.schema.message import Message\r\n\r\nclass DelimitedTextExtractor(TextComponent):\r\n    display_name = \"Delimited Text Extractor\"\r\n    description = \"Extract specific data from the text.\"\r\n    icon = \"type\"\r\n    name = \"DelimitedTextExtractor\"\r\n\r\n    inputs = [\r\n        MultilineInput(\r\n            name=\"input_value\",\r\n            display_name=\"Text\",\r\n            info=\"Text to be processed. For example: 2330, 2317\",\r\n        ),\r\n    ]\r\n    outputs = [\r\n        Output(display_name=\"Output 1\", name=\"stock_code_1\", method=\"extract_first_stock_code\"),\r\n        Output(display_name=\"Output 2\", name=\"stock_code_2\", method=\"extract_second_stock_code\"),\r\n        Output(display_name=\"Multiple stock code?\", name=\"has_multiple_stock_codes\", method=\"extract_has_multiple_stock_codes\"),\r\n    ]\r\n\r\n    def extract_first_stock_code(self) -> Message:\r\n        stock_codes = [value.strip() for value in self.input_value.split(',')]\r\n        first_stock_code = stock_codes[0]\r\n\r\n        self.status = first_stock_code\r\n        return first_stock_code\r\n\r\n    def extract_second_stock_code(self) -> Message:\r\n        stock_codes = [value.strip() for value in self.input_value.split(',')]\r\n        second_stock_code = stock_codes[1] if len(stock_codes) > 1 else stock_codes[0]\r\n\r\n        self.status = second_stock_code\r\n        return second_stock_code\r\n\r\n    def extract_has_multiple_stock_codes(self) -> Message:\r\n        stock_codes = [value.strip() for value in self.input_value.split(',')]\r\n        has_multiple = \"true\" if len(stock_codes) > 1 else \"false\"\r\n\r\n        self.status = has_multiple\r\n        return has_multiple\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be processed. For example: 2330, 2317",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Extract specific data from the text.",
            "icon": "type",
            "base_classes": [
              "Message"
            ],
            "display_name": "Custom Component",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "stock_code_1",
                "display_name": "Output 1",
                "method": "extract_first_stock_code",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "stock_code_2",
                "display_name": "Output 2",
                "method": "extract_second_stock_code",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "has_multiple_stock_codes",
                "display_name": "Multiple stock code?",
                "method": "extract_has_multiple_stock_codes",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "edited": true,
            "metadata": {},
            "lf_version": "1.0.19.post1"
          },
          "id": "DelimitedTextExtractor-DuExH"
        },
        "selected": false,
        "width": 384,
        "height": 367,
        "dragging": false,
        "positionAbsolute": {
          "x": 11.045221447844597,
          "y": 640.258830930487
        }
      },
      {
        "id": "CombineText-f69Bh",
        "type": "genericNode",
        "position": {
          "x": 516.4557044299722,
          "y": 828.3946500859352
        },
        "data": {
          "type": "CombineText",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass CombineTextComponent(Component):\n    display_name = \"Combine Text\"\n    description = \"Concatenate two text sources into a single text chunk using a specified delimiter.\"\n    icon = \"merge\"\n    name = \"CombineText\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"text1\",\n            display_name=\"First Text\",\n            info=\"The first text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"text2\",\n            display_name=\"Second Text\",\n            info=\"The second text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"delimiter\",\n            display_name=\"Delimiter\",\n            info=\"A string used to separate the two text inputs.\",\n            value=\" \",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Combined Text\", name=\"combined_text\", method=\"combine_texts\"),\n    ]\n\n    def combine_texts(self) -> str:\n        delimiter = self.delimiter if self.delimiter is not None else \"\"\n        combined = delimiter.join([self.text1, self.text2])\n        self.status = combined\n        return combined\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "delimiter": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "delimiter",
                "value": "",
                "display_name": "Delimiter",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "A string used to separate the two text inputs.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "text1": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text1",
                "value": "https://goodinfo.tw/tw/StockFinDetail.asp?RPT_CAT=BS_M_QUAR&STOCK_ID=",
                "display_name": "First Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The first text input to concatenate.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "text2": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text2",
                "value": "",
                "display_name": "Second Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The second text input to concatenate.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Concatenate two text sources into a single text chunk using a specified delimiter.",
            "icon": "merge",
            "base_classes": [
              "Text"
            ],
            "display_name": "Combine Text",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Text"
                ],
                "selected": "Text",
                "name": "combined_text",
                "display_name": "Combined Text",
                "method": "combine_texts",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "text1",
              "text2",
              "delimiter"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.19.post1"
          },
          "id": "CombineText-f69Bh"
        },
        "selected": false,
        "width": 384,
        "height": 474,
        "positionAbsolute": {
          "x": 516.4557044299722,
          "y": 828.3946500859352
        },
        "dragging": false
      },
      {
        "id": "FirecrawlScrapeApi-kA7Ws",
        "type": "genericNode",
        "position": {
          "x": 1009.0094655968155,
          "y": 777.5655853792493
        },
        "data": {
          "type": "FirecrawlScrapeApi",
          "node": {
            "template": {
              "_type": "CustomComponent",
              "extractorOptions": {
                "type": "Data | None",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "name": "extractorOptions",
                "display_name": "Extractor Options",
                "advanced": false,
                "dynamic": false,
                "info": "The extractor options to send with the request.",
                "load_from_db": false,
                "title_case": false
              },
              "pageOptions": {
                "type": "Data | None",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "name": "pageOptions",
                "display_name": "Page Options",
                "advanced": false,
                "dynamic": false,
                "info": "The page options to send with the request.",
                "load_from_db": false,
                "title_case": false
              },
              "api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "api_key",
                "display_name": "API Key",
                "advanced": false,
                "dynamic": false,
                "info": "The API key to use Firecrawl API.",
                "load_from_db": true,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": null
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import CustomComponent\nfrom langflow.schema import Data\n\n\nclass FirecrawlScrapeApi(CustomComponent):\n    display_name: str = \"FirecrawlScrapeApi\"\n    description: str = \"Firecrawl Scrape API.\"\n    name = \"FirecrawlScrapeApi\"\n\n    output_types: list[str] = [\"Document\"]\n    documentation: str = \"https://docs.firecrawl.dev/api-reference/endpoint/scrape\"\n    field_config = {\n        \"api_key\": {\n            \"display_name\": \"API Key\",\n            \"field_type\": \"str\",\n            \"required\": True,\n            \"password\": True,\n            \"info\": \"The API key to use Firecrawl API.\",\n        },\n        \"url\": {\n            \"display_name\": \"URL\",\n            \"field_type\": \"str\",\n            \"required\": True,\n            \"info\": \"The URL to scrape.\",\n        },\n        \"timeout\": {\n            \"display_name\": \"Timeout\",\n            \"info\": \"Timeout in milliseconds for the request.\",\n            \"field_type\": \"int\",\n            \"default_value\": 10000,\n        },\n        \"pageOptions\": {\n            \"display_name\": \"Page Options\",\n            \"info\": \"The page options to send with the request.\",\n        },\n        \"extractorOptions\": {\n            \"display_name\": \"Extractor Options\",\n            \"info\": \"The extractor options to send with the request.\",\n        },\n    }\n\n    def build(\n        self,\n        api_key: str,\n        url: str,\n        timeout: int = 10000,\n        pageOptions: Data | None = None,\n        extractorOptions: Data | None = None,\n    ) -> Data:\n        try:\n            from firecrawl.firecrawl import FirecrawlApp\n        except ImportError as e:\n            msg = \"Could not import firecrawl integration package. Please install it with `pip install firecrawl-py`.\"\n            raise ImportError(msg) from e\n        extractor_options_dict = extractorOptions.__dict__[\"data\"][\"text\"] if extractorOptions else {}\n\n        page_options_dict = pageOptions.__dict__[\"data\"][\"text\"] if pageOptions else {}\n\n        app = FirecrawlApp(api_key=api_key)\n        results = app.scrape_url(\n            url,\n            {\n                \"timeout\": str(timeout),\n                \"extractorOptions\": extractor_options_dict,\n                \"pageOptions\": page_options_dict,\n            },\n        )\n\n        return Data(data=results)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "timeout": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 10000,
                "fileTypes": [],
                "file_path": "",
                "name": "timeout",
                "display_name": "Timeout",
                "advanced": false,
                "dynamic": false,
                "info": "Timeout in milliseconds for the request.",
                "load_from_db": false,
                "title_case": false
              },
              "url": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "name": "url",
                "display_name": "URL",
                "advanced": false,
                "dynamic": false,
                "info": "The URL to scrape.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              }
            },
            "description": "Firecrawl Scrape API.",
            "base_classes": [
              "Data"
            ],
            "display_name": "FirecrawlScrapeApi",
            "documentation": "https://docs.firecrawl.dev/api-reference/endpoint/scrape",
            "custom_fields": {
              "api_key": null,
              "url": null,
              "timeout": null,
              "pageOptions": null,
              "extractorOptions": null
            },
            "output_types": [
              "Data"
            ],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "hidden": null,
                "display_name": "Data",
                "method": null,
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null
              }
            ],
            "field_order": [
              "api_key",
              "url",
              "timeout",
              "pageOptions",
              "extractorOptions"
            ],
            "beta": false,
            "edited": false,
            "metadata": {}
          },
          "id": "FirecrawlScrapeApi-kA7Ws",
          "description": "Firecrawl Scrape API.",
          "display_name": "FirecrawlScrapeApi"
        },
        "selected": false,
        "width": 384,
        "height": 550,
        "positionAbsolute": {
          "x": 1009.0094655968155,
          "y": 777.5655853792493
        },
        "dragging": false
      },
      {
        "id": "Memory-gWgbP",
        "type": "genericNode",
        "position": {
          "x": -553.5310897189963,
          "y": 432.404199158747
        },
        "data": {
          "type": "Memory",
          "node": {
            "template": {
              "_type": "Component",
              "memory": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "memory",
                "value": "",
                "display_name": "External Memory",
                "advanced": false,
                "input_types": [
                  "BaseChatMessageHistory"
                ],
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain.memory import ConversationBufferMemory\n\nfrom langflow.custom import Component\nfrom langflow.field_typing import BaseChatMemory\nfrom langflow.helpers.data import data_to_text\nfrom langflow.inputs import HandleInput\nfrom langflow.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import LCBuiltinChatMemory, get_messages\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER\n\n\nclass MemoryComponent(Component):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages from Langflow tables or an external memory.\"\n    icon = \"message-square-more\"\n    name = \"Memory\"\n\n    inputs = [\n        HandleInput(\n            name=\"memory\",\n            display_name=\"External Memory\",\n            input_types=[\"BaseChatMessageHistory\"],\n            info=\"Retrieve messages from an external memory. If empty, it will use the Langflow tables.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Filter by sender type.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Filter by sender name.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Messages (Data)\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Messages (Text)\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n        Output(display_name=\"Memory\", name=\"lc_memory\", method=\"build_lc_memory\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        if self.memory:\n            # override session_id\n            self.memory.session_id = session_id\n\n            stored = self.memory.messages\n            # langchain memories are supposed to return messages in ascending order\n            if order == \"DESC\":\n                stored = stored[::-1]\n            if n_messages:\n                stored = stored[:n_messages]\n            stored = [Message.from_lc_message(m) for m in stored]\n            if sender:\n                expected_type = MESSAGE_SENDER_AI if sender == MESSAGE_SENDER_AI else MESSAGE_SENDER_USER\n                stored = [m for m in stored if m.type == expected_type]\n        else:\n            stored = get_messages(\n                sender=sender,\n                sender_name=sender_name,\n                session_id=session_id,\n                limit=n_messages,\n                order=order,\n            )\n        self.status = stored\n        return stored\n\n    def retrieve_messages_as_text(self) -> Message:\n        stored_text = data_to_text(self.template, self.retrieve_messages())\n        self.status = stored_text\n        return Message(text=stored_text)\n\n    def build_lc_memory(self) -> BaseChatMemory:\n        chat_memory = self.memory or LCBuiltinChatMemory(flow_id=self.flow_id, session_id=self.session_id)\n        return ConversationBufferMemory(chat_memory=chat_memory)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "n_messages": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "n_messages",
                "value": 100,
                "display_name": "Number of Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "order": {
                "trace_as_metadata": true,
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "order",
                "value": "Ascending",
                "display_name": "Order",
                "advanced": true,
                "dynamic": false,
                "info": "Order of the messages.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine and User",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Filter by sender type.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Filter by sender name.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{sender_name}: {text}",
                "display_name": "Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Retrieves stored chat messages from Langflow tables or an external memory.",
            "icon": "message-square-more",
            "base_classes": [
              "BaseChatMemory",
              "Data",
              "Message"
            ],
            "display_name": "Chat Memory",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "messages",
                "display_name": "Messages (Data)",
                "method": "retrieve_messages",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "messages_text",
                "display_name": "Messages (Text)",
                "method": "retrieve_messages_as_text",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "BaseChatMemory"
                ],
                "selected": "BaseChatMemory",
                "name": "lc_memory",
                "display_name": "Memory",
                "method": "build_lc_memory",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template"
            ],
            "beta": false,
            "edited": false,
            "metadata": {},
            "lf_version": "1.0.19.post1"
          },
          "id": "Memory-gWgbP",
          "description": "Retrieves stored chat messages from Langflow tables or an external memory.",
          "display_name": "Chat Memory"
        },
        "selected": false,
        "width": 384,
        "height": 346,
        "positionAbsolute": {
          "x": -553.5310897189963,
          "y": 432.404199158747
        },
        "dragging": false
      },
      {
        "id": "ParseData-knRbj",
        "type": "genericNode",
        "position": {
          "x": 1495.6645894462517,
          "y": 1119.9369671127786
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_metadata": true,
                "list": false,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{content}",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false,
            "metadata": {},
            "lf_version": "1.0.19.post1"
          },
          "id": "ParseData-knRbj",
          "description": "Convert Data into plain text following a specified template.",
          "display_name": "Parse Data"
        },
        "selected": false,
        "width": 384,
        "height": 351,
        "positionAbsolute": {
          "x": 1495.6645894462517,
          "y": 1119.9369671127786
        },
        "dragging": false
      },
      {
        "id": "MergeDataComponent-hLoNX",
        "type": "genericNode",
        "position": {
          "x": 11.40068205166358,
          "y": 1241.8401297863804
        },
        "data": {
          "type": "MergeDataComponent",
          "node": {
            "template": {
              "_type": "Component",
              "data_inputs": {
                "trace_as_metadata": true,
                "list": true,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data_inputs",
                "value": "",
                "display_name": "Data Inputs",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "A list of Data inputs objects to be merged.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from loguru import logger\n\nfrom langflow.custom import Component\nfrom langflow.io import DataInput, Output\nfrom langflow.schema import Data\n\n\nclass MergeDataComponent(Component):\n    \"\"\"\n    MergeDataComponent is responsible for combining multiple Data objects into a unified list of Data objects.\n    It ensures that all keys across the input Data objects are present in each merged Data object.\n    Missing keys are filled with empty strings to maintain consistency.\n    \"\"\"\n\n    display_name = \"Merge Data\"\n    description = (\n        \"Combines multiple Data objects into a unified list, ensuring all keys are present in each Data object.\"\n    )\n    icon = \"merge\"\n\n    inputs = [\n        DataInput(\n            name=\"data_inputs\",\n            display_name=\"Data Inputs\",\n            is_list=True,\n            info=\"A list of Data inputs objects to be merged.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Merged Data\",\n            name=\"merged_data\",\n            method=\"merge_data\",\n        ),\n    ]\n\n    def merge_data(self) -> list[Data]:\n        \"\"\"\n        Merges multiple Data objects into a single list of Data objects.\n        Ensures that all keys from the input Data objects are present in each merged Data object.\n        Missing keys are filled with empty strings.\n\n        Returns:\n            List[Data]: A list of merged Data objects with consistent keys.\n        \"\"\"\n        logger.info(\"Initiating the data merging process.\")\n\n        try:\n            data_inputs: list[Data] = self.data_inputs\n            logger.debug(f\"Received {len(data_inputs)} data input(s) for merging.\")\n\n            if not data_inputs:\n                logger.warning(\"No data inputs provided. Returning an empty list.\")\n                return []\n\n            # Collect all unique keys from all Data objects\n            all_keys: set[str] = set()\n            for idx, data_input in enumerate(data_inputs):\n                if not isinstance(data_input, Data):\n                    error_message = f\"Data input at index {idx} is not of type Data.\"\n                    logger.error(error_message)\n                    type_error_message = (\n                        \"All items in data_inputs must be of type Data. \" f\"Item at index {idx} is {type(data_input)}\"\n                    )\n                    raise TypeError(type_error_message)\n                all_keys.update(data_input.data.keys())\n            logger.debug(f\"Collected {len(all_keys)} unique key(s) from input data.\")\n\n            # Create new list of Data objects with missing keys filled with empty strings\n            merged_data_list = []\n            for idx, data_input in enumerate(data_inputs):\n                merged_data_dict = {}\n\n                for key in all_keys:\n                    # Use the existing value if the key exists, otherwise use an empty string\n                    value = data_input.data.get(key, \"\")\n                    if key not in data_input.data:\n                        log_message = f\"Key '{key}' missing in data input at index {idx}. \" \"Assigning empty string.\"\n                        logger.debug(log_message)\n                    merged_data_dict[key] = value\n\n                merged_data = Data(\n                    text_key=data_input.text_key, data=merged_data_dict, default_value=data_input.default_value\n                )\n                merged_data_list.append(merged_data)\n                logger.debug(\"Merged Data object created for input at index: \" + str(idx))\n\n            logger.info(\"Data merging process completed successfully.\")\n            return merged_data_list\n\n        except Exception:\n            logger.exception(\"An error occurred during the data merging process.\")\n            raise\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              }
            },
            "description": "Combines multiple Data objects into a unified list, ensuring all keys are present in each Data object.",
            "icon": "merge",
            "base_classes": [
              "Data"
            ],
            "display_name": "Merge Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "merged_data",
                "display_name": "Merged Data",
                "method": "merge_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data_inputs"
            ],
            "beta": false,
            "edited": false,
            "metadata": {},
            "lf_version": "1.0.19.post1"
          },
          "id": "MergeDataComponent-hLoNX",
          "description": "Combines multiple Data objects into a unified list, ensuring all keys are present in each Data object.",
          "display_name": "Merge Data"
        },
        "selected": false,
        "width": 384,
        "height": 282,
        "positionAbsolute": {
          "x": 11.40068205166358,
          "y": 1241.8401297863804
        },
        "dragging": false
      },
      {
        "id": "DelimitedTextExtractor-1yjk4",
        "type": "genericNode",
        "position": {
          "x": 1994.7131509616215,
          "y": 631.6346698838272
        },
        "data": {
          "type": "DelimitedTextExtractor",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import re\r\nfrom langflow.base.io.text import TextComponent\r\nfrom langflow.io import MultilineInput, Output\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass DelimitedTextExtractor(TextComponent):\r\n    display_name = \"Delimited Text Extractor\"\r\n    description = \"Extract text between specified start and end delimiters, then remove text between another set of delimiters.\"\r\n    icon = \"type\"\r\n    name = \"DelimitedTextExtractor\"\r\n\r\n    inputs = [\r\n        MultilineInput(\r\n            name=\"input_value\",\r\n            display_name=\"Text\",\r\n            info=\"Text to be processed.\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"retrieve_start_delimiter\",\r\n            display_name=\"Retrieve Start Delimiter\",\r\n            info=\"The starting text delimiter for extraction.\",\r\n            value=\"retrieve_start\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"retrieve_end_delimiter\",\r\n            display_name=\"Retrieve End Delimiter\",\r\n            info=\"The ending text delimiter for extraction.\",\r\n            value=\"retrieve_end\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"remove_start_delimiter\",\r\n            display_name=\"Remove Start Delimiter\",\r\n            info=\"The starting text delimiter for removal.\",\r\n            value=\"remove_start\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"remove_end_delimiter\",\r\n            display_name=\"Remove End Delimiter\",\r\n            info=\"The ending text delimiter for removal.\",\r\n            value=\"remove_end\",\r\n        ),\r\n    ]\r\n    outputs = [\r\n        Output(display_name=\"Extracted Data\", name=\"extracted_data\", method=\"extract_data_between_delimiters\"),\r\n    ]\r\n\r\n    def extract_data_between_delimiters(self) -> Data:\r\n        start = re.escape(self.retrieve_start_delimiter)\r\n        end = re.escape(self.retrieve_end_delimiter)\r\n        extract_pattern = f\"{start}(.*?){end}\"\r\n        \r\n        match = re.search(extract_pattern, self.input_value, re.DOTALL)\r\n        if match:\r\n            extracted_text = match.group(1).strip()\r\n        else:\r\n            extracted_text = f\"No content found between '{self.retrieve_start_delimiter}' and '{self.retrieve_end_delimiter}'.\"\r\n        \r\n        remove_start = re.escape(self.remove_start_delimiter)\r\n        remove_end = re.escape(self.remove_end_delimiter)\r\n        remove_pattern = f\"(?<={remove_start})(.*?){remove_end}\"\r\n        modified_extracted_text = re.sub(remove_pattern, '', extracted_text, flags=re.DOTALL)\r\n\r\n        modified_extracted_text = re.sub(r'\\n\\s*\\n+', '\\n', modified_extracted_text)\r\n\r\n        self.status = modified_extracted_text\r\n        return Data(data={\"text\": modified_extracted_text})\r\n\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be processed.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "remove_end_delimiter": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "remove_end_delimiter",
                "value": "(載入中)",
                "display_name": "Remove End Delimiter",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The ending text delimiter for removal.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "remove_start_delimiter": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "remove_start_delimiter",
                "value": "(單位:億元)",
                "display_name": "Remove Start Delimiter",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The starting text delimiter for removal.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "retrieve_end_delimiter": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "retrieve_end_delimiter",
                "value": "| 財務報告書–公開資訊觀測站 |",
                "display_name": "Retrieve End Delimiter",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The ending text delimiter for extraction.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "retrieve_start_delimiter": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "retrieve_start_delimiter",
                "value": "非公司正規財報，僅供參考。",
                "display_name": "Retrieve Start Delimiter",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The starting text delimiter for extraction.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Extract text between specified start and end delimiters, then remove text between another set of delimiters.",
            "icon": "type",
            "base_classes": [
              "Data"
            ],
            "display_name": "Custom Component",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "extracted_data",
                "display_name": "Extracted Data",
                "method": "extract_data_between_delimiters",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "retrieve_start_delimiter",
              "retrieve_end_delimiter",
              "remove_start_delimiter",
              "remove_end_delimiter"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.19.post1"
          },
          "id": "DelimitedTextExtractor-1yjk4"
        },
        "selected": false,
        "width": 384,
        "height": 661,
        "positionAbsolute": {
          "x": 1994.7131509616215,
          "y": 631.6346698838272
        },
        "dragging": false
      },
      {
        "id": "TextInput-Wk3T7",
        "type": "genericNode",
        "position": {
          "x": 1495.809946451844,
          "y": 805.6703305876104
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "|     |\n| --- |\n|  |\n\n|     |\n| --- |\n|  |\n\n|  |  |  |\n|  |  | | | ## [2317 鴻海](StockDetail.asp?STOCK_ID=2317)<br>期貨標的選擇權標的權證標的資料日期: 11/11 |\n| --- |\n| 成交價 | 昨收 | 漲跌價 | 漲跌幅 | 振幅 | 開盤 | 最高 | 最低 |\n| 220 | 218 | +2 | +0.92% | 1.15% | 219.5 | 220 | 217.5 |\n| 成交張數 | 成交金額 | 成交筆數 | 成交均張 | 成交均價 | PBR | PER | PEG |\n| 42,005 | 91.96億 | 31,175 | 1.3張/筆 | 218.9元 | 2 | 19.87 | 0.86 |\n| 昨日張數 | 昨日金額 | 昨日筆數 | 昨日均張 | 昨日均價 | 昨漲跌價 (幅) |\n| 54,801 | 119.9億 | 51,977 | 1.1張/筆 | 218.7元 | +1 (+0.46%) |\n| 連漲連跌: 連3漲  ( +6.5元 / +3.04%)<br>財報評分: [最新40分](StockFinGrade.asp?STOCK_ID=2317&RPT_CAT=M_YEAR \"最近一個財報年度的評分\") / 平均40分[上市指數](StockIdxDetail.asp?STOCK_ID=%E5%8A%A0%E6%AC%8A%E6%8C%87%E6%95%B8): 23529.64 (-24.25 / -0.1%) | |  | |     |\n| --- |\n| ## [最新訊息](StockAnnounceList.asp?STOCK_ID=2317&START_DT=2024%2F10%2F12&END_DT=2024%2F11%2F11) |\n\n|     |     |\n| --- | --- |\n| • | [快訊／台股收盤下跌24.25點　台積電跌5元至1085](https://finance.ettoday.net/news/2852632)  (ETtoday新聞雲 2小時前) |\n| • | [川普2.0免驚！3法人看「台股攻3萬」可期　AI等3題材最關鍵](https://finance.ettoday.net/news/2852533)  (ETtoday新聞雲 4小時前) |\n| • | [〈台股開盤〉台積電領跌電子股 一度大跌220點力守5日線](https://news.cnyes.com/news/id/5773521?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/11 09:29) |\n| • | [快訊／台積電跌10元至1080　台股開盤下跌76點](https://finance.ettoday.net/news/2852394)  (ETtoday新聞雲 11/11 09:02) |\n| • | [〈台股風向球〉川普行情美股飆新高 台股回歸基本面拚叩關2萬4](https://news.cnyes.com/news/id/5772848?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/10 12:10) |\n| • | [AI需求大爆發! HBM與矽光子技術缺一不可，提前卡位2025：台積電、創意、鴻海、穎崴](https://news.cnyes.com/news/id/5770982?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/10 09:10) |\n| • | [〈熱門股〉富鼎搭鴻家軍熱潮 周漲24%創近一年高](https://news.cnyes.com/news/id/5772974?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/09 11:29) |\n| • | [【新台股龍捲風】台積電營收炒熱下週氣氛！全球資金搶股，產品搶貨！](https://news.cnyes.com/news/id/5771952?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/08 17:21) |\n| • | [期貨狂拉尾盤 正價差227點! 軋空行情正式啟動：創意、技嘉、00937B、00733、鴻海、保瑞、美時](https://news.cnyes.com/news/id/5771853?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/08 17:17) |\n| • | [〈台股盤後〉台積電帶動漲145點靠攏前高 周線收紅漲773點](https://news.cnyes.com/news/id/5770313?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/08 14:34) |\n| • | [台股收盤大漲145.07點　台積電漲25元至1090](https://finance.ettoday.net/news/2851076)  (ETtoday新聞雲 11/08 14:32) |\n| • | [快訊／台積電漲20元至1085　台股開盤大漲199點](https://finance.ettoday.net/news/2850817)  (ETtoday新聞雲 11/08 09:02) |\n| • | [【鑫攻略早報】華星光 矽統 華城 長榮 0061 00882!!](https://news.cnyes.com/news/id/5769556?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/08 07:32) |\n| • | [三大法人買超台股131億元 但外資從台積電提款130億元](https://news.cnyes.com/news/id/5768964?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/07 18:33) |\n| • | [震盪果然結束，有未來有營收有題材的個股，就是【財富自由】](https://news.cnyes.com/news/id/5768359?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/07 18:00) |\n| • | [美選後外資回補54億 三大法人聯手買超131.66億元](https://news.cnyes.com/news/id/5768085?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/07 15:00) |\n| • | [〈台股盤後〉鴻家軍+晶圓雙雄將士用命 收漲191點日K線連5紅](https://news.cnyes.com/news/id/5767916?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/07 14:06) |\n| • | [快訊／台股收漲191.44點　台積電漲5元至1065](https://finance.ettoday.net/news/2850392)  (ETtoday新聞雲 11/07 13:35) |\n| • | [鴻準亮燈刷7年新高　外資看好「2主力業務」目標價喊115](https://finance.ettoday.net/news/2850224)  (ETtoday新聞雲 11/07 10:47) |\n| • | [〈焦點股〉輝達GB200迎出貨潮 鴻準股價當紅不讓攻上漲停](https://news.cnyes.com/news/id/5767508?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/07 10:03) |\n| • | [〈台股開盤〉川普勝選餘溫 台積電小跌10元開出後翻紅 上沖下洗300點](https://news.cnyes.com/news/id/5767435?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/07 09:51) |\n| • | [快訊／台積電跌10元至1050　台股開盤下跌37點](https://finance.ettoday.net/news/2850109)  (ETtoday新聞雲 11/07 09:02) |\n| • | [【量大強漲股整理】輝達市值重返榮耀，Q4主流該鎖定誰?AI股誰有潛力?](https://news.cnyes.com/news/id/5766777?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/06 18:13) |\n| • | [【新台股龍捲風】 我川威武！雙11專案啟動 接下來台廠該如何應對？](https://news.cnyes.com/news/id/5766590?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/06 17:55) |\n| • | [鴻海113年第3季財務報告董事會預計召開日期為 113年11月14日](StockAnnounceDetail.asp?STOCK_ID=2317&CLAIM_TIME=2024%2F11%2F06+17%3A28%3A30)  (公告訊息 11/06 17:28) |\n| • | [〈台股盤後〉美大選開票川普領先 川概股齊歡呼 收漲110點收復10日線](https://news.cnyes.com/news/id/5765746?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/06 14:18) |\n| • | [快訊／台股收盤大漲110.59點　台積電漲10元至1060](https://finance.ettoday.net/news/2849651)  (ETtoday新聞雲 11/06 13:35) |\n| • | [不是鴻海、不是廣達！ 美大選後爆發力最強的AI股換「它」接棒！](https://news.cnyes.com/news/id/5765454?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/06 11:13) |\n| • | [〈台股開盤〉美大選計票川普領先 台股不表態踞守2萬3及月線觀望](https://news.cnyes.com/news/id/5765210?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/06 09:36) |\n| • | [快訊／台積電持平至1050　台股開盤上漲6點](https://finance.ettoday.net/news/2849367)  (ETtoday新聞雲 11/06 09:02) |\n| • | [【量大強漲股整理】老AI果真動起來，有機會成為Q4主流?貨櫃航運有機會延續買盤?](https://news.cnyes.com/news/id/5764613?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/05 18:16) |\n| • | [鴻海10月營收8048億元月增8% 創同期新高 展望Q4年季雙增](https://news.cnyes.com/news/id/5764118?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/05 16:28) |\n| • | [鴻海10月營收8048億元「寫單月次高」　旺季加持Q4可望年季雙增](https://finance.ettoday.net/news/2849010)  (ETtoday新聞雲 11/05 16:06) |\n| • | [〈台股盤後〉尾盤急拉收漲141點 強行躍過23000點並收復月線](https://news.cnyes.com/news/id/5763828?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/05 13:58) |\n| • | [快訊／台股收盤大漲141.4點　台積電漲10元至1050](https://finance.ettoday.net/news/2848889)  (ETtoday新聞雲 11/05 13:35) |\n| • | [機器人起飛！羅昇、穎漢等5檔飆漲停　「黃仁勳妖股」也紅燈高掛](https://finance.ettoday.net/news/2848742)  (ETtoday新聞雲 11/05 11:12) |\n| • | [〈台股開盤〉美國大選、北韓疑射飛彈 開低後戲劇性漲逾200點 拿下2萬3大關](https://news.cnyes.com/news/id/5763410?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/05 09:54) |\n| • | [快訊／台積電跌10元至1030　台股開盤下跌95點](https://finance.ettoday.net/news/2848590)  (ETtoday新聞雲 11/05 09:02) |\n| • | [【鑫攻略早報】美國大選將至!多頭未變!但請耐心等候!!](https://news.cnyes.com/news/id/5763206?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/05 07:31) |\n| • | [量子通訊大突破！鴻海研究院與劍橋大學合作　成果發表國際期刊](https://finance.ettoday.net/news/2848208)  (ETtoday新聞雲 11/04 15:58) |\n| • | [〈台股盤後〉美大選前觀望量縮 台積電、AI股帶動漲185點 未收復2萬3](https://news.cnyes.com/news/id/5762214?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/04 14:03) |\n| • | [台積電漲15元至1040　指數收漲185點收22965](https://finance.ettoday.net/news/2848170)  (ETtoday新聞雲 11/04 13:38) |\n| • | [台股早盤漲逾百點！居家、運動翻強　最高漲逾7%](https://finance.ettoday.net/news/2848147)  (ETtoday新聞雲 11/04 13:32) |\n| • | [訊芯-KY再擴CPO產能 擬斥資8000萬美元在越南建第四座廠](https://news.cnyes.com/news/id/5762122?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/04 13:09) |\n| • | [〈台股開盤〉電子權值挺身 上漲逾百點挑戰2萬3大關](https://news.cnyes.com/news/id/5761770?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/04 09:31) |\n| • | [鴻海旗下武漢富士康攜湖北科技職業學院 成立模具訂單班](https://news.cnyes.com/news/id/5761513?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/03 09:32) |\n| • | [〈熱門股〉鴻準搭上鴻家軍GB200出貨潮 獲法人狂敲5.2萬張](https://news.cnyes.com/news/id/5761285?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/02 09:59) |\n| • | [【量大強漲股整理】迎接11月台股有機會先蹲後跳，四大主流報你知?](https://news.cnyes.com/news/id/5761084?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/01 18:15) |\n| • | [代子公司Foxconn (Far East) Limited-Cayman公告董事會決議發放現金股利](StockAnnounceDetail.asp?STOCK_ID=2317&CLAIM_TIME=2024%2F11%2F01+17%3A25%3A48)  (公告訊息 11/01 17:25) |\n| • | [外資賣超213億元 連13賣聯電 回補海運三雄共4.7萬張](https://news.cnyes.com/news/id/5760842?utm_source=RWtaTXdQNjF2MkRWZDBscg==&utm_medium=NewsApi)  (Anue鉅亨 11/01 17:25) | |\n\n\\* 因IFRSs實施，2013年Q1後的資料，皆以合併財報顯示。\n\n\\*「近四季財報」為本站自行計算，非公司正規財報，僅供參考。\n\n## 2317 鴻海單季資產負債表 (合併)\n\n(單位:億元)\n\n合併報表 – 單季合併報表 – 年度個別報表 – 單季個別報表 – 年度匯出：**(載入中)\n\n| 資產 | 2024Q2 | 2024Q1 | 2023Q4 | 2023Q3 | 2023Q2 | 2023Q1 | 2022Q4 |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| 金額 | ％ | 金額 | ％ | 金額 | ％ | 金額 | ％ | 金額 | ％ | 金額 | ％ | 金額 | ％ |\n| 現金及約當現金 | 10,487 | 26.4 | 11,634 | 30.8 | 11,977 | 30.4 | 12,080 | 29.7 | 11,877 | 31.6 | 11,195 | 30.6 | 10,623 | 25.7 |\n| 透過損益按公允價值衡量之金融資產–流動 | 49.27 | 0.12 | 42.89 | 0.11 | 66.69 | 0.17 | 64.85 | 0.16 | 44.02 | 0.12 | 41.28 | 0.11 | 46.64 | 0.11 |\n| 透過其他綜合損益按公允價值衡量之金融資產–流動 | - | - | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0.44 | 0 | 0.44 | 0 |\n| 按攤銷後成本衡量之金融資產–流動 | 2,031 | 5.12 | 1,377 | 3.65 | 1,457 | 3.7 | 842 | 2.07 | 445.4 | 1.18 | 309.3 | 0.85 | 177 | 0.43 |\n| 避險之金融資產–流動 | 0 | 0 | 0 | 0 | - | - | 0.011 | 0 | 0.22 | 0 | 3.77 | 0.01 | 0 | 0 |\n| 應收帳款 | 8,436 | 21.3 | 7,009 | 18.6 | 8,564 | 21.7 | 9,651 | 23.7 | 7,725 | 20.5 | 6,757 | 18.5 | 10,610 | 25.7 |\n| 應收帳款–關係人 | 179.7 | 0.45 | 111.9 | 0.3 | 159.1 | 0.4 | 240.1 | 0.59 | 184.4 | 0.49 | 279.9 | 0.76 | 377.1 | 0.91 |\n| 其他應收款 | 523.7 | 1.32 | 511.9 | 1.36 | 613.3 | 1.56 | 672.3 | 1.65 | 622.9 | 1.66 | 606.8 | 1.66 | 560 | 1.35 |\n| 其他應收款–關係人 | 75.94 | 0.19 | 58.42 | 0.15 | 33.81 | 0.09 | 23.79 | 0.06 | 60.06 | 0.16 | 37.59 | 0.1 | 17.2 | 0.04 |\n| 應收款項合計 | 9,216 | 23.2 | 7,691 | 20.4 | 9,370 | 23.8 | 10,587 | 26.1 | 8,592 | 22.8 | 7,681 | 21 | 11,564 | 28 |\n| 存貨 | 8,085 | 20.4 | 7,532 | 20 | 7,308 | 18.5 | 7,723 | 19 | 7,588 | 20.2 | 8,132 | 22.2 | 9,390 | 22.7 |\n| 預付款項 | 176.7 | 0.45 | 186.4 | 0.49 | 164.1 | 0.42 | 191.5 | 0.47 | 147.9 | 0.39 | 212.5 | 0.58 | 172.8 | 0.42 |\n| 其他流動資產 | 18.24 | 0.05 | 19.18 | 0.05 | 17.36 | 0.04 | 17.32 | 0.04 | 14.17 | 0.04 | 19.38 | 0.05 | 30.59 | 0.07 |\n| 流動資產合計 | 30,062 | 75.8 | 28,483 | 75.5 | 30,360 | 77.1 | 31,506 | 77.5 | 28,710 | 76.3 | 27,595 | 75.4 | 32,005 | 77.4 |\n| 透過損益按公允價值衡量之金融資產–非流動 | 955 | 2.41 | 914.4 | 2.42 | 874.5 | 2.22 | 927.7 | 2.28 | 903.9 | 2.4 | 890.4 | 2.43 | 884 | 2.14 |\n| 透過其他綜合損益按公允價值衡量之金融資產–非流動 | 921.9 | 2.32 | 916.8 | 2.43 | 864.9 | 2.2 | 786.2 | 1.93 | 812.1 | 2.16 | 857.9 | 2.34 | 845.9 | 2.05 |\n| 按攤銷後成本衡量之金融資產–非流動 | 94.93 | 0.24 | 95.66 | 0.25 | 110 | 0.28 | 73.97 | 0.18 | 54.86 | 0.15 | 68.69 | 0.19 | 129.1 | 0.31 |\n| 採用權益法之投資 | 1,966 | 4.96 | 1,850 | 4.9 | 1,985 | 5.04 | 2,008 | 4.94 | 2,025 | 5.38 | 2,060 | 5.63 | 2,395 | 5.79 |\n| 投資性不動產 | 94.78 | 0.24 | 96.53 | 0.26 | 97.1 | 0.25 | 100.4 | 0.25 | 100.2 | 0.27 | 102.7 | 0.28 | 104.4 | 0.25 |\n| 投資合計 | 4,033 | 10.2 | 3,874 | 10.3 | 3,931 | 9.98 | 3,896 | 9.59 | 3,896 | 10.4 | 3,980 | 10.9 | 4,358 | 10.5 |\n| 固定資產合計 | 4,242 | 10.7 | 4,104 | 10.9 | 3,940 | 10 | 3,832 | 9.43 | 3,637 | 9.67 | 3,666 | 10 | 3,624 | 8.77 |\n| 使用權資產 | 504.4 | 1.27 | 454.5 | 1.2 | 413.3 | 1.05 | 413.8 | 1.02 | 410.1 | 1.09 | 418.6 | 1.14 | 404.1 | 0.98 |\n| 無形資產合計 | 409.3 | 1.03 | 404.7 | 1.07 | 396 | 1.01 | 505.3 | 1.24 | 456.8 | 1.21 | 454.4 | 1.24 | 466.6 | 1.13 |\n| 遞延所得稅資產 | 203.1 | 0.51 | 204.3 | 0.54 | 202 | 0.51 | 197.8 | 0.49 | 207.5 | 0.55 | 216.7 | 0.59 | 207.6 | 0.5 |\n| 其他資產–其他 | 214.2 | 0.54 | 212.8 | 0.56 | 155.9 | 0.4 | 283.5 | 0.7 | 308.4 | 0.82 | 262.7 | 0.72 | 274.1 | 0.66 |\n| 其他資產合計 | 214.2 | 0.54 | 212.8 | 0.56 | 155.9 | 0.4 | 283.5 | 0.7 | 308.4 | 0.82 | 262.7 | 0.72 | 274.1 | 0.66 |\n| 非流動資產合計 | 9,606 | 24.2 | 9,254 | 24.5 | 9,038 | 22.9 | 9,128 | 22.5 | 8,916 | 23.7 | 8,998 | 24.6 | 9,335 | 22.6 |\n| 資產總額 | 39,668 | 100 | 37,736 | 100 | 39,398 | 100 | 40,634 | 100 | 37,626 | 100 | 36,593 | 100 | 41,340 | 100 |\n| 負債 | 2024Q2 | 2024Q1 | 2023Q4 | 2023Q3 | 2023Q2 | 2023Q1 | 2022Q4 |\n| 金額 | ％ | 金額 | ％ | 金額 | ％ | 金額 | ％ | 金額 | ％ | 金額 | ％ | 金額 | ％ |\n| 短期借款 | 4,708 | 11.9 | 4,630 | 12.3 | 5,018 | 12.7 | 5,419 | 13.3 | 4,892 | 13 | 4,906 | 13.4 | 5,826 | 14.1 |\n| 應付短期票券 | 405.2 | 1.02 | 522 | 1.38 | 613.3 | 1.56 | 592 | 1.46 | 641.3 | 1.7 | 607.2 | 1.66 | 314.9 | 0.76 |\n| 透過損益按公允價值衡量之金融負債–流動 | 26.79 | 0.07 | 25.91 | 0.07 | 68.81 | 0.17 | 9.72 | 0.02 | 51.95 | 0.14 | 4.79 | 0.01 | 35.95 | 0.09 |\n| 避險之金融負債–流動 | - | - | 0 | 0 | - | - | 0 | 0 | 0 | 0 | 1 | 0 | - | - |\n| 應付帳款 | 8,798 | 22.2 | 7,192 | 19.1 | 8,789 | 22.3 | 9,377 | 23.1 | 7,614 | 20.2 | 6,766 | 18.5 | 10,503 | 25.4 |\n| 應付帳款–關係人 | 113.3 | 0.29 | 96.17 | 0.25 | 141.8 | 0.36 | 183.8 | 0.45 | 128.6 | 0.34 | 164 | 0.45 | 186.8 | 0.45 |\n| 其他應付款 | 2,926 | 7.38 | 2,748 | 7.28 | 2,274 | 5.77 | 2,273 | 5.59 | 2,830 | 7.52 | 2,713 | 7.41 | 2,467 | 5.97 |\n| 應付款項合計 | 11,837 | 29.8 | 10,036 | 26.6 | 11,205 | 28.4 | 11,833 | 29.1 | 10,573 | 28.1 | 9,642 | 26.4 | 13,157 | 31.8 |\n| 本期所得稅負債 | 135.2 | 0.34 | 241.9 | 0.64 | 247.4 | 0.63 | 206.9 | 0.51 | 170.8 | 0.45 | 252.8 | 0.69 | 246 | 0.6 |\n| 負債準備–流動 | 21.44 | 0.05 | 16.61 | 0.04 | 15.58 | 0.04 | 22.96 | 0.06 | 31.95 | 0.08 | 41.08 | 0.11 | 38.91 | 0.09 |\n| 租賃負債–流動 | 64.37 | 0.16 | 56.44 | 0.15 | 57.42 | 0.15 | 78.13 | 0.19 | 74.47 | 0.2 | 74.89 | 0.2 | 83.33 | 0.2 |\n| 其他流動負債 | 1,516 | 3.82 | 1,653 | 4.38 | 1,868 | 4.74 | 1,968 | 4.84 | 1,766 | 4.69 | 1,773 | 4.85 | 1,436 | 3.47 |\n| 流動負債合計 | 18,714 | 47.2 | 17,182 | 45.5 | 19,093 | 48.5 | 20,130 | 49.5 | 18,201 | 48.4 | 17,304 | 47.3 | 21,138 | 51.1 |\n| 應付公司債 | 2,463 | 6.21 | 2,431 | 6.44 | 2,305 | 5.85 | 2,387 | 5.87 | 2,369 | 6.3 | 2,207 | 6.03 | 2,453 | 5.93 |\n| 長期借款 | 458.7 | 1.16 | 453.5 | 1.2 | 411.1 | 1.04 | 484.4 | 1.19 | 483.4 | 1.28 | 337.9 | 0.92 | 557.3 | 1.35 |\n| 營業及負債準備合計 | 22.76 | 0.06 | 22.53 | 0.06 | 20.88 | 0.05 | 34.46 | 0.08 | 25.71 | 0.07 | 4.59 | 0.01 | 4.59 | 0.01 |\n| 遞延所得稅負債 | 418.8 | 1.06 | 417.3 | 1.11 | 406.7 | 1.03 | 432.2 | 1.06 | 409.7 | 1.09 | 411.6 | 1.12 | 391.2 | 0.95 |\n| 租賃負債–非流動 | 237.5 | 0.6 | 178.3 | 0.47 | 167.1 | 0.42 | 162.2 | 0.4 | 166.2 | 0.44 | 185.1 | 0.51 | 174.6 | 0.42 |\n| 其他負債–其他 | 136.9 | 0.35 | 144.3 | 0.38 | 131.1 | 0.33 | 132.2 | 0.33 | 128 | 0.34 | 115.8 | 0.32 | 115.7 | 0.28 |\n| 其他負債合計 | 136.9 | 0.35 | 144.3 | 0.38 | 131.1 | 0.33 | 132.2 | 0.33 | 128 | 0.34 | 115.8 | 0.32 | 115.7 | 0.28 |\n| 非流動負債合計 | 3,737 | 9.42 | 3,647 | 9.66 | 3,442 | 8.74 | 3,633 | 8.94 | 3,582 | 9.52 | 3,262 | 8.91 | 3,696 | 8.94 |\n| 負債總額 | 22,452 | 56.6 | 20,828 | 55.2 | 22,535 | 57.2 | 23,763 | 58.5 | 21,783 | 57.9 | 20,566 | 56.2 | 24,834 | 60.1 |\n| 股東權益 | 2024Q2 | 2024Q1 | 2023Q4 | 2023Q3 | 2023Q2 | 2023Q1 | 2022Q4 |\n| 金額 | ％ | 金額 | ％ | 金額 | ％ | 金額 | ％ | 金額 | ％ | 金額 | ％ | 金額 | ％ |\n| 普通股股本 | 1,386 | 3.49 | 1,386 | 3.67 | 1,386 | 3.52 | 1,386 | 3.41 | 1,386 | 3.68 | 1,386 | 3.79 | 1,386 | 3.35 |\n| 股本合計 | 1,386 | 3.49 | 1,386 | 3.67 | 1,386 | 3.52 | 1,386 | 3.41 | 1,386 | 3.68 | 1,386 | 3.79 | 1,386 | 3.35 |\n| 資本公積–發行溢價 | 896 | 2.26 | 896 | 2.37 | 896 | 2.27 | 896 | 2.21 | 896 | 2.38 | 896 | 2.45 | 896 | 2.17 |\n| 資本公積–認列對子公司所有權權益變動數 | 938.7 | 2.37 | 1,044 | 2.77 | 1,040 | 2.64 | 996.2 | 2.45 | 994.5 | 2.64 | 987.6 | 2.7 | 982.9 | 2.38 |\n| 資本公積–採用權益法認列關聯企業及合資股權淨值之變動數 | 54.08 | 0.14 | 52.39 | 0.14 | 47.39 | 0.12 | 47.43 | 0.12 | 47.66 | 0.13 | 54.14 | 0.15 | 55.66 | 0.13 |\n| 資本公積–認股權 | 3.36 | 0.01 | 3.36 | 0.01 | 3.36 | 0.01 | 3.36 | 0.01 | 3.36 | 0.01 | 3.36 | 0.01 | 3.36 | 0.01 |\n| 資本公積合計 | 1,892 | 4.77 | 1,996 | 5.29 | 1,987 | 5.04 | 1,943 | 4.78 | 1,942 | 5.16 | 1,941 | 5.3 | 1,938 | 4.69 |\n| 法定盈餘公積 | 2,134 | 5.38 | 1,992 | 5.28 | 1,992 | 5.06 | 1,992 | 4.9 | 1,992 | 5.29 | 1,849 | 5.05 | 1,849 | 4.47 |\n| 特別盈餘公積 | 1,132 | 2.85 | 821.5 | 2.18 | 821.5 | 2.09 | 821.5 | 2.02 | 821.5 | 2.18 | 895.1 | 2.45 | 895.1 | 2.17 |\n| 未分配盈餘(或待彌補虧損) | 9,260 | 23.3 | 9,361 | 24.8 | 9,877 | 25.1 | 9,342 | 23 | 8,916 | 23.7 | 8,658 | 23.7 | 9,259 | 22.4 |\n| 保留盈餘合計 | 12,527 | 31.6 | 12,175 | 32.3 | 12,691 | 32.2 | 12,155 | 29.9 | 11,729 | 31.2 | 11,402 | 31.2 | 12,003 | 29 |\n| 國外營運機構財務報表換算之兌換差額 | -639.5 | -1.61 | -765.3 | -2.03 | -1,215 | -3.08 | -703.8 | -1.73 | -1,239 | -3.29 | -881.1 | -2.41 | -966.8 | -2.34 |\n| 透過其他綜合損益按公允價值衡量之金融資產未實現評價損益 | 98.52 | 0.25 | 105.9 | 0.28 | 83.2 | 0.21 | 70.97 | 0.17 | 112 | 0.3 | 160.8 | 0.44 | 145.3 | 0.35 |\n| 避險工具之損益 | 0 | 0 | 0 | 0 | - | - | -1.75 | 0 | -3.01 | -0.01 | -0.71 | 0 | 0 | 0 |\n| 其他權益合計 | -541 | -1.36 | -659.4 | -1.75 | -1,132 | -2.87 | -634.6 | -1.56 | -1,130 | -3 | -721 | -1.97 | -821.5 | -1.99 |\n| 庫藏股票 | -0.15 | 0 | -0.15 | 0 | -0.15 | 0 | -0.15 | 0 | -0.15 | 0 | -0.15 | 0 | -0.15 | 0 |\n| 歸屬於母公司業主之權益合計 | 15,264 | 38.5 | 14,897 | 39.5 | 14,931 | 37.9 | 14,850 | 36.5 | 13,927 | 37 | 14,009 | 38.3 | 14,505 | 35.1 |\n| 非控制權益 | 1,953 | 4.92 | 2,011 | 5.33 | 1,931 | 4.9 | 2,021 | 4.97 | 1,916 | 5.09 | 2,019 | 5.52 | 2,000 | 4.84 |\n| 股東權益總額 | 17,217 | 43.4 | 16,908 | 44.8 | 16,862 | 42.8 | 16,871 | 41.5 | 15,843 | 42.1 | 16,028 | 43.8 | 16,505 | 39.9 |\n| 待註銷股本股數(萬張) | - | - | - | - | - | - | 0 | - | 0 | - | 0 | - | 0 | - |\n| 預收股款之約當發行股數(萬張) | - | - | - | - | - | - | 0 | - | 0 | - | 0 | - | 0 | - |\n| 母公司暨子公司持有之母公司庫藏股股數(萬張) | 0.15 | - | 0.15 | - | 0.15 | - | 0.15 | - | 0.15 | - | 0.15 | - | 0.15 | - |\n| 每股淨值(元) | 110.12 | - | 107.47 | - | 107.72 | - | 107.13 | - | 100.47 | - | 101.06 | - | 104.65 | - |\n| 財務報告書–公開資訊觀測站 | [![](image/link.png)](http://doc.twse.com.tw/server-java/t57sb01?step=1&colorchg=1&co_id=2317&year=113&seamon=&mtype=A) | [![](image/link.png)](http://doc.twse.com.tw/server-java/t57sb01?step=1&colorchg=1&co_id=2317&year=113&seamon=&mtype=A) | [![](image/link.png)](http://doc.twse.com.tw/server-java/t57sb01?step=1&colorchg=1&co_id=2317&year=112&seamon=&mtype=A) | [![](image/link.png)](http://doc.twse.com.tw/server-java/t57sb01?step=1&colorchg=1&co_id=2317&year=112&seamon=&mtype=A) | [![](image/link.png)](http://doc.twse.com.tw/server-java/t57sb01?step=1&colorchg=1&co_id=2317&year=112&seamon=&mtype=A) | [![](image/link.png)](http://doc.twse.com.tw/server-java/t57sb01?step=1&colorchg=1&co_id=2317&year=112&seamon=&mtype=A) | [![](image/link.png)](http://doc.twse.com.tw/server-java/t57sb01?step=1&colorchg=1&co_id=2317&year=111&seamon=&mtype=A) |\n\n| 資產 |\n| --- |\n| 現金及約當現金 |\n| 透過損益按公允價值衡量之金融資產–流動 |\n| 透過其他綜合損益按公允價值衡量之金融資產–流動 |\n| 按攤銷後成本衡量之金融資產–流動 |\n| 避險之金融資產–流動 |\n| 應收帳款 |\n| 應收帳款–關係人 |\n| 其他應收款 |\n| 其他應收款–關係人 |\n| 應收款項合計 |\n| 存貨 |\n| 預付款項 |\n| 其他流動資產 |\n| 流動資產合計 |\n| 透過損益按公允價值衡量之金融資產–非流動 |\n| 透過其他綜合損益按公允價值衡量之金融資產–非流動 |\n| 按攤銷後成本衡量之金融資產–非流動 |\n| 採用權益法之投資 |\n| 投資性不動產 |\n| 投資合計 |\n| 固定資產合計 |\n| 使用權資產 |\n| 無形資產合計 |\n| 遞延所得稅資產 |\n| 其他資產–其他 |\n| 其他資產合計 |\n| 非流動資產合計 |\n| 資產總額 |\n| 負債 |\n| 短期借款 |\n| 應付短期票券 |\n| 透過損益按公允價值衡量之金融負債–流動 |\n| 避險之金融負債–流動 |\n| 應付帳款 |\n| 應付帳款–關係人 |\n| 其他應付款 |\n| 應付款項合計 |\n| 本期所得稅負債 |\n| 負債準備–流動 |\n| 租賃負債–流動 |\n| 其他流動負債 |\n| 流動負債合計 |\n| 應付公司債 |\n| 長期借款 |\n| 營業及負債準備合計 |\n| 遞延所得稅負債 |\n| 租賃負債–非流動 |\n| 其他負債–其他 |\n| 其他負債合計 |\n| 非流動負債合計 |\n| 負債總額 |\n| 股東權益 |\n| 普通股股本 |\n| 股本合計 |\n| 資本公積–發行溢價 |\n| 資本公積–認列對子公司所有權權益變動數 |\n| 資本公積–採用權益法認列關聯企業及合資股權淨值之變動數 |\n| 資本公積–認股權 |\n| 資本公積合計 |\n| 法定盈餘公積 |\n| 特別盈餘公積 |\n| 未分配盈餘(或待彌補虧損) |\n| 保留盈餘合計 |\n| 國外營運機構財務報表換算之兌換差額 |\n| 透過其他綜合損益按公允價值衡量之金融資產未實現評價損益 |\n| 避險工具之損益 |\n| 其他權益合計 |\n| 庫藏股票 |\n| 歸屬於母公司業主之權益合計 |\n| 非控制權益 |\n| 股東權益總額 |\n| 待註銷股本股數(萬張) |\n| 預收股款之約當發行股數(萬張) |\n| 母公司暨子公司持有之母公司庫藏股股數(萬張) |\n| 每股淨值(元) |\n| 財務報告書–公開資訊觀測站 | |\n\n|     |\n| --- |\n| ▲ |\n| ▼ |",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Get text inputs from the Playground.",
            "icon": "type",
            "base_classes": [
              "Message"
            ],
            "display_name": "Text Input",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "edited": false,
            "metadata": {},
            "lf_version": "1.0.19.post1"
          },
          "id": "TextInput-Wk3T7",
          "description": "Get text inputs from the Playground.",
          "display_name": "Text Input"
        },
        "selected": false,
        "width": 384,
        "height": 287,
        "positionAbsolute": {
          "x": 1495.809946451844,
          "y": 805.6703305876104
        },
        "dragging": false
      },
      {
        "id": "ParseData-ya3Xb",
        "type": "genericNode",
        "position": {
          "x": 1493.5258681755204,
          "y": 1920.66823065011
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_metadata": true,
                "list": false,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{text}",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false,
            "metadata": {},
            "lf_version": "1.0.19.post1"
          },
          "id": "ParseData-ya3Xb",
          "description": "Convert Data into plain text following a specified template.",
          "display_name": "Parse Data"
        },
        "selected": false,
        "width": 384,
        "height": 351,
        "positionAbsolute": {
          "x": 1493.5258681755204,
          "y": 1920.66823065011
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "Prompt-s6Zlj",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-s6Zljœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CohereModel-R8V9S",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œCohereModel-R8V9Sœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "CohereModel-R8V9S",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-s6Zlj",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-Prompt-s6Zlj{œdataTypeœ:œPromptœ,œidœ:œPrompt-s6Zljœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-CohereModel-R8V9S{œfieldNameœ:œinput_valueœ,œidœ:œCohereModel-R8V9Sœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": "",
        "animated": false
      },
      {
        "source": "CohereModel-R8V9S",
        "sourceHandle": "{œdataTypeœ:œCohereModelœ,œidœ:œCohereModel-R8V9Sœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-mOPSW",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-mOPSWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-mOPSW",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CohereModel",
            "id": "CohereModel-R8V9S",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CohereModel-R8V9S{œdataTypeœ:œCohereModelœ,œidœ:œCohereModel-R8V9Sœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-mOPSW{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-mOPSWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": "",
        "animated": false
      },
      {
        "source": "ChatInput-rrsJV",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-rrsJVœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Chroma-0KSZF",
        "targetHandle": "{œfieldNameœ:œsearch_queryœ,œidœ:œChroma-0KSZFœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "search_query",
            "id": "Chroma-0KSZF",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-rrsJV",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-rrsJV{œdataTypeœ:œChatInputœ,œidœ:œChatInput-rrsJVœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Chroma-0KSZF{œfieldNameœ:œsearch_queryœ,œidœ:œChroma-0KSZFœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": "",
        "animated": false,
        "selected": false
      },
      {
        "source": "CohereEmbeddings-lGQfz",
        "sourceHandle": "{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-lGQfzœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
        "target": "Chroma-0KSZF",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-0KSZFœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "Chroma-0KSZF",
            "inputTypes": [
              "Embeddings"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "CohereEmbeddings",
            "id": "CohereEmbeddings-lGQfz",
            "name": "embeddings",
            "output_types": [
              "Embeddings"
            ]
          }
        },
        "id": "reactflow__edge-CohereEmbeddings-lGQfz{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-lGQfzœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Chroma-0KSZF{œfieldNameœ:œembeddingœ,œidœ:œChroma-0KSZFœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "className": "",
        "animated": false
      },
      {
        "source": "Chroma-0KSZF",
        "sourceHandle": "{œdataTypeœ:œChromaœ,œidœ:œChroma-0KSZFœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-4QWPC",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-4QWPCœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-4QWPC",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "Chroma",
            "id": "Chroma-0KSZF",
            "name": "search_results",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-Chroma-0KSZF{œdataTypeœ:œChromaœ,œidœ:œChroma-0KSZFœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}-ParseData-4QWPC{œfieldNameœ:œdataœ,œidœ:œParseData-4QWPCœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "className": "",
        "animated": false
      },
      {
        "source": "ChatInput-rrsJV",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-rrsJVœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-Jv8XZ",
        "targetHandle": "{œfieldNameœ:œQuestionœ,œidœ:œPrompt-Jv8XZœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "Question",
            "id": "Prompt-Jv8XZ",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-rrsJV",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-rrsJV{œdataTypeœ:œChatInputœ,œidœ:œChatInput-rrsJVœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-Jv8XZ{œfieldNameœ:œQuestionœ,œidœ:œPrompt-Jv8XZœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "Prompt-Jv8XZ",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-Jv8XZœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CohereModel-Am2PJ",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œCohereModel-Am2PJœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "CohereModel-Am2PJ",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-Jv8XZ",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-Prompt-Jv8XZ{œdataTypeœ:œPromptœ,œidœ:œPrompt-Jv8XZœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-CohereModel-Am2PJ{œfieldNameœ:œinput_valueœ,œidœ:œCohereModel-Am2PJœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "ChatInput-rrsJV",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-rrsJVœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-s6Zlj",
        "targetHandle": "{œfieldNameœ:œQuestionœ,œidœ:œPrompt-s6Zljœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "Question",
            "id": "Prompt-s6Zlj",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-rrsJV",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-rrsJV{œdataTypeœ:œChatInputœ,œidœ:œChatInput-rrsJVœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-s6Zlj{œfieldNameœ:œQuestionœ,œidœ:œPrompt-s6Zljœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "CohereModel-Am2PJ",
        "sourceHandle": "{œdataTypeœ:œCohereModelœ,œidœ:œCohereModel-Am2PJœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "DelimitedTextExtractor-mYFq8",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œDelimitedTextExtractor-mYFq8œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "DelimitedTextExtractor-mYFq8",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CohereModel",
            "id": "CohereModel-Am2PJ",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CohereModel-Am2PJ{œdataTypeœ:œCohereModelœ,œidœ:œCohereModel-Am2PJœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-DelimitedTextExtractor-mYFq8{œfieldNameœ:œinput_valueœ,œidœ:œDelimitedTextExtractor-mYFq8œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "DelimitedTextExtractor-mYFq8",
        "sourceHandle": "{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-mYFq8œ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-rz2TU",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-rz2TUœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-rz2TU",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "DelimitedTextExtractor",
            "id": "DelimitedTextExtractor-mYFq8",
            "name": "extracted_data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-DelimitedTextExtractor-mYFq8{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-mYFq8œ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-rz2TU{œfieldNameœ:œdataœ,œidœ:œParseData-rz2TUœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "CombineText-Q77hJ",
        "sourceHandle": "{œdataTypeœ:œCombineTextœ,œidœ:œCombineText-Q77hJœ,œnameœ:œcombined_textœ,œoutput_typesœ:[œTextœ]}",
        "target": "FirecrawlScrapeApi-bHQxg",
        "targetHandle": "{œfieldNameœ:œurlœ,œidœ:œFirecrawlScrapeApi-bHQxgœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "url",
            "id": "FirecrawlScrapeApi-bHQxg",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CombineText",
            "id": "CombineText-Q77hJ",
            "name": "combined_text",
            "output_types": [
              "Text"
            ]
          }
        },
        "id": "reactflow__edge-CombineText-Q77hJ{œdataTypeœ:œCombineTextœ,œidœ:œCombineText-Q77hJœ,œnameœ:œcombined_textœ,œoutput_typesœ:[œTextœ]}-FirecrawlScrapeApi-bHQxg{œfieldNameœ:œurlœ,œidœ:œFirecrawlScrapeApi-bHQxgœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "TextInput-cnlVH",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-cnlVHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "DelimitedTextExtractor-HbxgU",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œDelimitedTextExtractor-HbxgUœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "DelimitedTextExtractor-HbxgU",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-cnlVH",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-TextInput-cnlVH{œdataTypeœ:œTextInputœ,œidœ:œTextInput-cnlVHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-DelimitedTextExtractor-HbxgU{œfieldNameœ:œinput_valueœ,œidœ:œDelimitedTextExtractor-HbxgUœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "SplitText-wugaX",
        "sourceHandle": "{œdataTypeœ:œSplitTextœ,œidœ:œSplitText-wugaXœ,œnameœ:œchunksœ,œoutput_typesœ:[œDataœ]}",
        "target": "Chroma-0KSZF",
        "targetHandle": "{œfieldNameœ:œingest_dataœ,œidœ:œChroma-0KSZFœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "ingest_data",
            "id": "Chroma-0KSZF",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "SplitText",
            "id": "SplitText-wugaX",
            "name": "chunks",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-SplitText-wugaX{œdataTypeœ:œSplitTextœ,œidœ:œSplitText-wugaXœ,œnameœ:œchunksœ,œoutput_typesœ:[œDataœ]}-Chroma-0KSZF{œfieldNameœ:œingest_dataœ,œidœ:œChroma-0KSZFœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "ParseData-rz2TU",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-rz2TUœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "DelimitedTextExtractor-DuExH",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œDelimitedTextExtractor-DuExHœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "DelimitedTextExtractor-DuExH",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-rz2TU",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ParseData-rz2TU{œdataTypeœ:œParseDataœ,œidœ:œParseData-rz2TUœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-DelimitedTextExtractor-DuExH{œfieldNameœ:œinput_valueœ,œidœ:œDelimitedTextExtractor-DuExHœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "DelimitedTextExtractor-DuExH",
        "sourceHandle": "{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-DuExHœ,œnameœ:œstock_code_1œ,œoutput_typesœ:[œMessageœ]}",
        "target": "CombineText-Q77hJ",
        "targetHandle": "{œfieldNameœ:œtext2œ,œidœ:œCombineText-Q77hJœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "text2",
            "id": "CombineText-Q77hJ",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "DelimitedTextExtractor",
            "id": "DelimitedTextExtractor-DuExH",
            "name": "stock_code_1",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-DelimitedTextExtractor-DuExH{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-DuExHœ,œnameœ:œstock_code_1œ,œoutput_typesœ:[œMessageœ]}-CombineText-Q77hJ{œfieldNameœ:œtext2œ,œidœ:œCombineText-Q77hJœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "DelimitedTextExtractor-DuExH",
        "sourceHandle": "{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-DuExHœ,œnameœ:œstock_code_2œ,œoutput_typesœ:[œMessageœ]}",
        "target": "CombineText-f69Bh",
        "targetHandle": "{œfieldNameœ:œtext2œ,œidœ:œCombineText-f69Bhœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "text2",
            "id": "CombineText-f69Bh",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "DelimitedTextExtractor",
            "id": "DelimitedTextExtractor-DuExH",
            "name": "stock_code_2",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-DelimitedTextExtractor-DuExH{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-DuExHœ,œnameœ:œstock_code_2œ,œoutput_typesœ:[œMessageœ]}-CombineText-f69Bh{œfieldNameœ:œtext2œ,œidœ:œCombineText-f69Bhœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "CombineText-f69Bh",
        "sourceHandle": "{œdataTypeœ:œCombineTextœ,œidœ:œCombineText-f69Bhœ,œnameœ:œcombined_textœ,œoutput_typesœ:[œTextœ]}",
        "target": "FirecrawlScrapeApi-kA7Ws",
        "targetHandle": "{œfieldNameœ:œurlœ,œidœ:œFirecrawlScrapeApi-kA7Wsœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "url",
            "id": "FirecrawlScrapeApi-kA7Ws",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CombineText",
            "id": "CombineText-f69Bh",
            "name": "combined_text",
            "output_types": [
              "Text"
            ]
          }
        },
        "id": "reactflow__edge-CombineText-f69Bh{œdataTypeœ:œCombineTextœ,œidœ:œCombineText-f69Bhœ,œnameœ:œcombined_textœ,œoutput_typesœ:[œTextœ]}-FirecrawlScrapeApi-kA7Ws{œfieldNameœ:œurlœ,œidœ:œFirecrawlScrapeApi-kA7Wsœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "Memory-gWgbP",
        "sourceHandle": "{œdataTypeœ:œMemoryœ,œidœ:œMemory-gWgbPœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-Jv8XZ",
        "targetHandle": "{œfieldNameœ:œMemoryœ,œidœ:œPrompt-Jv8XZœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "Memory",
            "id": "Prompt-Jv8XZ",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Memory",
            "id": "Memory-gWgbP",
            "name": "messages_text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-Memory-gWgbP{œdataTypeœ:œMemoryœ,œidœ:œMemory-gWgbPœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-Jv8XZ{œfieldNameœ:œMemoryœ,œidœ:œPrompt-Jv8XZœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "Memory-gWgbP",
        "sourceHandle": "{œdataTypeœ:œMemoryœ,œidœ:œMemory-gWgbPœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-s6Zlj",
        "targetHandle": "{œfieldNameœ:œMemoryœ,œidœ:œPrompt-s6Zljœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "Memory",
            "id": "Prompt-s6Zlj",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Memory",
            "id": "Memory-gWgbP",
            "name": "messages_text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-Memory-gWgbP{œdataTypeœ:œMemoryœ,œidœ:œMemory-gWgbPœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-s6Zlj{œfieldNameœ:œMemoryœ,œidœ:œPrompt-s6Zljœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "FirecrawlScrapeApi-bHQxg",
        "sourceHandle": "{œdataTypeœ:œFirecrawlScrapeApiœ,œidœ:œFirecrawlScrapeApi-bHQxgœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-h5NeX",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-h5NeXœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-h5NeX",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "FirecrawlScrapeApi",
            "id": "FirecrawlScrapeApi-bHQxg",
            "name": "data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-FirecrawlScrapeApi-bHQxg{œdataTypeœ:œFirecrawlScrapeApiœ,œidœ:œFirecrawlScrapeApi-bHQxgœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-h5NeX{œfieldNameœ:œdataœ,œidœ:œParseData-h5NeXœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "FirecrawlScrapeApi-kA7Ws",
        "sourceHandle": "{œdataTypeœ:œFirecrawlScrapeApiœ,œidœ:œFirecrawlScrapeApi-kA7Wsœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-knRbj",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-knRbjœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-knRbj",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "FirecrawlScrapeApi",
            "id": "FirecrawlScrapeApi-kA7Ws",
            "name": "data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-FirecrawlScrapeApi-kA7Ws{œdataTypeœ:œFirecrawlScrapeApiœ,œidœ:œFirecrawlScrapeApi-kA7Wsœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-knRbj{œfieldNameœ:œdataœ,œidœ:œParseData-knRbjœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "MergeDataComponent-hLoNX",
        "sourceHandle": "{œdataTypeœ:œMergeDataComponentœ,œidœ:œMergeDataComponent-hLoNXœ,œnameœ:œmerged_dataœ,œoutput_typesœ:[œDataœ]}",
        "target": "SplitText-wugaX",
        "targetHandle": "{œfieldNameœ:œdata_inputsœ,œidœ:œSplitText-wugaXœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data_inputs",
            "id": "SplitText-wugaX",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "MergeDataComponent",
            "id": "MergeDataComponent-hLoNX",
            "name": "merged_data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-MergeDataComponent-hLoNX{œdataTypeœ:œMergeDataComponentœ,œidœ:œMergeDataComponent-hLoNXœ,œnameœ:œmerged_dataœ,œoutput_typesœ:[œDataœ]}-SplitText-wugaX{œfieldNameœ:œdata_inputsœ,œidœ:œSplitText-wugaXœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "DelimitedTextExtractor-1yjk4",
        "sourceHandle": "{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-1yjk4œ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}",
        "target": "MergeDataComponent-hLoNX",
        "targetHandle": "{œfieldNameœ:œdata_inputsœ,œidœ:œMergeDataComponent-hLoNXœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data_inputs",
            "id": "MergeDataComponent-hLoNX",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "DelimitedTextExtractor",
            "id": "DelimitedTextExtractor-1yjk4",
            "name": "extracted_data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-DelimitedTextExtractor-1yjk4{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-1yjk4œ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}-MergeDataComponent-hLoNX{œfieldNameœ:œdata_inputsœ,œidœ:œMergeDataComponent-hLoNXœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "DelimitedTextExtractor-HbxgU",
        "sourceHandle": "{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-HbxgUœ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}",
        "target": "MergeDataComponent-hLoNX",
        "targetHandle": "{œfieldNameœ:œdata_inputsœ,œidœ:œMergeDataComponent-hLoNXœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data_inputs",
            "id": "MergeDataComponent-hLoNX",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "DelimitedTextExtractor",
            "id": "DelimitedTextExtractor-HbxgU",
            "name": "extracted_data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-DelimitedTextExtractor-HbxgU{œdataTypeœ:œDelimitedTextExtractorœ,œidœ:œDelimitedTextExtractor-HbxgUœ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}-MergeDataComponent-hLoNX{œfieldNameœ:œdata_inputsœ,œidœ:œMergeDataComponent-hLoNXœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "TextInput-Wk3T7",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-Wk3T7œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "DelimitedTextExtractor-1yjk4",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œDelimitedTextExtractor-1yjk4œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "DelimitedTextExtractor-1yjk4",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-Wk3T7",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-TextInput-Wk3T7{œdataTypeœ:œTextInputœ,œidœ:œTextInput-Wk3T7œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-DelimitedTextExtractor-1yjk4{œfieldNameœ:œinput_valueœ,œidœ:œDelimitedTextExtractor-1yjk4œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "MergeDataComponent-hLoNX",
        "sourceHandle": "{œdataTypeœ:œMergeDataComponentœ,œidœ:œMergeDataComponent-hLoNXœ,œnameœ:œmerged_dataœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-ya3Xb",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-ya3Xbœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-ya3Xb",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "MergeDataComponent",
            "id": "MergeDataComponent-hLoNX",
            "name": "merged_data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-MergeDataComponent-hLoNX{œdataTypeœ:œMergeDataComponentœ,œidœ:œMergeDataComponent-hLoNXœ,œnameœ:œmerged_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-ya3Xb{œfieldNameœ:œdataœ,œidœ:œParseData-ya3Xbœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "ParseData-ya3Xb",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-ya3Xbœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-s6Zlj",
        "targetHandle": "{œfieldNameœ:œDocumentœ,œidœ:œPrompt-s6Zljœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "Document",
            "id": "Prompt-s6Zlj",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-ya3Xb",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ParseData-ya3Xb{œdataTypeœ:œParseDataœ,œidœ:œParseData-ya3Xbœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-s6Zlj{œfieldNameœ:œDocumentœ,œidœ:œPrompt-s6Zljœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      }
    ],
    "viewport": {
      "x": 157.90628380941416,
      "y": 83.18587239463923,
      "zoom": 0.2200575835889224
    }
  },
  "updated_at": "2024-11-11T11:26:42+00:00",
  "description": "",
  "user_id": "f1db7a7d-b0db-44e5-a7fc-b3b0b05a352f",
  "tags": null
}