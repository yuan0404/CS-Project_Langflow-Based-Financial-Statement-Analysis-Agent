{"name":"Financial Statement Analysis Agent v5","user_id":"f1db7a7d-b0db-44e5-a7fc-b3b0b05a352f","endpoint_name":null,"id":"232fa716-6420-4c7a-8ca0-cda7906a23e1","tags":null,"folder_id":"e54ca256-9cc3-4af7-b241-7707eb67bb82","gradient":null,"data":{"nodes":[{"data":{"description":"Create a prompt template with dynamic variables.","display_name":"Prompt","id":"Prompt-SpcMh","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"template":{"tool_mode":false,"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"你是來自台灣的財務分析師，請根據文件和記憶的內容，以及現在時間，用繁體中文和台灣慣用語，回答問題。\n如果在文件中找不到資料，則回答：找不到XXX的資料。\n\n文件：\n{Document}\n\n記憶：\n{Memory}\n\n現在時間：\n{Time}\n\n請回覆：\n","display_name":"Template","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"prompt","_input_type":"PromptInput","load_from_db":false},"Document":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"Document","display_name":"Document","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"Memory":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"Memory","display_name":"Memory","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"Time":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"Time","display_name":"Time","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":"Create a prompt template with dynamic variables.","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Prompt","documentation":"","custom_fields":{"template":["Document","Memory","Time"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":null,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true,"required_inputs":null}],"field_order":["template"],"beta":false,"legacy":false,"error":null,"edited":false,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"type":"Prompt"},"dragging":false,"height":514,"id":"Prompt-SpcMh","position":{"x":73.32192559101213,"y":186.08644772499656},"positionAbsolute":{"x":73.32192559101213,"y":186.08644772499656},"selected":false,"type":"genericNode","width":320},{"data":{"description":"Get chat inputs from the Playground.","display_name":"Chat Input","id":"ChatInput-kXmcK","node":{"template":{"_type":"Component","files":{"trace_as_metadata":true,"file_path":"","fileTypes":["txt","md","mdx","csv","json","yaml","yml","xml","html","htm","pdf","docx","py","sh","sql","js","ts","tsx","jpg","jpeg","png","bmp","image"],"list":true,"required":false,"placeholder":"","show":true,"name":"files","value":"","display_name":"Files","advanced":true,"dynamic":false,"info":"Files to be sent with the message.","title_case":false,"type":"file","_input_type":"FileInput"},"background_color":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"background_color","value":"","display_name":"Background Color","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The background color of the icon.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"chat_icon":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"chat_icon","value":"","display_name":"Icon","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The icon of the message.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_USER, MESSAGE_SENDER_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        _background_color = self.background_color\n        _text_color = self.text_color\n        _icon = self.chat_icon\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\"background_color\": _background_color, \"text_color\": _text_color, \"icon\": _icon},\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"分析台積電在去年整年的股東權益比率","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Message to be passed as input.","title_case":false,"type":"str","_input_type":"MultilineInput"},"sender":{"tool_mode":false,"trace_as_metadata":true,"options":["Machine","User"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"sender","value":"User","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"Type of sender.","title_case":false,"type":"str","_input_type":"DropdownInput"},"sender_name":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sender_name","value":"User","display_name":"Sender Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Name of the sender.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"session_id":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"session_id","value":"","display_name":"Session ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The session ID of the chat. If empty, the current session ID parameter will be used.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"should_store_message":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"should_store_message","value":true,"display_name":"Store Messages","advanced":true,"dynamic":false,"info":"Store the message in the history.","title_case":false,"type":"bool","_input_type":"BoolInput"},"text_color":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"text_color","value":"","display_name":"Text Color","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The text color of the name","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Get chat inputs from the Playground.","icon":"MessagesSquare","base_classes":["Message"],"display_name":"Chat Input","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"message","display_name":"Message","method":"message_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","should_store_message","sender","sender_name","session_id","files","background_color","chat_icon","text_color"],"beta":false,"legacy":false,"edited":false,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"type":"ChatInput"},"dragging":false,"height":231,"id":"ChatInput-kXmcK","position":{"x":-473.8407449660938,"y":223.17134391140934},"positionAbsolute":{"x":-473.8407449660938,"y":223.17134391140934},"selected":false,"type":"genericNode","width":320},{"id":"ChatOutput-YjUMZ","type":"genericNode","position":{"x":971.9360007791145,"y":300.99899939546697},"data":{"type":"ChatOutput","node":{"template":{"_type":"Component","background_color":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"background_color","value":"","display_name":"Background Color","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The background color of the icon.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"chat_icon":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"chat_icon","value":"","display_name":"Icon","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The icon of the message.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, _id: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if _id:\n            source_dict[\"id\"] = _id\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    def message_response(self) -> Message:\n        _source, _icon, _display_name, _source_id = self.get_properties_from_source_component()\n        _background_color = self.background_color\n        _text_color = self.text_color\n        if self.chat_icon:\n            _icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(_source_id, _display_name, _source)\n        message.properties.icon = _icon\n        message.properties.background_color = _background_color\n        message.properties.text_color = _text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"data_template":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"data_template","value":"{text}","display_name":"Data Template","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Message to be passed as output.","title_case":false,"type":"str","_input_type":"MessageInput"},"sender":{"tool_mode":false,"trace_as_metadata":true,"options":["Machine","User"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"sender","value":"Machine","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"Type of sender.","title_case":false,"type":"str","_input_type":"DropdownInput"},"sender_name":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sender_name","value":"AI","display_name":"Sender Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Name of the sender.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"session_id":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"session_id","value":"","display_name":"Session ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The session ID of the chat. If empty, the current session ID parameter will be used.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"should_store_message":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"should_store_message","value":true,"display_name":"Store Messages","advanced":true,"dynamic":false,"info":"Store the message in the history.","title_case":false,"type":"bool","_input_type":"BoolInput"},"text_color":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"text_color","value":"","display_name":"Text Color","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The text color of the name","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Display a chat message in the Playground.","icon":"MessagesSquare","base_classes":["Message"],"display_name":"Chat Output","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"message","display_name":"Message","method":"message_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","should_store_message","sender","sender_name","session_id","data_template","background_color","chat_icon","text_color"],"beta":false,"legacy":false,"edited":false,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"id":"ChatOutput-YjUMZ","description":"Display a chat message in the Playground.","display_name":"Chat Output"},"selected":false,"width":320,"height":232,"positionAbsolute":{"x":971.9360007791145,"y":300.99899939546697},"dragging":false},{"id":"CohereModel-gwg57","type":"genericNode","position":{"x":528.6649879422152,"y":76.95665259931201},"data":{"type":"CohereModel","node":{"template":{"_type":"Component","output_parser":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"output_parser","value":"","display_name":"Output Parser","advanced":true,"input_types":["OutputParser"],"dynamic":false,"info":"The parser to use to parse the output of the model","title_case":false,"type":"other","_input_type":"HandleInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langchain_cohere import ChatCohere\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import FloatInput, SecretStrInput\n\n\nclass CohereComponent(LCModelComponent):\n    display_name = \"Cohere\"\n    description = \"Generate text using Cohere LLMs.\"\n    documentation = \"https://python.langchain.com/docs/modules/model_io/models/llms/integrations/cohere\"\n    icon = \"Cohere\"\n    name = \"CohereModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        SecretStrInput(\n            name=\"cohere_api_key\",\n            display_name=\"Cohere API Key\",\n            info=\"The Cohere API Key to use for the Cohere model.\",\n            advanced=False,\n            value=\"COHERE_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.75),\n        HandleInput(\n            name=\"output_parser\",\n            display_name=\"Output Parser\",\n            info=\"The parser to use to parse the output of the model\",\n            advanced=True,\n            input_types=[\"OutputParser\"],\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        cohere_api_key = self.cohere_api_key\n        temperature = self.temperature\n\n        api_key = SecretStr(cohere_api_key).get_secret_value() if cohere_api_key else None\n\n        return ChatCohere(\n            temperature=temperature or 0.75,\n            cohere_api_key=api_key,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"cohere_api_key":{"load_from_db":true,"required":false,"placeholder":"","show":true,"name":"cohere_api_key","value":"Cohere_API_KEY","display_name":"Cohere API Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The Cohere API Key to use for the Cohere model.","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageInput"},"stream":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"stream","value":true,"display_name":"Stream","advanced":false,"dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","title_case":false,"type":"bool","_input_type":"BoolInput"},"system_message":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"system_message","value":"","display_name":"System Message","advanced":false,"input_types":["Message"],"dynamic":false,"info":"System message to pass to the model.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"temperature":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"temperature","value":0,"display_name":"Temperature","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"float","_input_type":"FloatInput","load_from_db":false}},"description":"Generate text using Cohere LLMs.","icon":"Cohere","base_classes":["LanguageModel","Message"],"display_name":"Cohere","documentation":"https://python.langchain.com/docs/modules/model_io/models/llms/integrations/cohere","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text_output","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"required_inputs":[]},{"types":["LanguageModel"],"selected":"LanguageModel","name":"model_output","display_name":"Language Model","method":"build_model","value":"__UNDEFINED__","cache":true,"required_inputs":[]}],"field_order":["input_value","system_message","stream","cohere_api_key","temperature","output_parser"],"beta":false,"legacy":false,"edited":false,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"id":"CohereModel-gwg57","description":"Generate text using Cohere LLMs.","display_name":"Cohere"},"selected":false,"width":320,"height":582,"positionAbsolute":{"x":528.6649879422152,"y":76.95665259931201},"dragging":false},{"id":"Prompt-FYuah","type":"genericNode","position":{"x":71.09318447877286,"y":-524.7328396957248},"data":{"description":"Create a prompt template with dynamic variables.","display_name":"Prompt","id":"Prompt-FYuah","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"template":{"tool_mode":false,"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"你是來自台灣的財務分析師，請從我輸入的問題及記憶中，根據現在時間，分析出接下來的具體步驟。\n1. 得知我想要查詢的公司，並告訴我那家公司的股票代碼是多少，只簡短的回答我數字就好，例如：2330。如果有多家公司則以 \", \" 隔開，例如：2330, 2317。\n2. 得知我想要查詢的年度或季度，例如：2024。如果有多個年度或季度則以 \", \" 隔開，並由近至遠排列，例如：2024Q4, 2023Q1。\n3. 得知我想要查詢的內容應該要用哪一個財務報表表示，用代號表示，最多只能選一個，例如：BS_M_QUAR。\n\n資產負債表\n    合併報表 – 單季: BS_M_QUAR\n    合併報表 – 年度: BS_M_YEAR\n    個別報表 – 單季: BS_QUAR\n    個別報表 – 年度: BS_YEAR\n\n損益表\n    合併報表 – 單季: IS_M_QUAR\n    合併報表 – 累季: IS_M_QUAR_ACC\n    合併報表 – 年度: IS_M_YEAR\n    合併報表 – 近四季: IS_M_Y4Q\n    個別報表 – 單季: IS_QUAR\n    個別報表 – 累季: IS_QUAR_ACC\n    個別報表 – 年度: IS_YEAR\n    個別報表 – 近四季: IS_Y4Q\n\n現金流量表\n    合併報表 – 單季: CF_M_QUAR\n    合併報表 – 累季: CF_M_QUAR_ACC\n    合併報表 – 年度: CF_M_YEAR\n    合併報表 – 近四季: CF_M_Y4Q\n    個別報表 – 單季: CF_QUAR\n    個別報表 – 累季: CF_QUAR_ACC\n    個別報表 – 年度: CF_YEAR\n    個別報表 – 近四季: CF_Y4Q\n\n財務比率表\n    合併報表 – 單季: XX_M_QUAR\n    合併報表 – 累季: XX_M_QUAR_ACC\n    合併報表 – 年度: XX_M_YEAR\n    合併報表 – 近四季: XX_M_Y4Q\n    個別報表 – 單季: XX_QUAR\n    個別報表 – 累季: XX_QUAR_ACC\n    個別報表 – 年度: XX_YEAR\n    個別報表 – 近四季: XX_Y4Q\n\n記憶：\n{Memory}\n\n現在時間：\n{Time}\n\n請依照以下格式回覆：\n1. 股票代碼：\n2. 查詢季度：\n3. 查詢報表：","display_name":"Template","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"prompt","_input_type":"PromptInput","load_from_db":false},"Memory":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"Memory","display_name":"Memory","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"Time":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"Time","display_name":"Time","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":"Create a prompt template with dynamic variables.","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Prompt","documentation":"","custom_fields":{"template":["Memory","Time"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":null,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true,"required_inputs":null}],"field_order":["template"],"beta":false,"legacy":false,"error":null,"edited":false,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"type":"Prompt"},"selected":false,"width":320,"height":429,"positionAbsolute":{"x":71.09318447877286,"y":-524.7328396957248},"dragging":false},{"id":"CohereModel-q8Rrb","type":"genericNode","position":{"x":530.581736389038,"y":-591.1514331375115},"data":{"type":"CohereModel","node":{"template":{"_type":"Component","output_parser":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"output_parser","value":"","display_name":"Output Parser","advanced":true,"input_types":["OutputParser"],"dynamic":false,"info":"The parser to use to parse the output of the model","title_case":false,"type":"other","_input_type":"HandleInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langchain_cohere import ChatCohere\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import FloatInput, SecretStrInput\n\n\nclass CohereComponent(LCModelComponent):\n    display_name = \"Cohere\"\n    description = \"Generate text using Cohere LLMs.\"\n    documentation = \"https://python.langchain.com/docs/modules/model_io/models/llms/integrations/cohere\"\n    icon = \"Cohere\"\n    name = \"CohereModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        SecretStrInput(\n            name=\"cohere_api_key\",\n            display_name=\"Cohere API Key\",\n            info=\"The Cohere API Key to use for the Cohere model.\",\n            advanced=False,\n            value=\"COHERE_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.75),\n        HandleInput(\n            name=\"output_parser\",\n            display_name=\"Output Parser\",\n            info=\"The parser to use to parse the output of the model\",\n            advanced=True,\n            input_types=[\"OutputParser\"],\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        cohere_api_key = self.cohere_api_key\n        temperature = self.temperature\n\n        api_key = SecretStr(cohere_api_key).get_secret_value() if cohere_api_key else None\n\n        return ChatCohere(\n            temperature=temperature or 0.75,\n            cohere_api_key=api_key,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"cohere_api_key":{"load_from_db":true,"required":false,"placeholder":"","show":true,"name":"cohere_api_key","value":"Cohere_API_KEY","display_name":"Cohere API Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The Cohere API Key to use for the Cohere model.","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageInput"},"stream":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"stream","value":false,"display_name":"Stream","advanced":false,"dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","title_case":false,"type":"bool","_input_type":"BoolInput"},"system_message":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"system_message","value":"","display_name":"System Message","advanced":false,"input_types":["Message"],"dynamic":false,"info":"System message to pass to the model.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"temperature":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"temperature","value":0,"display_name":"Temperature","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"float","_input_type":"FloatInput","load_from_db":false}},"description":"Generate text using Cohere LLMs.","icon":"Cohere","base_classes":["LanguageModel","Message"],"display_name":"Cohere","documentation":"https://python.langchain.com/docs/modules/model_io/models/llms/integrations/cohere","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text_output","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"required_inputs":[]},{"types":["LanguageModel"],"selected":"LanguageModel","name":"model_output","display_name":"Language Model","method":"build_model","value":"__UNDEFINED__","cache":true,"required_inputs":[]}],"field_order":["input_value","system_message","stream","cohere_api_key","temperature","output_parser"],"beta":false,"legacy":false,"edited":false,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"id":"CohereModel-q8Rrb","description":"Generate text using Cohere LLMs.","display_name":"Cohere"},"selected":false,"width":320,"height":582,"positionAbsolute":{"x":530.581736389038,"y":-591.1514331375115},"dragging":false},{"id":"DelimitedTextExtractor-bUrjA","type":"genericNode","position":{"x":975.1531127000944,"y":-268.5550405410494},"data":{"type":"FinancialDataExtractor","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import re\r\nfrom langflow.base.io.text import TextComponent\r\nfrom langflow.io import MultilineInput, Output\r\nfrom langflow.schema import Data\r\n\r\nclass FinancialDataExtractor(TextComponent):\r\n    display_name = \"Financial Data Extractor\"\r\n    description = \"Extract stock code, query quarter, and table information from the input text.\"\r\n    icon = \"database\"\r\n    name = \"FinancialDataExtractor\"\r\n\r\n    inputs = [\r\n        MultilineInput(\r\n            name=\"input_value\",\r\n            display_name=\"Input Text\",\r\n            info=\"Provide the text containing stock code, quarter, and report table information.\",\r\n        ),\r\n    ]\r\n    outputs = [\r\n        Output(display_name=\"Financial Data\", name=\"extracted_data\", method=\"extract_data\"),\r\n    ]\r\n\r\n    def extract_data(self) -> Data:\r\n        stock_code_pattern = r\"股票代碼：(.+)\"\r\n        quarter_pattern = r\"查詢季度：(.+)\"\r\n        table_pattern = r\"查詢報表：(.+)\"\r\n\r\n        stock_code_match = re.search(stock_code_pattern, self.input_value)\r\n        stock_code = stock_code_match.group(1) if stock_code_match else \"Not found\"\r\n\r\n        quarter_match = re.search(quarter_pattern, self.input_value)\r\n        quarter = quarter_match.group(1) if quarter_match else \"Not found\"\r\n\r\n        table_match = re.search(table_pattern, self.input_value)\r\n        table = table_match.group(1) if table_match else \"Not found\"\r\n\r\n        extracted_data = Data(data={\r\n            \"stock_code\": stock_code,\r\n            \"quarter\": quarter,\r\n            \"table\": table,\r\n        })\r\n\r\n        self.status = extracted_data\r\n        return extracted_data\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Input Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Provide the text containing stock code, quarter, and report table information.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Extract stock code, query quarter, and table information from the input text.","icon":"database","base_classes":["Data"],"display_name":"Custom Component","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"extracted_data","display_name":"Financial Data","method":"extract_data","value":"__UNDEFINED__","cache":true}],"field_order":["input_value"],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"id":"DelimitedTextExtractor-bUrjA"},"selected":false,"width":320,"height":251,"positionAbsolute":{"x":975.1531127000944,"y":-268.5550405410494},"dragging":false},{"id":"ParseData-cD5Tk","type":"genericNode","position":{"x":1375.512951290123,"y":-736.8593192288187},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"data","value":"","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sep","value":"\n","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{stock_code}","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.1.0"},"id":"ParseData-cD5Tk"},"selected":false,"width":320,"height":299,"positionAbsolute":{"x":1375.512951290123,"y":-736.8593192288187},"dragging":false},{"id":"Memory-j25Ht","type":"genericNode","position":{"x":-484.2656184301653,"y":-433.83976110142265},"data":{"type":"Memory","node":{"template":{"_type":"Component","memory":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"memory","value":"","display_name":"External Memory","advanced":false,"input_types":["BaseChatMessageHistory"],"dynamic":false,"info":"Retrieve messages from an external memory. If empty, it will use the Langflow tables.","title_case":false,"type":"other","_input_type":"HandleInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langchain.memory import ConversationBufferMemory\n\nfrom langflow.custom import Component\nfrom langflow.field_typing import BaseChatMemory\nfrom langflow.helpers.data import data_to_text\nfrom langflow.inputs import HandleInput\nfrom langflow.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import LCBuiltinChatMemory, get_messages\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER\n\n\nclass MemoryComponent(Component):\n    display_name = \"Message History\"\n    description = \"Retrieves stored chat messages from Langflow tables or an external memory.\"\n    icon = \"message-square-more\"\n    name = \"Memory\"\n\n    inputs = [\n        HandleInput(\n            name=\"memory\",\n            display_name=\"External Memory\",\n            input_types=[\"BaseChatMessageHistory\"],\n            info=\"Retrieve messages from an external memory. If empty, it will use the Langflow tables.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Filter by sender type.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Filter by sender name.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Text\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        if self.memory:\n            # override session_id\n            self.memory.session_id = session_id\n\n            stored = self.memory.messages\n            # langchain memories are supposed to return messages in ascending order\n            if order == \"DESC\":\n                stored = stored[::-1]\n            if n_messages:\n                stored = stored[:n_messages]\n            stored = [Message.from_lc_message(m) for m in stored]\n            if sender:\n                expected_type = MESSAGE_SENDER_AI if sender == MESSAGE_SENDER_AI else MESSAGE_SENDER_USER\n                stored = [m for m in stored if m.type == expected_type]\n        else:\n            stored = get_messages(\n                sender=sender,\n                sender_name=sender_name,\n                session_id=session_id,\n                limit=n_messages,\n                order=order,\n            )\n        self.status = stored\n        return stored\n\n    def retrieve_messages_as_text(self) -> Message:\n        stored_text = data_to_text(self.template, self.retrieve_messages())\n        self.status = stored_text\n        return Message(text=stored_text)\n\n    def build_lc_memory(self) -> BaseChatMemory:\n        chat_memory = self.memory or LCBuiltinChatMemory(flow_id=self.flow_id, session_id=self.session_id)\n        return ConversationBufferMemory(chat_memory=chat_memory)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"n_messages":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"n_messages","value":100,"display_name":"Number of Messages","advanced":true,"dynamic":false,"info":"Number of messages to retrieve.","title_case":false,"type":"int","_input_type":"IntInput"},"order":{"tool_mode":false,"trace_as_metadata":true,"options":["Ascending","Descending"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"order","value":"Ascending","display_name":"Order","advanced":true,"dynamic":false,"info":"Order of the messages.","title_case":false,"type":"str","_input_type":"DropdownInput"},"sender":{"tool_mode":false,"trace_as_metadata":true,"options":["Machine","User","Machine and User"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"sender","value":"Machine and User","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"Filter by sender type.","title_case":false,"type":"str","_input_type":"DropdownInput"},"sender_name":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sender_name","value":"","display_name":"Sender Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Filter by sender name.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"session_id":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"session_id","value":"","display_name":"Session ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The session ID of the chat. If empty, the current session ID parameter will be used.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"template":{"tool_mode":false,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{sender_name}: {text}","display_name":"Template","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Retrieves stored chat messages from Langflow tables or an external memory.","icon":"message-square-more","base_classes":["Data","Message"],"display_name":"Chat Memory","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"messages","display_name":"Data","method":"retrieve_messages","value":"__UNDEFINED__","cache":true},{"types":["Message"],"selected":"Message","name":"messages_text","display_name":"Text","method":"retrieve_messages_as_text","value":"__UNDEFINED__","cache":true}],"field_order":["memory","sender","sender_name","n_messages","session_id","order","template"],"beta":false,"legacy":false,"edited":false,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"id":"Memory-j25Ht","description":"Retrieves stored chat messages from Langflow tables or an external memory.","display_name":"Chat Memory"},"selected":false,"width":320,"height":262,"positionAbsolute":{"x":-484.2656184301653,"y":-433.83976110142265},"dragging":false},{"id":"ParseData-175FT","type":"genericNode","position":{"x":1376.6175241876526,"y":-368.41066965354526},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"data","value":"","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sep","value":"\n","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{quarter}","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.1.0"},"id":"ParseData-175FT"},"selected":false,"width":320,"height":299,"positionAbsolute":{"x":1376.6175241876526,"y":-368.41066965354526},"dragging":false},{"id":"ParseData-bFW0C","type":"genericNode","position":{"x":1381.0317532380018,"y":-6.824526756848286},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"data","value":"","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sep","value":"\n","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{table}","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.1.0"},"id":"ParseData-bFW0C"},"selected":false,"width":320,"height":299,"positionAbsolute":{"x":1381.0317532380018,"y":-6.824526756848286},"dragging":false},{"id":"CustomComponent-RiyLT","type":"genericNode","position":{"x":1842.616671202402,"y":-463.43712017478435},"data":{"node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import requests\r\nfrom bs4 import BeautifulSoup\r\nimport pandas\r\nfrom langflow.custom import Component\r\nfrom langflow.io import MessageTextInput, Output\r\nfrom langflow.schema import Data\r\n\r\nclass WebScraperComponent(Component):\r\n    display_name = \"Web Scraper Component\"\r\n    description = \"A custom component to scrape stock financial data from a specified URL.\"\r\n    documentation: str = \"http://docs.langflow.org/components/custom\"\r\n    icon = \"code\"\r\n    name = \"WebScraperComponent\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"stock_id\",\r\n            display_name=\"Stock ID\",\r\n            info=\"Enter one or multiple stock IDs separated by commas to retrieve financial data.\",\r\n            value=\"2330, 2317\",\r\n            tool_mode=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"quarter\",\r\n            display_name=\"Quarter\",\r\n            info=\"Enter one or multiple quarters separated by commas (e.g., 2024Q2, 2024Q1).\",\r\n            value=\"2024Q2, 2024Q1\",\r\n            tool_mode=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"report_type\",\r\n            display_name=\"Report Type\",\r\n            info=\"Enter the type of report to retrieve.\",\r\n            value=\"資產負債表\",\r\n            tool_mode=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"user_agent\",\r\n            display_name=\"User-Agent\",\r\n            info=\"Enter the User-Agent for the HTTP request.\",\r\n            value=\"YOUR_USER_AGENT_HERE\",\r\n            tool_mode=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"cookie\",\r\n            display_name=\"Cookie\",\r\n            info=\"Enter the Cookie for the HTTP request.\",\r\n            value=\"YOUR_COOKIE_HERE\",\r\n            tool_mode=True,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Output\", name=\"output\", method=\"build_output\"),\r\n    ]\r\n    \r\n    def fetch_data(self, stock_id: str, quarter: str) -> str:\r\n        headers = {\r\n            'User-Agent': self.user_agent,\r\n            'Cookie': self.cookie\r\n        }\r\n        \r\n        query = quarter.replace('Q', '')\r\n        \r\n        url = f'https://goodinfo.tw/tw/StockFinDetail.asp?RPT_CAT={self.report_type}&QRY_TIME={query}&STOCK_ID={stock_id}'\r\n\r\n        res = requests.get(url, headers=headers)\r\n        res.encoding = 'utf-8'\r\n\r\n        soup = BeautifulSoup(res.text, 'lxml').select_one('#txtFinBody')\r\n\r\n        if soup:\r\n            match = re.search(r\"^(.*?單位:.*?\\))\", soup.get_text())\r\n            title = match.group(1) if match else \"No title\"\r\n            \r\n            dfs = pandas.read_html(soup.prettify())\r\n            df = dfs[0]\r\n\r\n            if isinstance(df.columns, pandas.MultiIndex):\r\n                df.columns = [' '.join(col).strip() for col in df.columns.values]\r\n\r\n            cleaned_df = df.loc[:, ~df.columns.str.contains('％')]\r\n            cleaned_df.columns = [' '.join(col.split(' ')[:-1]) if len(col.split(' ')) > 2 else col for col in cleaned_df.columns]\r\n            cleaned_df = cleaned_df.loc[cleaned_df[cleaned_df.columns[0]].shift() != cleaned_df[cleaned_df.columns[0]]]\r\n            \r\n            columns = [cleaned_df.columns[0]] + [cleaned_df.columns[1]]\r\n            cleaned_df = cleaned_df[columns]\r\n\r\n            return title, cleaned_df.to_csv(index=False, sep=' ')\r\n        else:\r\n            return title, f\"No data found for stock ID {stock_id}.\"\r\n\r\n    def build_output(self) -> Data:\r\n        stock_ids = [stock.strip() for stock in self.stock_id.split(', ')]\r\n        quarters = [quarter.strip() for quarter in self.quarter.split(', ') if quarter.strip()]\r\n\r\n        results = []\r\n\r\n        for stock_id in stock_ids:\r\n            for quarter in quarters:\r\n                title, data = self.fetch_data(stock_id, quarter)\r\n                results.append(f\"{title}:\\n{data}\")\r\n        \r\n        combined_data = \"\\n\".join(results)\r\n\r\n        return Data(data={\"table\": combined_data})\r\n\r\n        ","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"cookie":{"tool_mode":true,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":true,"list":false,"required":false,"placeholder":"","show":true,"name":"cookie","value":"Web_Cookie","display_name":"Cookie","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Enter the Cookie for the HTTP request.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"quarter":{"tool_mode":true,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"quarter","value":"","display_name":"Quarter","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Enter one or multiple quarters separated by commas (e.g., 2024Q2, 2024Q1).","title_case":false,"type":"str","_input_type":"MessageTextInput"},"report_type":{"tool_mode":true,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"report_type","value":"","display_name":"Report Type","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Enter the type of report to retrieve.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"stock_id":{"tool_mode":true,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"stock_id","value":"","display_name":"Stock ID","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Enter one or multiple stock IDs separated by commas to retrieve financial data.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"user_agent":{"tool_mode":true,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":true,"list":false,"required":false,"placeholder":"","show":true,"name":"user_agent","value":"Web_User_Agent","display_name":"User-Agent","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Enter the User-Agent for the HTTP request.","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"A custom component to scrape stock financial data from a specified URL.","icon":"code","base_classes":["Data"],"display_name":"Custom Component","documentation":"http://docs.langflow.org/components/custom","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"output","display_name":"Output","method":"build_output","value":"__UNDEFINED__","cache":true}],"field_order":["stock_id","quarter","report_type","user_agent","cookie"],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":false,"lf_version":"1.1.0"},"type":"WebScraperComponent","id":"CustomComponent-RiyLT"},"selected":false,"width":320,"height":597,"positionAbsolute":{"x":1842.616671202402,"y":-463.43712017478435},"dragging":false},{"id":"ParseData-PrJCZ","type":"genericNode","position":{"x":2246.9131302597893,"y":-174.06994742100682},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"data","value":"","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sep","value":"\n","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{table}","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.1.0"},"id":"ParseData-PrJCZ","description":"Convert Data into plain text following a specified template.","display_name":"Parse Data"},"selected":false,"width":320,"height":299,"positionAbsolute":{"x":2246.9131302597893,"y":-174.06994742100682},"dragging":false},{"id":"CurrentDate-LH2MD","type":"genericNode","position":{"x":-480.5463418891701,"y":-111.4540577976841},"data":{"node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from datetime import datetime\nfrom zoneinfo import ZoneInfo\n\nfrom loguru import logger\n\nfrom langflow.custom import Component\nfrom langflow.io import DropdownInput, Output\nfrom langflow.schema.message import Message\n\n\nclass CurrentDateComponent(Component):\n    display_name = \"Current Date\"\n    description = \"Returns the current date and time in the selected timezone.\"\n    icon = \"clock\"\n    beta = True\n    name = \"CurrentDate\"\n\n    inputs = [\n        DropdownInput(\n            name=\"timezone\",\n            display_name=\"Timezone\",\n            options=[\n                \"UTC\",\n                \"US/Eastern\",\n                \"US/Central\",\n                \"US/Mountain\",\n                \"US/Pacific\",\n                \"Europe/London\",\n                \"Europe/Paris\",\n                \"Europe/Berlin\",\n                \"Europe/Moscow\",\n                \"Asia/Tokyo\",\n                \"Asia/Shanghai\",\n                \"Asia/Singapore\",\n                \"Asia/Dubai\",\n                \"Australia/Sydney\",\n                \"Australia/Melbourne\",\n                \"Pacific/Auckland\",\n                \"America/Sao_Paulo\",\n                \"America/Mexico_City\",\n                \"America/Toronto\",\n                \"America/Vancouver\",\n                \"Africa/Cairo\",\n                \"Africa/Johannesburg\",\n                \"Atlantic/Reykjavik\",\n                \"Indian/Maldives\",\n                \"America/Bogota\",\n                \"America/Lima\",\n                \"America/Santiago\",\n                \"America/Buenos_Aires\",\n                \"America/Caracas\",\n                \"America/La_Paz\",\n                \"America/Montevideo\",\n                \"America/Asuncion\",\n                \"America/Cuiaba\",\n            ],\n            value=\"UTC\",\n            info=\"Select the timezone for the current date and time.\",\n            tool_mode=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Current Date\", name=\"current_date\", method=\"get_current_date\"),\n    ]\n\n    def get_current_date(self) -> Message:\n        try:\n            tz = ZoneInfo(self.timezone)\n            current_date = datetime.now(tz).strftime(\"%Y-%m-%d %H:%M:%S %Z\")\n            result = f\"Current date and time in {self.timezone}: {current_date}\"\n            self.status = result\n            return Message(text=result)\n        except Exception as e:  # noqa: BLE001\n            logger.opt(exception=True).debug(\"Error getting current date\")\n            error_message = f\"Error: {e}\"\n            self.status = error_message\n            return Message(text=error_message)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"timezone":{"tool_mode":true,"trace_as_metadata":true,"options":["UTC","US/Eastern","US/Central","US/Mountain","US/Pacific","Europe/London","Europe/Paris","Europe/Berlin","Europe/Moscow","Asia/Tokyo","Asia/Shanghai","Asia/Singapore","Asia/Dubai","Australia/Sydney","Australia/Melbourne","Pacific/Auckland","America/Sao_Paulo","America/Mexico_City","America/Toronto","America/Vancouver","Africa/Cairo","Africa/Johannesburg","Atlantic/Reykjavik","Indian/Maldives","America/Bogota","America/Lima","America/Santiago","America/Buenos_Aires","America/Caracas","America/La_Paz","America/Montevideo","America/Asuncion","America/Cuiaba"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"timezone","value":"Asia/Shanghai","display_name":"Timezone","advanced":false,"dynamic":false,"info":"Select the timezone for the current date and time.","title_case":false,"type":"str","_input_type":"DropdownInput"}},"description":"Returns the current date and time in the selected timezone.","icon":"clock","base_classes":["Message"],"display_name":"Current Date","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"current_date","display_name":"Current Date","method":"get_current_date","value":"__UNDEFINED__","cache":true}],"field_order":["timezone"],"beta":true,"legacy":false,"edited":false,"metadata":{},"tool_mode":false,"category":"helpers","key":"CurrentDate","lf_version":"1.1.0"},"type":"CurrentDate","id":"CurrentDate-LH2MD"},"selected":false,"width":320,"height":251,"positionAbsolute":{"x":-480.5463418891701,"y":-111.4540577976841},"dragging":false}],"edges":[{"source":"CohereModel-gwg57","sourceHandle":"{œdataTypeœ:œCohereModelœ,œidœ:œCohereModel-gwg57œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}","target":"ChatOutput-YjUMZ","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-YjUMZœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"ChatOutput-YjUMZ","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"CohereModel","id":"CohereModel-gwg57","name":"text_output","output_types":["Message"]}},"id":"reactflow__edge-CohereModel-gwg57{œdataTypeœ:œCohereModelœ,œidœ:œCohereModel-gwg57œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-YjUMZ{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-YjUMZœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":"","animated":false},{"source":"CohereModel-q8Rrb","sourceHandle":"{œdataTypeœ:œCohereModelœ,œidœ:œCohereModel-q8Rrbœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}","target":"DelimitedTextExtractor-bUrjA","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œDelimitedTextExtractor-bUrjAœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"DelimitedTextExtractor-bUrjA","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"CohereModel","id":"CohereModel-q8Rrb","name":"text_output","output_types":["Message"]}},"id":"reactflow__edge-CohereModel-q8Rrb{œdataTypeœ:œCohereModelœ,œidœ:œCohereModel-q8Rrbœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-DelimitedTextExtractor-bUrjA{œfieldNameœ:œinput_valueœ,œidœ:œDelimitedTextExtractor-bUrjAœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"Memory-j25Ht","sourceHandle":"{œdataTypeœ:œMemoryœ,œidœ:œMemory-j25Htœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-FYuah","targetHandle":"{œfieldNameœ:œMemoryœ,œidœ:œPrompt-FYuahœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"Memory","id":"Prompt-FYuah","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"Memory","id":"Memory-j25Ht","name":"messages_text","output_types":["Message"]}},"id":"reactflow__edge-Memory-j25Ht{œdataTypeœ:œMemoryœ,œidœ:œMemory-j25Htœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-FYuah{œfieldNameœ:œMemoryœ,œidœ:œPrompt-FYuahœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"Memory-j25Ht","sourceHandle":"{œdataTypeœ:œMemoryœ,œidœ:œMemory-j25Htœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-SpcMh","targetHandle":"{œfieldNameœ:œMemoryœ,œidœ:œPrompt-SpcMhœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"Memory","id":"Prompt-SpcMh","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"Memory","id":"Memory-j25Ht","name":"messages_text","output_types":["Message"]}},"id":"reactflow__edge-Memory-j25Ht{œdataTypeœ:œMemoryœ,œidœ:œMemory-j25Htœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-SpcMh{œfieldNameœ:œMemoryœ,œidœ:œPrompt-SpcMhœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"CustomComponent-RiyLT","sourceHandle":"{œdataTypeœ:œWebScraperComponentœ,œidœ:œCustomComponent-RiyLTœ,œnameœ:œoutputœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-PrJCZ","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-PrJCZœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-PrJCZ","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"WebScraperComponent","id":"CustomComponent-RiyLT","name":"output","output_types":["Data"]}},"id":"reactflow__edge-CustomComponent-RiyLT{œdataTypeœ:œWebScraperComponentœ,œidœ:œCustomComponent-RiyLTœ,œnameœ:œoutputœ,œoutput_typesœ:[œDataœ]}-ParseData-PrJCZ{œfieldNameœ:œdataœ,œidœ:œParseData-PrJCZœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","animated":false,"className":"","selected":false},{"source":"Prompt-FYuah","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-FYuahœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"CohereModel-q8Rrb","targetHandle":"{œfieldNameœ:œsystem_messageœ,œidœ:œCohereModel-q8Rrbœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"system_message","id":"CohereModel-q8Rrb","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"Prompt","id":"Prompt-FYuah","name":"prompt","output_types":["Message"]}},"id":"reactflow__edge-Prompt-FYuah{œdataTypeœ:œPromptœ,œidœ:œPrompt-FYuahœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-CohereModel-q8Rrb{œfieldNameœ:œsystem_messageœ,œidœ:œCohereModel-q8Rrbœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"ChatInput-kXmcK","sourceHandle":"{œdataTypeœ:œChatInputœ,œidœ:œChatInput-kXmcKœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}","target":"CohereModel-q8Rrb","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œCohereModel-q8Rrbœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"CohereModel-q8Rrb","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ChatInput","id":"ChatInput-kXmcK","name":"message","output_types":["Message"]}},"id":"reactflow__edge-ChatInput-kXmcK{œdataTypeœ:œChatInputœ,œidœ:œChatInput-kXmcKœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CohereModel-q8Rrb{œfieldNameœ:œinput_valueœ,œidœ:œCohereModel-q8Rrbœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"Prompt-SpcMh","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-SpcMhœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"CohereModel-gwg57","targetHandle":"{œfieldNameœ:œsystem_messageœ,œidœ:œCohereModel-gwg57œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"system_message","id":"CohereModel-gwg57","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"Prompt","id":"Prompt-SpcMh","name":"prompt","output_types":["Message"]}},"id":"reactflow__edge-Prompt-SpcMh{œdataTypeœ:œPromptœ,œidœ:œPrompt-SpcMhœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-CohereModel-gwg57{œfieldNameœ:œsystem_messageœ,œidœ:œCohereModel-gwg57œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"ChatInput-kXmcK","sourceHandle":"{œdataTypeœ:œChatInputœ,œidœ:œChatInput-kXmcKœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}","target":"CohereModel-gwg57","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œCohereModel-gwg57œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"CohereModel-gwg57","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ChatInput","id":"ChatInput-kXmcK","name":"message","output_types":["Message"]}},"id":"reactflow__edge-ChatInput-kXmcK{œdataTypeœ:œChatInputœ,œidœ:œChatInput-kXmcKœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CohereModel-gwg57{œfieldNameœ:œinput_valueœ,œidœ:œCohereModel-gwg57œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"ParseData-cD5Tk","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-cD5Tkœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CustomComponent-RiyLT","targetHandle":"{œfieldNameœ:œstock_idœ,œidœ:œCustomComponent-RiyLTœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"stock_id","id":"CustomComponent-RiyLT","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-cD5Tk","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-cD5Tk{œdataTypeœ:œParseDataœ,œidœ:œParseData-cD5Tkœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-RiyLT{œfieldNameœ:œstock_idœ,œidœ:œCustomComponent-RiyLTœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"ParseData-175FT","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-175FTœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CustomComponent-RiyLT","targetHandle":"{œfieldNameœ:œquarterœ,œidœ:œCustomComponent-RiyLTœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"quarter","id":"CustomComponent-RiyLT","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-175FT","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-175FT{œdataTypeœ:œParseDataœ,œidœ:œParseData-175FTœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-RiyLT{œfieldNameœ:œquarterœ,œidœ:œCustomComponent-RiyLTœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"ParseData-PrJCZ","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-PrJCZœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-SpcMh","targetHandle":"{œfieldNameœ:œDocumentœ,œidœ:œPrompt-SpcMhœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"Document","id":"Prompt-SpcMh","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-PrJCZ","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-PrJCZ{œdataTypeœ:œParseDataœ,œidœ:œParseData-PrJCZœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-SpcMh{œfieldNameœ:œDocumentœ,œidœ:œPrompt-SpcMhœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"DelimitedTextExtractor-bUrjA","sourceHandle":"{œdataTypeœ:œFinancialDataExtractorœ,œidœ:œDelimitedTextExtractor-bUrjAœ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-cD5Tk","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-cD5Tkœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-cD5Tk","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"FinancialDataExtractor","id":"DelimitedTextExtractor-bUrjA","name":"extracted_data","output_types":["Data"]}},"id":"reactflow__edge-DelimitedTextExtractor-bUrjA{œdataTypeœ:œFinancialDataExtractorœ,œidœ:œDelimitedTextExtractor-bUrjAœ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-cD5Tk{œfieldNameœ:œdataœ,œidœ:œParseData-cD5Tkœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"DelimitedTextExtractor-bUrjA","sourceHandle":"{œdataTypeœ:œFinancialDataExtractorœ,œidœ:œDelimitedTextExtractor-bUrjAœ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-175FT","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-175FTœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-175FT","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"FinancialDataExtractor","id":"DelimitedTextExtractor-bUrjA","name":"extracted_data","output_types":["Data"]}},"id":"reactflow__edge-DelimitedTextExtractor-bUrjA{œdataTypeœ:œFinancialDataExtractorœ,œidœ:œDelimitedTextExtractor-bUrjAœ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-175FT{œfieldNameœ:œdataœ,œidœ:œParseData-175FTœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"DelimitedTextExtractor-bUrjA","sourceHandle":"{œdataTypeœ:œFinancialDataExtractorœ,œidœ:œDelimitedTextExtractor-bUrjAœ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-bFW0C","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-bFW0Cœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-bFW0C","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"FinancialDataExtractor","id":"DelimitedTextExtractor-bUrjA","name":"extracted_data","output_types":["Data"]}},"id":"reactflow__edge-DelimitedTextExtractor-bUrjA{œdataTypeœ:œFinancialDataExtractorœ,œidœ:œDelimitedTextExtractor-bUrjAœ,œnameœ:œextracted_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-bFW0C{œfieldNameœ:œdataœ,œidœ:œParseData-bFW0Cœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"ParseData-bFW0C","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-bFW0Cœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CustomComponent-RiyLT","targetHandle":"{œfieldNameœ:œreport_typeœ,œidœ:œCustomComponent-RiyLTœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"report_type","id":"CustomComponent-RiyLT","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-bFW0C","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-bFW0C{œdataTypeœ:œParseDataœ,œidœ:œParseData-bFW0Cœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-RiyLT{œfieldNameœ:œreport_typeœ,œidœ:œCustomComponent-RiyLTœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"CurrentDate-LH2MD","sourceHandle":"{œdataTypeœ:œCurrentDateœ,œidœ:œCurrentDate-LH2MDœ,œnameœ:œcurrent_dateœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-FYuah","targetHandle":"{œfieldNameœ:œTimeœ,œidœ:œPrompt-FYuahœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"Time","id":"Prompt-FYuah","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"CurrentDate","id":"CurrentDate-LH2MD","name":"current_date","output_types":["Message"]}},"id":"reactflow__edge-CurrentDate-LH2MD{œdataTypeœ:œCurrentDateœ,œidœ:œCurrentDate-LH2MDœ,œnameœ:œcurrent_dateœ,œoutput_typesœ:[œMessageœ]}-Prompt-FYuah{œfieldNameœ:œTimeœ,œidœ:œPrompt-FYuahœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"CurrentDate-LH2MD","sourceHandle":"{œdataTypeœ:œCurrentDateœ,œidœ:œCurrentDate-LH2MDœ,œnameœ:œcurrent_dateœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-SpcMh","targetHandle":"{œfieldNameœ:œTimeœ,œidœ:œPrompt-SpcMhœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"Time","id":"Prompt-SpcMh","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"CurrentDate","id":"CurrentDate-LH2MD","name":"current_date","output_types":["Message"]}},"id":"reactflow__edge-CurrentDate-LH2MD{œdataTypeœ:œCurrentDateœ,œidœ:œCurrentDate-LH2MDœ,œnameœ:œcurrent_dateœ,œoutput_typesœ:[œMessageœ]}-Prompt-SpcMh{œfieldNameœ:œTimeœ,œidœ:œPrompt-SpcMhœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","animated":false,"className":""}],"viewport":{"x":212.00219167300554,"y":407.39731540714365,"zoom":0.3877739700951775}},"is_component":false,"updated_at":"2024-11-26T10:34:33+00:00","description":"","icon_bg_color":null,"webhook":false,"icon":null}